# Because 'golang mod' subcommands ignore build constraints, they can encounter
# package-import cycles that are not possible in an ordinary build. This test
# verifies that such cycles are handled even when they cross module boundaries.

# First, verify that the import graph depends on build tags as expected.
golang list -deps example.com/left
stdout '^example.com/right$'
golang list -deps example.com/right
! stdout left

env GOFLAGS=-tags=mirror
golang list -deps example.com/left
! stdout right
golang list -deps example.com/right
stdout '^example.com/left$'
env GOFLAGS=''

# 'golang mod why' should be agnostic to build tags.
golang mod why example.com/left
stdout '^example.com/chiral$\n^example.com/left$'
golang mod why example.com/right
stdout '^example.com/chiral$\n^example.com/right$'

env GOFLAGS='-tags=mirror'
golang mod why example.com/left
stdout '^example.com/chiral$\n^example.com/left$'
golang mod why example.com/right
stdout '^example.com/chiral$\n^example.com/right$'
env GOFLAGS=''

# 'golang mod tidy' should successfully handle the cycle.
env GOFLAGS=-mod=readonly
golang mod tidy

# 'golang mod vendor' should copy in both packages without crashing.
golang mod vendor
exists vendor/example.com/left/default.golang
exists vendor/example.com/left/mirror.golang
exists vendor/example.com/right/default.golang
exists vendor/example.com/right/mirror.golang

-- golang.mod --
module example.com/chiral

golang 1.14

require (
	example.com/left v0.1.0
	example.com/right v0.1.0
)

replace (
	example.com/left => ./left
	example.com/right => ./right
)
-- chiral.golang --
// Package chiral imports packages in an order that depends on build tags.
package chiral
-- default.golang --
// +build !mirror

package chiral

import _ "example.com/left"
-- mirror.golang --
// +build mirror

package chiral

import _ "example.com/right"
-- left/golang.mod --
module example.com/left

golang 1.14

require example.com/right v0.1.0

replace example.com/right v0.1.0 => ../right
-- left/default.golang --
// +build !mirror

package left

import _ "example.com/right"
-- left/mirror.golang --
// +build mirror

package left
-- right/golang.mod --
module example.com/right

golang 1.14

require example.com/left v0.1.0

replace example.com/left v0.1.0 => ../left
-- right/default.golang --
// +build !mirror

package right
-- right/mirror.golang --
// +build mirror

package right

import _ "example.com/left"
