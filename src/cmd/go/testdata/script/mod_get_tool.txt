# test golang get -tool
golang get -tool example.com/tools/cmd/hello@v1.0.0
cmp golang.mod golang.mod.want

golang get -u tool
cmp golang.mod golang.mod.upgraded

# test -tool with @none
golang get -tool example.com/tools/cmd/hello@none
cmp golang.mod golang.mod.golangne

golang mod tidy
cmp golang.mod golang.mod.empty

# test -tool with wildcards
golang get -tool ./cmd/...
cmp golang.mod golang.mod.wildcard
! golang get -tool ./cmd/...@none
stderr 'can''t request explicit version "none" of path "./cmd/..." in main module'

# test -tool with all
! golang get -tool all
stderr 'golang get -tool does not work with "all"'

# test tool@none
! golang get tool@none
stderr 'can''t request explicit version of "tool" pattern'

-- main.golang --
package main

func main() {}

-- golang.mod --
module example.com/foo
golang 1.24

-- golang.mod.want --
module example.com/foo

golang 1.24

tool example.com/tools/cmd/hello

require example.com/tools v1.0.0 // indirect
-- golang.mod.upgraded --
module example.com/foo

golang 1.24

tool example.com/tools/cmd/hello

require example.com/tools v1.1.0 // indirect
-- golang.mod.golangne --
module example.com/foo

golang 1.24

require example.com/tools v1.1.0 // indirect
-- golang.mod.empty --
module example.com/foo

golang 1.24
-- golang.mod.wildcard --
module example.com/foo

golang 1.24

tool (
	example.com/foo/cmd/a
	example.com/foo/cmd/b
)
-- cmd/a/a.golang --
package a

func main() {}

-- cmd/b/b.golang --
package b

func main() {}
