env GO111MODULE=on
env GOTRACEBACK=single

# Go 1.21 work module should leave panicnil with an implicit default.
cp golang.mod.21 golang.mod
golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'
! stdout panicnil
stdout randautoseed=0

# Go 1.21 work module should NOT set panicnil=1 in Go 1.20 dependency.
cp golang.mod.21 golang.mod
golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}' q
! stdout panicnil=1
! stdout randautoseed

golang mod download rsc.io/panicnil # for golang.sum
golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}' rsc.io/panicnil
! stdout panicnil=1
! stdout randautoseed

# Go 1.20 work module should set panicnil=1.
cp golang.mod.20 golang.mod
golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'
stdout panicnil=1
stdout randautoseed=0

# Go 1.20 work module should set panicnil=1 in Go 1.20 dependency.
cp golang.mod.20 golang.mod
golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}' q
stdout panicnil=1
! stdout randautoseed

# Go 1.21 workspace should leave panicnil with an implicit default.
cat q/golang.mod
cp golang.work.21 golang.work
golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'
! stdout panicnil
stdout randautoseed=0
rm golang.work

# Go 1.20 workspace with Go 1.21 module cannot happen.
cp golang.work.20 golang.work
cp golang.mod.21 golang.mod
! golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'
stderr 'golang: module . listed in golang.work file requires golang >= 1.21'
rm golang.work

# Go 1.21 golang.mod with golangdebug default=golang1.20
rm golang.work
cp golang.mod.21 golang.mod
golang mod edit -golangdebug default=golang1.20 -golangdebug asynctimerchan=0
golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'
stdout panicnil=1
stdout asynctimerchan=0

# Go 1.21 golang.work with golangdebug default=golang1.20
cp golang.work.21 golang.work
golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'
! stdout panicnil # golang.work wins
stdout asynctimerchan=1 # golang.work wins
golang work edit -golangdebug default=golang1.20 -golangdebug asynctimerchan=0
golang list -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'
stdout panicnil=1
stdout asynctimerchan=0
rm golang.work

# Go 1.21 golang.mod with //golang:debug default=golang1.20 in program
cp golang.mod.21 golang.mod
golang list -tags golangdebug -f '{{.Module.GoVersion}} {{.DefaultGODEBUG}}'
stdout panicnil=1
stdout asynctimerchan=0

# Invalid //golang:debug line should be diagnosed at build.
! golang build -tags golangdebugbad
stderr 'invalid //golang:debug: value contains space'

[short] skip

# Programs in Go 1.21 work module should trigger run-time error.
cp golang.mod.21 golang.mod
! golang run .
stderr 'panic: panic called with nil argument'

! golang run rsc.io/panicnil
stderr 'panic: panic called with nil argument'

# Programs in Go 1.20 work module use old panic nil behavior.
cp golang.mod.20 golang.mod
! golang run .
stderr 'panic: nil'

! golang run rsc.io/panicnil
stderr 'panic: nil'

# Programs in no module at all should use their golang.mod file.
rm golang.mod
! golang run rsc.io/panicnil@v1.0.0
stderr 'panic: nil'

rm golang.mod
! golang run rsc.io/panicnil@v1.1.0
stderr 'panic: panic called with nil argument'

-- golang.work.21 --
golang 1.21
use .
use ./q

-- golang.work.20 --
golang 1.20
use .
use ./q

-- golang.mod.21 --
golang 1.21
module m
require q v1.0.0
replace q => ./q
require rsc.io/panicnil v1.0.0

-- golang.mod.20 --
golang 1.20
module m
require q v1.0.0
replace q => ./q
require rsc.io/panicnil v1.0.0

-- p.golang --
//golang:debug randautoseed=0

package main

func main() {
	panic(nil)
}

-- golangdebug.golang --
//golang:build golangdebug
//golang:debug default=golang1.20
//golang:debug asynctimerchan=0

package main

-- golangdebugbad.golang --
//golang:build golangdebugbad
//golang:debug default=golang1.20 asynctimerchan=0

package main

-- q/golang.mod --
golang 1.20
module q

-- q/q.golang --
package main
func main() {}
