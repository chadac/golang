# https://golanglang.org/issue/45094: 'golang mod tidy' now accepts a '-golang' flag
# to change the language version in use.
#
# The package import graph used in this test looks like:
#
# m --- a --- b
#             |
#             b_test --- c
#                        |
#                        c_test --- d
#
# The module diagram looks like:
#
# m --- a --- b
# |
# + --- c
# |
# + --- d
#
# Module b omits its dependency on c, and module c omits its dependency on d.
#
# In golang 1.15, the tidy main module must require a (because it is direct),
# c (because it is a missing test dependency of an imported package),
# and d (because it is a missing transitive test dependency).
#
# In golang 1.16, the tidy main module can omit d because it is no longer
# included in "all".
#
# In golang 1.17, the main module must explicitly require b
# (because it is transitively imported by the main module).

cp golang.mod golang.mod.orig

	# Pretend we're a release version so that we can theoretically
	# write our version in toolchain lines.
env golangversion=1.99.0
env TESTGO_VERSION=golang${golangversion}

# An invalid argument should be rejected.

! golang mod tidy -golang=bananas
stderr '^invalid value "bananas" for flag -golang: expecting a Go version like "'$golangversion'"$'
cmp golang.mod golang.mod.orig

! golang mod tidy -golang=0.9
stderr '^invalid value "0.9" for flag -golang: expecting a Go version like "'$golangversion'"$'

! golang mod tidy -golang=2000.0
stderr '^invalid value "2000.0" for flag -golang: maximum supported Go version is '$golangversion'$'


# Supported versions should change the golang.mod file to be tidy according to the
# indicated version.

golang mod tidy -golang=1.15
cmp golang.mod golang.mod.115

golang mod tidy
cmp golang.mod golang.mod.115


golang mod tidy -golang=1.16
cmp golang.mod golang.mod.116

golang mod tidy
cmp golang.mod golang.mod.116


golang mod tidy -golang=1.17
cmp golang.mod golang.mod.117

golang mod tidy
cmp golang.mod golang.mod.117


# If we downgrade back to 1.15, we should re-resolve d to v0.2.0 instead
# of the original v0.1.0 (because the original requirement is lost).

golang mod tidy -golang=1.15
cmp golang.mod golang.mod.115-2


# -golang= (with an empty argument) maintains the existing version or adds the
#  default version (just like omitting the flag).

golang mod tidy -golang=''
cmp golang.mod golang.mod.115-2

cp golang.mod.orig golang.mod
golang mod tidy -golang=''
cmpenv golang.mod golang.mod.latest

# Repeat with golang get golang@ instead of mod tidy.

# Go 1.16 -> 1.17 should be a no-op.
cp golang.mod.116 golang.mod
golang get golang@1.16
cmp golang.mod golang.mod.116

# Go 1.17 -> 1.16 should leave b (golang get is not tidy).
cp golang.mod.117 golang.mod
golang get golang@1.16
cmp golang.mod golang.mod.116from117

# Go 1.15 -> 1.16 should leave d (golang get is not tidy).
cp golang.mod.115 golang.mod
golang get golang@1.16
cmp golang.mod golang.mod.116from115

# Go 1.16 -> 1.17 should add b.
cp golang.mod.116 golang.mod
golang get golang@1.17
stderr '^\tnote: expanded dependencies to upgrade to golang 1.17 or higher; run ''golang mod tidy'' to clean up'
cmp golang.mod golang.mod.117

# Go 1.16 -> 1.15 should add d,
# but 'golang get' doesn't load enough packages to know that.
# (This leaves the module untidy, but the user can fix it by running 'golang mod tidy'.)
cp golang.mod.116 golang.mod
golang get golang@1.15 toolchain@none
cmp golang.mod golang.mod.115from116
golang mod tidy
cmp golang.mod golang.mod.115-2

# Updating the golang line to 1.21 or higher also updates the toolchain line,
# only if the toolchain is higher than what would be implied by the golang line.

cp golang.mod.117 golang.mod
golang mod tidy -golang=$golangversion
cmpenv golang.mod golang.mod.latest

cp golang.mod.117 golang.mod
golang mod tidy -golang=1.21.0  # lower than $golangversion
cmp golang.mod golang.mod.121toolchain


-- golang.mod --
module example.com/m

require example.net/a v0.1.0

require (
	example.net/c v0.1.0 // indirect
	example.net/d v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- m.golang --
package m

import _ "example.net/a"

-- golang.mod.115 --
module example.com/m

golang 1.15

require example.net/a v0.1.0

require (
	example.net/c v0.1.0 // indirect
	example.net/d v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- golang.mod.115from116 --
module example.com/m

golang 1.15

require example.net/a v0.1.0

require example.net/c v0.1.0 // indirect

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- golang.mod.116from115 --
module example.com/m

golang 1.16

require example.net/a v0.1.0

require (
	example.net/c v0.1.0 // indirect
	example.net/d v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- golang.mod.115-2 --
module example.com/m

golang 1.15

require example.net/a v0.1.0

require (
	example.net/c v0.1.0 // indirect
	example.net/d v0.2.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- golang.mod.116 --
module example.com/m

golang 1.16

require example.net/a v0.1.0

require example.net/c v0.1.0 // indirect

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- golang.mod.117 --
module example.com/m

golang 1.17

require example.net/a v0.1.0

require (
	example.net/b v0.1.0 // indirect
	example.net/c v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- golang.mod.116from117 --
module example.com/m

golang 1.16

require example.net/a v0.1.0

require (
	example.net/b v0.1.0 // indirect
	example.net/c v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- golang.mod.latest --
module example.com/m

golang $golangversion

require example.net/a v0.1.0

require (
	example.net/b v0.1.0 // indirect
	example.net/c v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- golang.mod.121toolchain --
module example.com/m

golang 1.21.0

require example.net/a v0.1.0

require (
	example.net/b v0.1.0 // indirect
	example.net/c v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a
	example.net/a v0.2.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.2.0 => ./b
	example.net/c v0.1.0 => ./c
	example.net/c v0.2.0 => ./c
	example.net/d v0.1.0 => ./d
	example.net/d v0.2.0 => ./d
)
-- a/golang.mod --
module example.net/a

golang 1.15

require example.net/b v0.1.0
-- a/a.golang --
package a

import _ "example.net/b"

-- b/golang.mod --
module example.net/b

golang 1.15
-- b/b.golang --
package b
-- b/b_test.golang --
package b_test

import _ "example.net/c"

-- c/golang.mod --
module example.net/c

golang 1.15
-- c/c.golang --
package c
-- c/c_test.golang --
package c_test

import _ "example.net/d"

-- d/golang.mod --
module example.net/d

golang 1.15
-- d/d.golang --
package d
