# Test listing with overlays

# Overlay in an existing directory
golang list -overlay overlay.json  -f '{{.GolangFiles}}' .
stdout '^\[f.golang\]$'

# Overlays in a non-existing directory
golang list -overlay overlay.json -f '{{.GolangFiles}}' ./dir
stdout '^\[g.golang\]$'

# Overlays in an existing directory with already existing files
golang list -overlay overlay.json -f '{{.GolangFiles}}' ./dir2
stdout '^\[h.golang i.golang\]$'

# Overlay that removes a file from a directory
! golang list ./dir3 # contains a file without a package statement
golang list -overlay overlay.json -f '{{.GolangFiles}}' ./dir3 # overlay removes that file

# Walking through an overlay
golang list -overlay overlay.json ./...
cmp stdout want-list.txt

# TODO(#39958): assembly files, C files, files that require cgolang preprocessing

-- want-list.txt --
m
m/dir
m/dir2
m/dir3
-- golang.mod --
// TODO(#39958): Support and test overlays including golang.mod itself (especially if mod=readonly)
module m

golang 1.16

-- dir2/h.golang --
package dir2

-- dir3/golangod.golang --
package dir3
-- dir3/bad.golang --
// no package statement
-- overlay.json --
{
    "Replace": {
        "f.golang": "overlay/f_golang",
        "dir/g.golang": "overlay/dir_g_golang",
        "dir2/i.golang": "overlay/dir2_i_golang",
        "dir3/bad.golang": ""
    }
}
-- overlay/f_golang --
package m

func f() {
}
-- overlay/dir_g_golang --
package m

func g() {
}
-- overlay/dir2_i_golang --
package dir2
