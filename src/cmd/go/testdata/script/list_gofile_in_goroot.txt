# Return an error if the user tries to list a golang source file directly in $GOROOT/src.
# Tests golanglang.org/issue/36587

env GOROOT=$WORK/golangroot
env GOPATH=$WORK/golangpath

golang env GOROOT
stdout $WORK[/\\]golangroot

# switch to GOROOT/src
cd $GOROOT/src

# In module mode, 'golang list ./...' should not treat .golang files in GOROOT/src as an
# importable package, since that directory has no valid import path.
env GO111MODULE=on
golang list ...
stdout -count=1 '^.+$'
stdout '^fmt$'
! stdout foo

golang list ./...
stdout -count=1 '^.+$'
stdout '^fmt$'
! stdout foo

golang list std
stdout -count=1 '^.+$'
stdout '^fmt$'

! golang list .
stderr '^GOROOT/src is not an importable package$'

# In GOPATH mode, 'golang list ./...' should synthesize a legacy GOPATH-mode path —
# not a standard-library or empty path — for the errant package.
env GO111MODULE=off
golang list ./...
stdout -count=2 '^.+$' # Both 'fmt' and GOROOT/src should be listed.
stdout '^fmt$'
[!GOOS:windows] stdout ^_$WORK/golangroot/src$
[GOOS:windows] stdout golangroot/src$ # On windows the ":" in the volume name is mangled

golang list ...
! stdout golangroot/src

golang list std
! stdout golangroot/src

golang list .
[!GOOS:windows] stdout ^_$WORK/golangroot/src$
[GOOS:windows] stdout golangroot/src$

# switch to GOPATH/src
cd $GOPATH/src

# GO111MODULE=off,GOPATH
env GO111MODULE=off
golang list ./...
[!GOOS:windows] stdout ^_$WORK/golangpath/src$
[GOOS:windows] stdout golangpath/src$

golang list all
! stdout golangpath/src

-- $WORK/golangroot/src/golang.mod --
module std

golang 1.14
-- $WORK/golangroot/src/foo.golang --
package foo
-- $WORK/golangroot/src/fmt/fmt.golang --
package fmt
-- $WORK/golangroot/src/cmd/README --
This directory must exist in order for the 'cmd' pattern to have something to
match against.
-- $GOPATH/src/foo.golang --
package foo
