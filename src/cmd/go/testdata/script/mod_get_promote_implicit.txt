cp golang.mod.orig golang.mod

# If we list a package in an implicit dependency imported from the main module,
# we should get an error because the dependency should have an explicit
# requirement.
golang list -m indirect-with-pkg
stdout '^indirect-with-pkg v1.0.0 => ./indirect-with-pkg$'
! golang list ./use-indirect
stderr '^package m/use-indirect imports indirect-with-pkg from implicitly required module; to add missing requirements, run:\n\tgolang get indirect-with-pkg@v1.0.0$'

# We can promote the implicit requirement by getting the importing package.
# NOTE: the hint recommends getting the imported package (tested below) since
# it's more obvious and doesn't require -d. However, that adds an '// indirect'
# comment on the requirement.
golang get m/use-indirect
cmp golang.mod golang.mod.use
cp golang.mod.orig golang.mod

# We can also promote implicit requirements using 'golang get' on them, or their
# packages. This gives us "// indirect" requirements, since 'golang get' doesn't
# know they're needed by the main module. See #43131 for the rationale.
# The hint above recommends this because it's more obvious usage and doesn't
# require the -d flag.
golang get indirect-with-pkg indirect-without-pkg
cmp golang.mod golang.mod.indirect

-- golang.mod.orig --
module m

golang 1.16

require direct v1.0.0

replace (
	direct v1.0.0 => ./direct
	indirect-with-pkg v1.0.0 => ./indirect-with-pkg
	indirect-without-pkg v1.0.0 => ./indirect-without-pkg
)
-- golang.mod.use --
module m

golang 1.16

require (
	direct v1.0.0
	indirect-with-pkg v1.0.0
)

replace (
	direct v1.0.0 => ./direct
	indirect-with-pkg v1.0.0 => ./indirect-with-pkg
	indirect-without-pkg v1.0.0 => ./indirect-without-pkg
)
-- golang.mod.indirect --
module m

golang 1.16

require (
	direct v1.0.0
	indirect-with-pkg v1.0.0 // indirect
	indirect-without-pkg v1.0.0 // indirect
)

replace (
	direct v1.0.0 => ./direct
	indirect-with-pkg v1.0.0 => ./indirect-with-pkg
	indirect-without-pkg v1.0.0 => ./indirect-without-pkg
)
-- use-indirect/use-indirect.golang --
package use

import _ "indirect-with-pkg"
-- direct/golang.mod --
module direct

golang 1.16

require (
	indirect-with-pkg v1.0.0
	indirect-without-pkg v1.0.0
)
-- indirect-with-pkg/golang.mod --
module indirect-with-pkg

golang 1.16
-- indirect-with-pkg/p.golang --
package p
-- indirect-without-pkg/golang.mod --
module indirect-without-pkg

golang 1.16
