# Check that 'golang get -u' will upgrade a dependency (direct or indirect)
# when the main module and the dependency are both lazy.
# Verifies #47768.

# Check that golang.mod is tidy, and an upgrade is available.
cp golang.mod golang.mod.orig
golang mod tidy
cmp golang.mod golang.mod.orig

golang list -m -u example.com/lazyupgrade
stdout '^example.com/lazyupgrade v0.1.0 \[v0.1.1\] => ./lazyupgrade@v0.1.0$'

# 'golang get -u' on a package that directly imports the dependency should upgrade.
golang get -u ./usedirect
golang list -m example.com/lazyupgrade
stdout '^example.com/lazyupgrade v0.1.1 => ./lazyupgrade@v0.1.1$'
cp golang.mod.orig golang.mod

# 'golang get -u' on a package that indirectly imports the dependency should upgrade.
golang get -u ./useindirect
golang list -m example.com/lazyupgrade
stdout '^example.com/lazyupgrade v0.1.1 => ./lazyupgrade@v0.1.1$'

-- golang.mod --
module use

golang 1.17

require (
	direct v0.0.0
	example.com/lazyupgrade v0.1.0
)

replace (
	direct => ./direct
	example.com/lazyupgrade v0.1.0 => ./lazyupgrade@v0.1.0
	example.com/lazyupgrade v0.1.1 => ./lazyupgrade@v0.1.1
)
-- usedirect/usedirect.golang --
package use

import _ "example.com/lazyupgrade"
-- useindirect/useindirect.golang --
package use

import _ "direct"
-- direct/golang.mod --
module direct

golang 1.17

require example.com/lazyupgrade v0.1.0
-- direct/direct.golang --
package direct

import _ "example.com/lazyupgrade"
-- lazyupgrade@v0.1.0/golang.mod --
module example.com/lazyupgrade

golang 1.17
-- lazyupgrade@v0.1.0/lazyupgrade.golang --
package lazyupgrade
-- lazyupgrade@v0.1.1/golang.mod --
module example.com/lazyupgrade

golang 1.17
-- lazyupgrade@v0.1.1/lazyupgrade.golang --
package lazyupgrade
