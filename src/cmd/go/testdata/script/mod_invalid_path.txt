# Test that mod files with invalid or missing paths produce an error.

# Test that golang list fails on a golang.mod with no module declaration.
cd $WORK/golangpath/src/mod
! golang list .
stderr '^golang: error reading golang.mod: missing module declaration. To specify the module path:\n\tgolang mod edit -module=example.com/mod$'

# Test that golang mod init in GOPATH doesn't add a module declaration
# with a path that can't possibly be a module path, because
# it isn't even a valid import path.
# The single quote and backtick are the only characters which are not allowed
# but are a valid Windows file name.
cd $WORK/'golangpath/src/m''d'
! golang mod init
stderr 'cannot determine module path'

# Test that a golang.mod file is rejected when its module declaration has a path that can't
# possibly be a module path, because it isn't even a valid import path
cd $WORK/golangpath/src/badname
! golang list .
stderr 'malformed module path'

# Test that an import path containing an element with a leading dot is valid,
# but such a module path is not.
# Verifies #43985.
cd $WORK/golangpath/src/dotname
golang list ./.dot
stdout '^example.com/dotname/.dot$'
golang list ./use
stdout '^example.com/dotname/use$'
! golang list -m example.com/dotname/.dot@latest
stderr '^golang: example.com/dotname/.dot@latest: malformed module path "example.com/dotname/.dot": leading dot in path element$'
golang get example.com/dotname/.dot
golang get example.com/dotname/use
golang mod tidy

-- mod/golang.mod --

-- mod/foo.golang --
package foo

-- m'd/foo.golang --
package mad

-- badname/golang.mod --

module .\.

-- badname/foo.golang --
package badname

-- dotname/golang.mod --
module example.com/dotname

golang 1.16
-- dotname/.dot/dot.golang --
package dot
-- dotname/use/use.golang --
package use

import _ "example.com/dotname/.dot"
