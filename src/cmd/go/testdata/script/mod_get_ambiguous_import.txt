golang list -m all
stdout '^example.net/m v0.1.0 '
! stdout '^example.net/m/p '
cp golang.mod golang.mod.orig

# Upgrading example.net/m/p without also upgrading example.net/m
# causes the import of package example.net/m/p to be ambiguous.
#
# TODO(#27899): Should we automatically upgrade example.net/m to v0.2.0
# to resolve the conflict?
! golang get example.net/m/p@v1.0.0
stderr '^golang: example.net/m/p: ambiguous import: found package example.net/m/p in multiple modules:\n\texample.net/m v0.1.0 \(.*[/\\]m1[/\\]p\)\n\texample.net/m/p v1.0.0 \(.*[/\\]p0\)\n\z'
cmp golang.mod golang.mod.orig

# Upgrading both modules simultaneously resolves the ambiguous upgrade.
# Note that this command line mixes a module path (example.net/m)
# and a package path (example.net/m/p) in the same command.
golang get example.net/m@v0.2.0 example.net/m/p@v1.0.0

golang list -m all
stdout '^example.net/m v0.2.0 '
stdout '^example.net/m/p v1.0.0 '

-- golang.mod --
module example.net/importer

golang 1.16

require (
	example.net/m v0.1.0
)

replace (
	example.net/m v0.1.0 => ./m1
	example.net/m v0.2.0 => ./m2
	example.net/m/p v1.0.0 => ./p0
)
-- importer.golang --
package importer
import _ "example.net/m/p"
-- m1/golang.mod --
module example.net/m

golang 1.16
-- m1/p/p.golang --
package p
-- m2/golang.mod --
module example.net/m

golang 1.16
-- m2/README.txt --
Package p has been moved to module …/m/p.
Module …/m/p does not require any version of module …/m.

-- p0/golang.mod --
module example.net/m/p

golang 1.16
-- p0/p.golang --
package p
