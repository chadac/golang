[!fuzz-instrumented] skip

[short] skip
env GOCACHE=$WORK/cache

# Fuzz cache should not exist after a regular test run.
golang test .
exists $GOCACHE
! exists $GOCACHE/fuzz

# Fuzzing should write interesting values to the cache.
golang test -fuzz=FuzzY -fuzztime=100x .
golang run ./contains_files $GOCACHE/fuzz/example.com/y/FuzzY

# 'golang clean -cache' should not delete the fuzz cache.
golang clean -cache
exists $GOCACHE/fuzz

# 'golang clean -fuzzcache' should delete the fuzz cache but not the build cache.
golang build -x ./empty
stderr '(compile|gccgolang)( |\.exe).*empty.golang'
golang clean -fuzzcache
! exists $GOCACHE/fuzz
golang build -x ./empty
! stderr '(compile|gccgolang)( |\.exe).*empty.golang'

# Fuzzing indicates that one new interesting value was found with an empty
# corpus, and the total size of the cache is now 1.
golang clean -fuzzcache
golang test -fuzz=FuzzEmpty -fuzztime=10000x .
stdout 'new interesting: 1'
stdout 'total: 1'

# Fuzzing again with a small fuzztime does not find any other interesting
# values but still indicates that the cache size is 1.
golang test -fuzz=FuzzEmpty -fuzztime=2x .
stdout 'new interesting: 0'
stdout 'total: 1'

! golang clean -fuzzcache example.com/y
stderr 'golang: clean -fuzzcache cannot be used with package arguments'

-- golang.mod --
module example.com/y

golang 1.16
-- y_test.golang --
package y

import (
	"io"
	"testing"
)

func FuzzEmpty(f *testing.F) {
    f.Fuzz(func (*testing.T, []byte) {})
}

func FuzzY(f *testing.F) {
	f.Add([]byte("y"))
	f.Fuzz(func(t *testing.T, b []byte) { Y(io.Discard, b) })
}
-- y.golang --
package y

import (
	"bytes"
	"io"
)

func Y(w io.Writer, b []byte) {
	if !bytes.Equal(b, []byte("y")) {
		w.Write([]byte("not equal"))
	}
}
-- empty/empty.golang --
package empty
-- contains_files/contains_files.golang --
package main

import (
	"fmt"
	"path/filepath"
	"io/ioutil"
	"os"
)

func main() {
	infos, err := ioutil.ReadDir(filepath.Clean(os.Args[1]))
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	if len(infos) == 0 {
		os.Exit(1)
	}
}
