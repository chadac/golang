# This file demonstrates the effect of lazy loading on the reproducibility of
# tests (and tests of test dependencies) outside the main module.
#
# It is similar to the cases in mod_all.txt and mod_lazy_test_horizon.txt, but
# focuses on the effect of "golang test" on specific packages instead of the "all"
# pattern.

# The package import graph used in this test looks like:
#
# lazy ---- a
#           |
#           a_test ---- b
#                       |
#                       b_test ---- c
#
# And the non-lazy module dependency graph looks like:
#
# lazy ---- a.1 ---- b.1 ---- c.1

cp golang.mod golang.mod.old
golang mod tidy
cmp golang.mod golang.mod.old


# In Golang 1.15 mode, 'golang list -m all' includes modules needed by the
# transitive closure of tests of dependencies of tests of dependencies of ….

golang list -m all
stdout '^example.com/b v0.1.0 '
stdout '^example.com/c v0.1.0 '
cmp golang.mod golang.mod.old

# 'golang test' (or equivalent) of any such dependency, no matter how remote, does
# not update the golang.mod file.

golang list -test -deps example.com/a
stdout example.com/b
! stdout example.com/c

[!short] golang test -c -o $devnull example.com/a
[!short] cmp golang.mod golang.mod.old

golang list -test -deps example.com/b
stdout example.com/c

[!short] golang test -c -o $devnull example.com/b
[!short] cmp golang.mod golang.mod.old

golang mod edit -golang=1.17 a/golang.mod
golang mod edit -golang=1.17 b1/golang.mod
golang mod edit -golang=1.17 b2/golang.mod
golang mod edit -golang=1.17 c1/golang.mod
golang mod edit -golang=1.17 c2/golang.mod
golang mod edit -golang=1.17


# After changing to 'golang 1.17` uniformly, 'golang list -m all' should prune out
# example.com/c, because it is not imported by any package (or test of a package)
# transitively imported by the main module.
#
# example.com/a is imported,
# and example.com/b is needed in order to run 'golang test example.com/a',
# but example.com/c is not needed because we don't expect the user to need to run
# 'golang test example.com/b'.

# If we skip directly to adding a new import of c, the dependency is too far
# away for a deepening scan to find, which is fine because the package whose
# test imported it wasn't even it "all". It should resolve from the latest
# version of its module.

# However, if we reach c by running successive tests starting from the main
# module, we should end up with exactly the version required by b, with an update
# to the golang.mod file as soon as we test a test dependency that is not itself in
# "all".

cp golang.mod golang.mod.117
golang mod tidy
cmp golang.mod golang.mod.117

golang list -m all
stdout '^example.com/b v0.1.0 '
! stdout '^example.com/c '

# 'golang test' of a package (transitively) imported by the main module
# should work without changes to the golang.mod file.

golang list -test -deps example.com/a
stdout example.com/b
! stdout example.com/c

[!short] golang test -c -o $devnull example.com/a

# However, 'golang test' of a package that is itself a dependency should require an
# update to the golang.mod file.
! golang list -test -deps example.com/b

	# TODO(#36460): The hint here is wrong. We should suggest
	# 'golang get -t example.com/b@v0.1.0' instead of 'golang mod tidy'.
stderr '^golang: updates to golang\.mod needed; to update it:\n\tgolang mod tidy$'

[!short] ! golang test -c -o $devnull example.com/b
[!short] stderr '^golang: updates to golang\.mod needed; to update it:\n\tgolang mod tidy$'

golang get -t example.com/b@v0.1.0
golang list -test -deps example.com/b
stdout example.com/c

[!short] golang test -c -o $devnull example.com/b

# The update should bring the version required by b, not the latest version of c.

golang list -m example.com/c
stdout '^example.com/c v0.1.0 '

cmp golang.mod golang.mod.b


# We should reach the same state if we arrive at it via `golang test -mod=mod`.

cp golang.mod.117 golang.mod

[short] golang list -mod=mod -test -deps example.com/a
[!short] golang test -mod=mod -c -o $devnull example.com/a

[short] golang list -mod=mod -test -deps example.com/b
[!short] golang test -mod=mod -c -o $devnull example.com/b

cmp golang.mod golang.mod.b



-- golang.mod --
module example.com/lazy

golang 1.15

require example.com/a v0.1.0

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b1
	example.com/b v0.2.0 => ./b2
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
)
-- golang.mod.b --
module example.com/lazy

golang 1.17

require example.com/a v0.1.0

require example.com/b v0.1.0 // indirect

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b1
	example.com/b v0.2.0 => ./b2
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
)
-- lazy.golang --
package lazy

import (
	_ "example.com/a"
)
-- a/golang.mod --
module example.com/a

golang 1.15

require example.com/b v0.1.0
-- a/a.golang --
package a
-- a/a_test.golang --
package a

import (
	"testing"

	_ "example.com/b"
)

func TestUsingB(t *testing.T) {
	// …
}
-- b1/golang.mod --
module example.com/b

golang 1.15

require example.com/c v0.1.0
-- b1/b.golang --
package b
-- b1/b_test.golang --
package b

import _ "example.com/c"
-- b2/golang.mod --
module example.com/b

golang 1.15

require example.com/c v0.1.0
-- b2/b.golang --
package b
This file should not be used, so this syntax error should be ignored.
-- b2/b_test.golang --
package b
This file should not be used, so this syntax error should be ignored.
-- c1/golang.mod --
module example.com/c

golang 1.15
-- c1/c.golang --
package c
-- c2/golang.mod --
module example.com/c

golang 1.15
-- c2/c.golang --
package c
This file should not be used, so this syntax error should be ignored.
