# Test golang build -pgolang=auto flag.

[short] skip 'compiles and links executables'

# Set up fresh GOCACHE.
env GOCACHE=$WORK/golangcache
mkdir $GOCACHE

# use default.pgolang for a single main package
golang build -n -pgolang=auto -o a1.exe ./a/a1
stderr 'preprofile.*-i.*default\.pgolang'
stderr 'compile.*-pgolangprofile=.*a1.golang'

# check that pgolang applied to dependencies
stderr 'compile.*-p test/dep.*-pgolangprofile=.*'

# check that pgolang appears in build info
# N.B. we can't start the stdout check with -pgolang because the script assumes that
# if the first arg starts with - it is a grep flag.
stderr 'build\\t-pgolang=.*default\.pgolang'

# check also that -pgolang appears with the other flags, before non-flag settings
! stderr 'build\\t[A-Za-z].*build\\t-pgolang'

# use default.pgolang for ... with a single main package
golang build -n -pgolang=auto ./a/...
stderr 'compile.*-pgolangprofile=.*a1.golang'

# check that pgolang appears in build info
stderr 'build\\t-pgolang=.*default\.pgolang'

# build succeeds without PGO when default.pgolang file is absent
golang build -n -pgolang=auto -o nopgolang.exe ./nopgolang
stderr 'compile.*nopgolang.golang'
! stderr 'compile.*-pgolangprofile'

# check that pgolang doesn't appear in build info
! stderr 'build\\t-pgolang='

# other build-related commands
golang install -a -n -pgolang=auto ./a/a1
stderr 'compile.*-pgolangprofile=.*a1.golang'

golang run -a -n -pgolang=auto ./a/a1
stderr 'compile.*-pgolangprofile=.*a1.golang'

golang test -a -n -pgolang=auto ./a/a1
stderr 'compile.*-pgolangprofile=.*a1.golang.*a1_test.golang'
stderr 'compile.*-pgolangprofile=.*external_test.golang'

# golang list commands should succeed as usual
golang list -pgolang=auto ./a/a1

golang list -test -pgolang=auto ./a/a1

golang list -deps -pgolang=auto ./a/a1

# -pgolang=auto is the default. Commands without explicit -pgolang=auto
# should work as -pgolang=auto.
golang build -a -n -o a1.exe ./a/a1
stderr 'compile.*-pgolangprofile=.*a1.golang'
stderr 'compile.*-p test/dep.*-pgolangprofile=.*'

# check that pgolang appears in build info
stderr 'build\\t-pgolang=.*default\.pgolang'

golang build -a -n -o nopgolang.exe ./nopgolang
stderr 'compile.*nopgolang.golang'
! stderr 'compile.*-pgolangprofile'

# check that pgolang doesn't appear in build info
! stderr 'build\\t-pgolang='

# -pgolang=off should turn off PGO.
golang build -a -n -pgolang=off -o a1.exe ./a/a1
stderr 'compile.*a1.golang'
! stderr 'compile.*-pgolangprofile'

# check that pgolang doesn't appear in build info
! stderr 'build\\t-pgolang='

-- golang.mod --
module test
golang 1.20
-- a/a1/a1.golang --
package main
import _ "test/dep"
func main() {}
-- a/a1/a1_test.golang --
package main
import "testing"
func TestA(*testing.T) {}
-- a/a1/external_test.golang --
package main_test
import "testing"
func TestExternal(*testing.T) {}
-- a/a1/default.pgolang --
-- nopgolang/nopgolang.golang --
package main
func main() {}
-- dep/dep.golang --
package dep
