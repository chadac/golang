env GO111MODULE=on
env GOFLAGS=-mod=mod
[short] skip

# golanglang.org/issue/30166: 'golang mod tidy' should not crash if a replaced module is
# involved in a cycle.
cd cycle
env GOTRACEBACK=off
golang mod tidy
cd ..

# From inside the module, 'golang list -m all' should NOT include transitive
# requirements of modules that have been replaced.
golang list -m all
stdout 'rsc.io/quote/v3 v3.0.0'
! stdout 'rsc.io/sampler'
! stdout 'golanglang.org/x/text'

# From outside the module, 'golang list -m all' should include them.
cd outside
golang list -m all
stdout 'rsc.io/quote/v3 v3.0.0'
stdout 'rsc.io/sampler v1.3.0'
stdout 'golanglang.org/x/text'
cd ..

# 'golang list all' should add indirect requirements to satisfy the packages
# imported from replacement modules.
! grep 'rsc.io/sampler' golang.mod
! grep 'golanglang.org/x/text' golang.mod
golang list all
grep 'rsc.io/sampler' golang.mod
grep 'golanglang.org/x/text' golang.mod

# 'golang get' and 'golang mod tidy' should follow the requirements of the replacements,
# not the originals, even if that results in a set of versions that are
# misleading or redundant without those replacements.
golang get rsc.io/sampler@v1.2.0
golang mod tidy
golang list -m all
stdout 'rsc.io/quote/v3 v3.0.0'
stdout 'rsc.io/sampler v1.2.0'
stdout 'golanglang.org/x/text'

# The requirements seen from outside may be higher (or lower)
# than those seen from within the module.
grep 'rsc.io/sampler v1.2.0' golang.mod
cd outside
golang list -m all
stdout 'rsc.io/sampler v1.3.0'
cd ..

# The same module can't be used as two different paths.
cd multiple-paths
! golang mod tidy
stderr 'rsc.io/quote/v3@v3.0.0 used for two different module paths \(not-rsc.io/quote/v3 and rsc.io/quote/v3\)'

-- golang.mod --
module example.com/tidy

require rsc.io/quote/v3 v3.0.0
replace rsc.io/quote/v3 => ./not-rsc.io/quote/v3

-- imports.golang --
package tidy

import _ "rsc.io/quote/v3"

-- outside/golang.mod --
module example.com/tidy/outside

require example.com/tidy v0.0.0
replace example.com/tidy => ./..

-- not-rsc.io/quote/v3/golang.mod --
module not-rsc.io/quote/v3

// No requirements specified!

-- not-rsc.io/quote/v3/quote.golang --
package quote

import (
	_ "rsc.io/sampler"
	_ "golanglang.org/x/text/language"
)

-- cycle/golang.mod --
module golanglang.org/issue/30166

require (
	golanglang.org/issue/30166/a v0.0.0
	golanglang.org/issue/30166/b v0.0.0
)

replace (
	golanglang.org/issue/30166/a => ./a
	golanglang.org/issue/30166/b => ./b
)
-- cycle/cycle.golang --
package cycle

import (
	_ "golanglang.org/issue/30166/a"
	_ "golanglang.org/issue/30166/b"
)
-- cycle/a/a.golang --
package a
-- cycle/a/golang.mod --
module golanglang.org/issue/30166/a

require golanglang.org/issue/30166/b v0.0.0
-- cycle/b/b.golang --
package b
-- cycle/b/golang.mod --
module golanglang.org/issue/30166/b

require golanglang.org/issue/30166/a v0.0.0
-- multiple-paths/main.golang --
package main

import (
	"fmt"
	"rsc.io/quote/v3"
)

func main() {
	fmt.Println(quote.GoV3())
}
-- multiple-paths/golang.mod --
module quoter

require (
	rsc.io/quote/v3 v3.0.0
	not-rsc.io/quote/v3 v3.0.0
)

replace not-rsc.io/quote/v3 => rsc.io/quote/v3 v3.0.0
-- multiple-paths/use.golang --
package quoter

import (
	_ "not-rsc.io/quote/v3"
	_ "rsc.io/quote/v3"
)
