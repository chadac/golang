[short] skip 'links and runs binaries'

# This test requires external linking. Assume that if cgolang is supported
# then external linking works.
[!cgolang] skip 'requires a C linker'

# Only run on Unix systems.
[GOOS:windows] skip
[GOOS:plan9] skip

# Ordinary build should work.
golang build
exec ./hello
stdout Hello

# Building with -linkmode=external should not say anything about
# runtime/cgolang (issue #31544).
golang build -ldflags=-linkmode=external
! stderr runtime/cgolang
exec ./hello
stdout Hello

# Some targets don't support -static
[GOOS:darwin] skip 'no static linking on Darwin'
[GOOS:solaris] skip 'no static linking on Solaris'

# Building with -linkmode=external -extldflags=-static should work.
golang build -ldflags='-linkmode=external -extldflags=-static'
! stderr runtime/cgolang
exec ./hello
stdout Hello

-- golang.mod --
module hello

golang 1.20
-- hello.golang --
package main

import "fmt"

func main() {
	fmt.Println("Hello, world")
}
