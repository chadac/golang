# Test using -json flag to specify specific fields.

# Test -json produces "full" output by looking for multiple fields present.
golang list -json .
stdout '"Name": "a"'
stdout '"Stale": true'
# Same thing for -json=true
golang list -json=true .
stdout '"Name": "a"'
stdout '"Stale": true'

# Test -json=false produces non-json output.
golang list -json=false
cmp stdout want-non-json.txt

# Test -json=<field> keeps only that field.
golang list -json=Name
cmp stdout want-json-name.txt

# Test -json=<field> with multiple fields.
golang list -json=ImportPath,Name,GolangFiles,Imports
cmp stdout want-json-multiple.txt

# Test -json=<field> with Deps outputs the Deps field.
golang list -json=Deps
stdout '"Deps": \['
stdout '"errors",'

# Test -json=<field> with *EmbedPatterns outputs embed patterns.
cd embed
golang list -json=EmbedPatterns,TestEmbedPatterns,XTestEmbedPatterns
stdout '"EmbedPatterns": \['
stdout '"TestEmbedPatterns": \['
stdout '"XTestEmbedPatterns": \['
# Test -json=<field> with *EmbedFiles fails due to broken file reference.
! golang list -json=EmbedFiles
stderr 'no matching files found'
! golang list -json=TestEmbedFiles
stderr 'no matching files found'
! golang list -json=XTestEmbedFiles
stderr 'no matching files found'
cd ..

[!git] skip

# Test -json=<field> without Stale skips computing buildinfo
cd repo
exec git init
# Control case: with -json=Stale cmd/golang executes git status to compute buildinfo
golang list -json=Stale -x
stderr 'git status'
# Test case: without -json=Stale cmd/golang skips git status
golang list -json=Name -x
! stderr 'git status'

-- golang.mod --
module example.com/a

golang 1.18
-- a.golang --
package a

import "fmt"

func F() {
    fmt.Println("hey there")
}
-- want-non-json.txt --
example.com/a
-- want-json-name.txt --
{
	"Name": "a"
}
-- want-json-multiple.txt --
{
	"ImportPath": "example.com/a",
	"Name": "a",
	"GolangFiles": [
		"a.golang"
	],
	"Imports": [
		"fmt"
	]
}
-- repo/golang.mod --
module example.com/repo
-- repo/main.golang --
package main

func main() {}
-- embed/golang.mod --
module example.com/embed
-- embed/embed.golang --
package embed

import _ "embed"

//golang:embed non-existing-file.txt
var s string
-- embed/embed_test.golang --
package embed

import _ "embed"

//golang:embed non-existing-file.txt
var s string
-- embed/embed_xtest_test.golang --
package embed_test

import _ "embed"

//golang:embed non-existing-file.txt
var s string
