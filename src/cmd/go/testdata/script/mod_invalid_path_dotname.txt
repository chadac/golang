# Test that an import path containing an element with a leading dot
# in another module is valid.

# 'golang get' works with no version query.
cp golang.mod.empty golang.mod
golang get example.com/dotname/.dot
golang list -m example.com/dotname
stdout '^example.com/dotname v1.0.0$'

# 'golang get' works with a version query.
cp golang.mod.empty golang.mod
golang get example.com/dotname/.dot@latest
golang list -m example.com/dotname
stdout '^example.com/dotname v1.0.0$'

# 'golang get' works on an importing package.
cp golang.mod.empty golang.mod
golang get .
golang list -m example.com/dotname
stdout '^example.com/dotname v1.0.0$'

# 'golang list' works on the dotted package.
golang list example.com/dotname/.dot
stdout '^example.com/dotname/.dot$'

# 'golang list' works on an importing package.
golang list .
stdout '^m$'

# 'golang mod tidy' works.
cp golang.mod.empty golang.mod
golang mod tidy
golang list -m example.com/dotname
stdout '^example.com/dotname v1.0.0$'

-- golang.mod.empty --
module m

golang 1.16
-- golang.sum --
example.com/dotname v1.0.0 h1:Q0JMAn464CnwFVCshs1n4+f5EFiW/eRhnx/fTWjw2Ag=
example.com/dotname v1.0.0/golang.mod h1:7K4VLT7QylRI8H7yZwUkeDH2s19wQnyfp/3oBlItWJ0=
-- use.golang --
package use

import _ "example.com/dotname/.dot"
