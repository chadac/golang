env GO111MODULE=off

# golang env should default to the right places
env AppData=$HOME/windowsappdata
env home=$HOME/plan9home
golang env GOENV
[GOOS:aix] stdout $HOME/.config/golang/env
[GOOS:darwin] stdout $HOME'/Library/Application Support/golang/env'
[GOOS:freebsd] stdout $HOME/.config/golang/env
[GOOS:linux] stdout $HOME/.config/golang/env
[GOOS:netbsd] stdout $HOME/.config/golang/env
[GOOS:openbsd] stdout $HOME/.config/golang/env
[GOOS:plan9] stdout $HOME/plan9home/lib/golang/env
[GOOS:windows] stdout $HOME\\windowsappdata\\golang\\env

# Now override it to something writable.
env GOENV=$WORK/envdir/golang/env
golang env GOENV
stdout envdir[\\/]golang[\\/]env

# golang env shows all variables
golang env
stdout GOARCH=
stdout GOOS=
stdout GOROOT=

# golang env ignores invalid flag in GOFLAGS environment variable
env GOFLAGS='=true'
golang env

# checking errors
! golang env -w
stderr 'golang: no KEY=VALUE arguments given'
! golang env -u
stderr 'golang: ''golang env -u'' requires an argument'

# golang env -w changes default setting
env root=
[GOOS:windows] env root=c:
env GOPATH=
golang env -w GOPATH=$root/non-exist/golangpath
! stderr .+
grep GOPATH=$root/non-exist/golangpath $WORK/envdir/golang/env
golang env GOPATH
stdout /non-exist/golangpath

# golang env -w does not override OS environment, and warns about that
env GOPATH=$root/other
golang env -w GOPATH=$root/non-exist/golangpath2
stderr 'warning: golang env -w GOPATH=... does not override conflicting OS environment variable'
golang env GOPATH
stdout $root/other

# but golang env -w does do the update, and unsetting the env var exposes the change
env GOPATH=
golang env GOPATH
stdout $root/non-exist/golangpath2

# unsetting with golang env -u does not warn about OS environment overrides,
# nor does it warn about variables that haven't been set by golang env -w.
env GOPATH=$root/other
golang env -u GOPATH
! stderr .+
golang env -u GOPATH
! stderr .+

# golang env -w rejects unknown or bad variables
! golang env -w GOGC=off
stderr 'unknown golang command variable GOGC'
! golang env -w GOEXE=.bat
stderr 'GOEXE cannot be modified'
! golang env -w GOVERSION=customversion
stderr 'GOVERSION cannot be modified'
! golang env -w GOENV=/env
stderr 'GOENV can only be set using the OS environment'
! golang env -w GODEBUG=gctrace=1
stderr 'GODEBUG can only be set using the OS environment'

# golang env -w can set multiple variables
env CC=
golang env CC
! stdout ^xyc$
golang env -w GOOS=$GOOS CC=xyc
grep CC=xyc $GOENV
# file is maintained in sorted order
grep 'CC=xyc\nGOOS=' $GOENV
golang env CC
stdout ^xyc$

# golang env -u unsets effect of golang env -w.
golang env -u CC
golang env CC
! stdout ^xyc$

# golang env -w rejects double-set variables
! golang env -w GOOS=$GOOS GOOS=$GOOS
stderr 'multiple values for key: GOOS'

# golang env -w rejects missing variables
! golang env -w GOOS
stderr 'arguments must be KEY=VALUE: invalid argument: GOOS'

# golang env -w rejects invalid GO111MODULE values, as otherwise cmd/golang would break
! golang env -w GO111MODULE=badvalue
stderr 'invalid GO111MODULE value "badvalue"'

# golang env -w rejects invalid GOPATH values
! golang env -w GOPATH=~/golang
stderr 'GOPATH entry cannot start with shell metacharacter'

! golang env -w GOPATH=./golang
stderr 'GOPATH entry is relative; must be absolute path'

# golang env -w rejects invalid GOTMPDIR values
! golang env -w GOTMPDIR=x
stderr 'golang: GOTMPDIR must be an absolute path'

# golang env -w should accept absolute GOTMPDIR value
# and should not create it
[GOOS:windows] golang env -w GOTMPDIR=$WORK\x\y\z
[!GOOS:windows] golang env -w GOTMPDIR=$WORK/x/y/z
! exists $WORK/x/y/z
# we should be able to clear an env
golang env -u GOTMPDIR
golang env GOTMPDIR
stdout ^$

[GOOS:windows] golang env -w GOTMPDIR=$WORK\x\y\z
[!GOOS:windows] golang env -w GOTMPDIR=$WORK/x/y/z
golang env -w GOTMPDIR=
golang env GOTMPDIR
stdout ^$

# golang env -w rejects relative CC values
[!GOOS:windows] golang env -w CC=/usr/bin/clang
golang env -w CC=clang
[!GOOS:windows] ! golang env -w CC=./clang
[!GOOS:windows] ! golang env -w CC=bin/clang
[!GOOS:windows] stderr 'golang: CC entry is relative; must be absolute path'

[GOOS:windows] golang env -w CC=$WORK\bin\clang
[GOOS:windows] ! golang env -w CC=.\clang
[GOOS:windows] ! golang env -w CC=bin\clang
[GOOS:windows] stderr 'golang: CC entry is relative; must be absolute path'

# golang env -w rejects relative CXX values
[!GOOS:windows] golang env -w CC=/usr/bin/cpp
golang env -w CXX=cpp
[!GOOS:windows] ! golang env -w CXX=./cpp
[!GOOS:windows] ! golang env -w CXX=bin/cpp
[!GOOS:windows] stderr 'golang: CXX entry is relative; must be absolute path'

[GOOS:windows] golang env -w CXX=$WORK\bin\cpp
[GOOS:windows] ! golang env -w CXX=.\cpp
[GOOS:windows] ! golang env -w CXX=bin\cpp
[GOOS:windows] stderr 'golang: CXX entry is relative; must be absolute path'

# golang env -w/-u checks validity of GOOS/ARCH combinations
env GOOS=
env GOARCH=
# check -w doesn't allow invalid GOOS
! golang env -w GOOS=linuxx
stderr 'unsupported GOOS/GOARCH pair linuxx'
# check -w doesn't allow invalid GOARCH
! golang env -w GOARCH=amd644
stderr 'unsupported GOOS/GOARCH.*/amd644$'
# check -w doesn't allow invalid GOOS with valid GOARCH
! golang env -w GOOS=linuxx GOARCH=amd64
stderr 'unsupported GOOS/GOARCH pair linuxx'
# check a valid GOOS and GOARCH values but an incompatible combinations
! golang env -w GOOS=android GOARCH=s390x
stderr 'unsupported GOOS/GOARCH pair android/s390x'
# check that -u considers explicit envs
golang env -w GOOS=linux GOARCH=mips
env GOOS=windows
! golang env -u GOOS
stderr 'unsupported GOOS/GOARCH.*windows/mips$'
env GOOS=

# golang env -w should reject relative paths in GOMODCACHE environment.
! golang env -w GOMODCACHE=~/test
stderr 'golang: GOMODCACHE entry is relative; must be absolute path: "~/test"'
! golang env -w GOMODCACHE=./test
stderr 'golang: GOMODCACHE entry is relative; must be absolute path: "./test"'

# golang env -w checks validity of GOEXPERIMENT
env GOEXPERIMENT=
! golang env -w GOEXPERIMENT=badexp
stderr 'unknown GOEXPERIMENT badexp'
golang env -w GOEXPERIMENT=fieldtrack

# golang env -w and golang env -u work on unknown fields already in the golang/env file
cp bad.env $GOENV
golang env GOENV
cat $GOENV
golang env
! stdout UNKNOWN
golang env UNKNOWN
stdout yes
golang env -w UNKNOWN=maybe
golang env UNKNOWN
stdout maybe
golang env -u UNKNOWN
golang env UNKNOWN
! stdout . # golangne

-- bad.env --
UNKNOWN=yes
