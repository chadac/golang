env GO111MODULE=on
[short] skip

# If a pattern doesn't match any packages provided by modules
# in the build list, we assume the pattern matches a single module
# whose path is a prefix of the part of the pattern before "...".
cp golang.mod.orig golang.mod
golang get rsc.io/quote/...
grep 'require rsc.io/quote' golang.mod

cp golang.mod.orig golang.mod
! golang get rsc.io/quote/x...
stderr 'golang: module rsc.io/quote@upgrade found \(v1.5.2\), but does not contain packages matching rsc.io/quote/x...'
! grep 'require rsc.io/quote' golang.mod

! golang get rsc.io/quote/x/...
stderr 'golang: module rsc.io/quote@upgrade found \(v1.5.2\), but does not contain packages matching rsc.io/quote/x/...'
! grep 'require rsc.io/quote' golang.mod

# If a pattern matches no packages within a module, the module should not
# be upgraded, even if the module path is a prefix of the pattern.
cp golang.mod.orig golang.mod
golang mod edit -require example.com/nest@v1.0.0
golang get example.com/nest/sub/y...
grep 'example.com/nest/sub v1.0.0' golang.mod
grep 'example.com/nest v1.0.0' golang.mod

# However, if the pattern matches the module path itself, the module
# should be upgraded even if it contains no matching packages.
golang get example.com/n...t
grep 'example.com/nest v1.1.0' golang.mod
grep 'example.com/nest/sub v1.0.0' golang.mod

-- golang.mod.orig --
module m

golang 1.13

-- use/use.golang --
package use

import _ "rsc.io/quote"
