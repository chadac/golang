# Build something to create the executable, including several cases
[short] skip

# --------------------- clean executables -------------------------

# case1: test file-named executable 'main'
env GO111MODULE=on

! exists main$GOEXE
golang build main.golang
exists -exec main$GOEXE
golang clean
! exists main$GOEXE

# case2: test module-named executable 'a.b.c'
! exists a.b.c$GOEXE
golang build
exists -exec a.b.c$GOEXE
golang clean
! exists a.b.c$GOEXE

# case3: directory-named executable 'src'
env GO111MODULE=off

! exists src$GOEXE
golang build
exists -exec src$GOEXE
golang clean
! exists src$GOEXE

# --------------------- clean test files -------------------------

# case1: test file-named test file
env GO111MODULE=on

! exists main.test$GOEXE
golang test -c main_test.golang
exists -exec main.test$GOEXE
golang clean
! exists main.test$GOEXE

# case2: test module-named test file
! exists a.b.c.test$GOEXE
golang test -c
exists -exec a.b.c.test$GOEXE
golang clean
! exists a.b.c.test$GOEXE

# case3: test directory-based test file
env GO111MODULE=off

! exists src.test$GOEXE
golang test -c
exists -exec src.test$GOEXE
golang clean
! exists src.test$GOEXE

-- main.golang --
package main

import "fmt"

func main() {
	fmt.Println("hello!")
}

-- main_test.golang --
package main

import "testing"

func TestSomething(t *testing.T) {
}

-- golang.mod --
module example.com/a.b.c/v2

golang 1.12