# Create basic modules and work space.
env TESTGO_VERSION=golang1.50
mkdir m1_22_0
golang mod init -C m1_22_0
golang mod edit -C m1_22_0 -golang=1.22.0 -toolchain=golang1.99.0
mkdir m1_22_1
golang mod init -C m1_22_1
golang mod edit -C m1_22_1 -golang=1.22.1 -toolchain=golang1.99.1
mkdir m1_24_rc0
golang mod init -C m1_24_rc0
golang mod edit -C m1_24_rc0 -golang=1.24rc0 -toolchain=golang1.99.2

golang work init
grep '^golang 1.50$' golang.work
! grep toolchain golang.work

# work use with older modules should leave golang 1.50 in the golang.work.
golang work use ./m1_22_0
grep '^golang 1.50$' golang.work
! grep toolchain golang.work

# work use with newer modules should bump golang and toolchain,
# including updating to a newer toolchain as needed.
env TESTGO_VERSION=golang1.21
env TESTGO_VERSION_SWITCH=switch
rm golang.work
golang work init
env GOTOOLCHAIN=local
! golang work use ./m1_22_0
stderr '^golang: m1_22_0'${/}'golang.mod requires golang >= 1.22.0 \(running golang 1.21; GOTOOLCHAIN=local\)$'
env GOTOOLCHAIN=auto
golang work use ./m1_22_0
stderr '^golang: m1_22_0'${/}'golang.mod requires golang >= 1.22.0; switching to golang1.22.9$'
grep '^golang 1.22.0$' golang.work
! grep toolchain golang.work

# work use with an even newer module should bump golang again.
golang work use ./m1_22_1
stderr '^golang: m1_22_1'${/}'golang.mod requires golang >= 1.22.1; switching to golang1.22.9$'
grep '^golang 1.22.1$' golang.work
! grep toolchain golang.work

# work use with an even newer module should bump golang and toolchain again.
env GOTOOLCHAIN=golang1.22.9
! golang work use ./m1_24_rc0
stderr '^golang: m1_24_rc0'${/}'golang.mod requires golang >= 1.24rc0 \(running golang 1.22.9; GOTOOLCHAIN=golang1.22.9\)$'
env GOTOOLCHAIN=auto
golang work use ./m1_24_rc0
stderr '^golang: m1_24_rc0'${/}'golang.mod requires golang >= 1.24rc0; switching to golang1.24rc1$'
grep '^golang 1.24rc0$' golang.work
! grep 'toolchain' golang.work
