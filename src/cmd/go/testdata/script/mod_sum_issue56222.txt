# Regression test for #56222: 'golang get -t' and 'golang mod tidy'
# should save enough checksums to run 'golang test' on the named
# packages or any package in "all" respectively.

# 'golang mod tidy' in a module at golang 1.21 or higher should preserve
# checksums needed to run 'golang test all'.
cd m1
golang mod tidy

golang list -f '{{if eq .ImportPath "example.com/generics"}}{{.Module.GoVersion}}{{end}}' -deps -test example.com/m2/q
stdout 1.18
[!short] golang test -o $devnull -c all

cat golang.sum
replace 'example.com/generics v1.0.0/golang.mod' 'example.com/notgenerics v1.0.0/golang.mod' golang.sum

! golang list -f '{{if eq .ImportPath "example.com/generics"}}{{.Module.GoVersion}}{{end}}' -deps -test example.com/m2/q
stderr '^golang: can''t load test package: \.\.'${/}m2${/}q${/}'q_test.golang:3:8: example\.com/generics@v1\.0\.0: missing golang.sum entry for golang.mod file; to add it:\n\tgolang mod download example\.com/generics$'

golang mod download -json example.com/generics
stdout '"GoModSum":'
golang list -f '{{if eq .ImportPath "example.com/generics"}}{{.Module.GoVersion}}{{end}}' -deps -test example.com/m2/q
stdout 1.18


# At golang 1.20 or earlier, 'golang mod tidy' should preserve the historical golang.sum
# contents, but 'golang test' should flag the missing checksums (instead of trying
# to build the test dependency with the wrong language version).

golang mod tidy -golang=1.20
! golang test -o $devnull -c all
stderr '^# example.com/m2/q\n'..${/}m2${/}q${/}'q_test.golang:3:8: example.com/generics@v1.0.0: missing golang.sum entry for golang.mod file; to add it:\n\tgolang mod download example.com/generics$'

golang mod download -json example.com/generics
golang list -f '{{if eq .ImportPath "example.com/generics"}}{{.Module.GoVersion}}{{end}}' -deps -test example.com/m2/q
stdout 1.18


# Even at golang 1.20 or earlier, 'golang mod tidy' shouldn't need golang.mod files or
# checksums that it won't record.

golang mod tidy -golang=1.20
golang clean -modcache  # Remove checksums from the module cache, so that only golang.sum is used.

# Issue 60667: 'golang list' without -mod=mod shouldn't report the checksums as
# dirty either.
golang list -m -u all

env OLDSUMDB=$GOSUMDB
env GOSUMDB=bad
golang mod tidy

env GOSUMDB=$OLDSUMDB


# Regardless of the golang version in golang.mod, 'golang get -t' should fetch
# enough checksums to run 'golang test' on the named package.

rm p
golang mod tidy -golang=1.20
golang list -m all
! stdout example.com/generics
golang get -t example.com/m2/q@v1.0.0
golang list -f '{{if eq .ImportPath "example.com/generics"}}{{.Module.GoVersion}}{{end}}' -deps -test example.com/m2/q
stdout 1.18
[!short] golang test -o $devnull -c example.com/m2/q


-- m1/golang.mod --
module example.com/m1

golang 1.21

require example.com/m2 v1.0.0
replace example.com/m2 => ../m2
-- m1/p/p.golang --
package p

import _ "example.com/m2/q"
-- m2/golang.mod --
module example.com/m2

golang 1.19

require example.com/generics v1.0.0
-- m2/q/q.golang --
package q
-- m2/q/q_test.golang --
package q

import _ "example.com/generics"
