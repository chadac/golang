cp golang.work golang.work.orig

# If the current directory contains a golang.mod file,
# 'golang work use .' should add an entry for it.
cd bar/baz
golang work use .
cmp ../../golang.work ../../golang.work.rel

# If the current directory lacks a golang.mod file, 'golang work use .'
# should remove its entry.
mv golang.mod golang.mod.bak
golang work use .
cmp ../../golang.work ../../golang.work.orig

# If the path is absolute, it should remain absolute.
mv golang.mod.bak golang.mod
golang work use $PWD
grep -count=1 '^use ' ../../golang.work
grep '^use ["]?'$PWD'["]?$' ../../golang.work

# An absolute path should replace an entry for the corresponding relative path
# and vice-versa.
golang work use .
cmp ../../golang.work ../../golang.work.rel
golang work use $PWD
grep -count=1 '^use ' ../../golang.work
grep '^use ["]?'$PWD'["]?$' ../../golang.work

# If both the absolute and relative paths are named, 'golang work use' should error
# out: we don't know which one to use, and shouldn't add both because the
# resulting workspace would contain a duplicate module.
cp ../../golang.work.orig ../../golang.work
! golang work use $PWD .
stderr '^golang: already added "\./bar/baz" as "'$PWD'"$'
cmp ../../golang.work ../../golang.work.orig


-- golang.mod --
module example
golang 1.18
-- golang.work --
golang 1.18
-- golang.work.rel --
golang 1.18

use ./bar/baz
-- bar/baz/golang.mod --
module example/bar/baz
golang 1.18
