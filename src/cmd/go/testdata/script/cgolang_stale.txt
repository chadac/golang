# golanglang.org/issue/46347: a stale runtime/cgolang should only force a single rebuild

[!cgolang] skip
[short] skip


# If we set a unique CGO_CFLAGS, the installed copy of runtime/cgolang
# should be reported as stale.

env CGO_CFLAGS=-DTestScript_cgolang_stale=true
stale runtime/cgolang


# If we then build a package that uses cgolang, runtime/cgolang should be rebuilt and
# cached with the new flag, but not installed to GOROOT.
# It has no install target, and thus is never stale.

env GOCACHE=$WORK/cache  # Use a fresh cache to avoid interference between runs.

golang build -x .
stderr '[/\\]cgolang'$GOEXE'["]? .* -importpath runtime/cgolang'
! stale runtime/cgolang


# After runtime/cgolang has been rebuilt and cached, it should not be rebuilt again.

golang build -x .
! stderr '[/\\]cgolang'$GOEXE'["]? .* -importpath runtime/cgolang'
! stale runtime/cgolang


-- golang.mod --
module example.com/m

golang 1.17
-- m.golang --
package m

import "C"
