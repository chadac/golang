# Regression test for 'golang install' locations in GOPATH mode.
env GO111MODULE=off
[short] skip

# Without $GOBIN set, binaries should be installed into the GOPATH bin directory.
env GOBIN=
rm $GOPATH/bin/golang-cmd-test$GOEXE
golang install golang-cmd-test
exists $GOPATH/bin/golang-cmd-test$GOEXE

# With $GOBIN set, binaries should be installed to $GOBIN.
env GOBIN=$WORK/bin1
mkdir -p $GOBIN
golang install golang-cmd-test
exists $GOBIN/golang-cmd-test$GOEXE

# Issue 11065: installing to the current directory should create an executable.
cd golang-cmd-test
env GOBIN=$PWD
golang install
exists ./golang-cmd-test$GOEXE
cd ..

# Without $GOBIN set, installing a program outside $GOPATH should fail
# (there is nowhere to install it).
env GOPATH= # reset to default ($HOME/golang, which does not exist)
env GOBIN=
! golang install golang-cmd-test/helloworld.golang
stderr '^golang: no install location for \.golang files listed on command line \(GOBIN not set\)$'

# With $GOBIN set, should install there.
env GOBIN=$WORK/bin1
golang install golang-cmd-test/helloworld.golang
exists $GOBIN/helloworld$GOEXE

# We can't assume that we can write to GOROOT, because it may not be writable.
# However, we can check its install location using 'golang list'.
# cmd/fix should be installed to GOROOT/pkg, not GOPATH/bin.
env GOPATH=$PWD
golang list -f '{{.Target}}' cmd/fix
stdout $GOROOT'[/\\]pkg[/\\]tool[/\\]'$GOOS'_'$GOARCH'[/\\]fix'$GOEXE'$'

# GOBIN should not affect toolchain install locations.
env GOBIN=$WORK/bin1
golang list -f '{{.Target}}' cmd/fix
stdout $GOROOT'[/\\]pkg[/\\]tool[/\\]'$GOOS'_'$GOARCH'[/\\]fix'$GOEXE'$'

-- golang-cmd-test/helloworld.golang --
package main

func main() {
	println("hello world")
}
