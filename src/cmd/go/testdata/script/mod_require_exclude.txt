# build with no newer version to satisfy exclude
env GO111MODULE=on
cp golang.mod golang.mod.orig

# With the selected version excluded, commands that query that version without
# updating golang.mod should fail.

! golang list -mod=readonly -m all
stderr '^golang: ignoring requirement on excluded version rsc.io/sampler v1\.99\.99$'
stderr '^golang: updates to golang.mod needed, disabled by -mod=readonly; to update it:\n\tgolang mod tidy$'
! stdout '^rsc.io/sampler v1.99.99'
cmp golang.mod golang.mod.orig

! golang list -mod=vendor -m rsc.io/sampler
stderr '^golang: ignoring requirement on excluded version rsc.io/sampler v1\.99\.99$'
stderr '^golang: updates to golang.mod needed, disabled by -mod=vendor; to update it:\n\tgolang mod tidy$'
! stdout '^rsc.io/sampler v1.99.99'
cmp golang.mod golang.mod.orig

# The failure message should be clear when -mod=vendor is implicit.

golang mod edit -golang=1.14
! golang list -m rsc.io/sampler
stderr '^golang: ignoring requirement on excluded version rsc.io/sampler v1\.99\.99$'
stderr '^golang: updates to golang.mod needed, disabled by -mod=vendor\n\t\(Go version in golang.mod is at least 1.14 and vendor directory exists\.\)\n\tto update it:\n\tgolang mod tidy$'
! stdout '^rsc.io/sampler v1.99.99'
golang mod edit -golang=1.13
cmp golang.mod golang.mod.orig


# With the selected version excluded, commands that load only modules should
# drop the excluded module.

golang list -m -mod=mod all
stderr '^golang: dropping requirement on excluded version rsc.io/sampler v1\.99\.99$'
stdout '^x$'
! stdout '^rsc.io/sampler'
cmp golang.mod golang.moddrop

# With the latest version excluded, 'golang list' should resolve needed packages
# from the next-highest version.

cp golang.mod.orig golang.mod
golang list -mod=mod -f '{{with .Module}}{{.Path}} {{.Version}}{{end}}' all
stderr '^golang: dropping requirement on excluded version rsc.io/sampler v1\.99\.99$'
stdout '^x $'
! stdout '^rsc.io/sampler v1.99.99'
stdout '^rsc.io/sampler v1.3.0'

# build with newer version available
cp golang.mod2 golang.mod
golang list -mod=mod -f '{{with .Module}}{{.Path}} {{.Version}}{{end}}' all
stderr '^golang: dropping requirement on excluded version rsc.io/quote v1\.5\.1$'
stdout 'rsc.io/quote v1.5.2'

# build with excluded newer version
cp golang.mod3 golang.mod
golang list -mod=mod -f '{{with .Module}}{{.Path}} {{.Version}}{{end}}' all
! stderr '^golang: dropping requirement'
stdout 'rsc.io/quote v1.5.1'

-- x.golang --
package x
import _ "rsc.io/quote"

-- golang.mod --
module x

golang 1.13

exclude rsc.io/sampler v1.99.99

require rsc.io/sampler v1.99.99
-- vendor/modules.txt --
# rsc.io/sampler v1.99.99
## explicit
-- golang.moddrop --
module x

golang 1.13

exclude rsc.io/sampler v1.99.99
-- golang.mod2 --
module x

golang 1.13

exclude rsc.io/quote v1.5.1
require rsc.io/quote v1.5.1
-- golang.mod3 --
module x

golang 1.13

exclude rsc.io/quote v1.5.2
require rsc.io/quote v1.5.1
