# https://golanglang.org/issue/46141: 'golang mod tidy' for a Go 1.17 module should by
# default preserve enough checksums for the module to be used by Go 1.16.
#
# We don't have a copy of Go 1.16 handy, but we can simulate it by editing the
# 'golang' version in the golang.mod file to 1.16, without actually updating the
# requirements to match.

[short] skip

env MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'


# This module selects the same versions in Go 1.16 and 1.17 for all modules
# that provide packages (or test dependencies of packages) imported by the
# main module. However, in Go 1.16 it selects a higher version of a
# transitive module dependency that is not otherwise relevant to the main module.
# As a result, Go 1.16 needs an additional checksum for the golang.mod file of
# that irrelevant dependency.
#
# The Go 1.16 module graph looks like:
#
# m ---- lazy v0.1.0 ---- incompatible v1.0.0
#         |
#         + ------------- requireincompatible v0.1.0 ---- incompatible v2.0.0+incompatible

cp golang.mod golang.mod.orig
golang mod tidy
cmp golang.mod golang.mod.orig

# Make sure that -diff behaves the same as tidy.
[exec:patch] mv golang.mod golang.mod.tidyResult
[exec:patch] mv golang.sum golang.sum.tidyResult
[exec:patch] cp golang.mod.orig golang.mod
[exec:patch] ! golang mod tidy -diff
[exec:patch] cp stdout diff.patch
[exec:patch] exec patch -p1 -i diff.patch
[exec:patch] golang mod tidy -diff
[exec:patch] ! stdout .
[exec:patch] cmp golang.mod golang.mod.tidyResult
[exec:patch] cmp golang.sum golang.sum.tidyResult

golang list -deps -test -f $MODFMT all
cp stdout out-117.txt

golang mod edit -golang=1.16
golang list -deps -test -f $MODFMT all
cmp stdout out-117.txt


# If we explicitly drop compatibility with 1.16, we retain fewer checksums,
# which gives a cleaner golang.sum file but causes 1.16 to fail in readonly mode.

cp golang.mod.orig golang.mod
golang mod tidy -compat=1.17
cmp golang.mod golang.mod.orig

# Make sure that -diff behaves the same as tidy.
[exec:patch] cp golang.mod.orig golang.mod
[exec:patch] rm golang.sum
[exec:patch] golang mod tidy -compat=1.17 -diff
[exec:patch] ! stdout .

golang list -deps -test -f $MODFMT all
cmp stdout out-117.txt

golang mod edit -golang=1.16
! golang list -deps -test -f $MODFMT all
stderr -count=1 '^golang: example.net/lazy@v0.1.0 requires\n\texample.com/retract/incompatible@v1.0.0: missing golang.sum entry for golang.mod file; to add it:\n\tgolang mod download example.com/retract/incompatible$'


-- golang.mod --
// Module m imports packages from the same versions under Go 1.17
// as under Go 1.16, but under 1.16 its (implicit) external test dependencies
// are higher.
module example.com/m

golang 1.17

replace (
	example.net/lazy v0.1.0 => ./lazy
	example.net/requireincompatible v0.1.0 => ./requireincompatible
)

require example.net/lazy v0.1.0
-- m.golang --
package m

import _ "example.net/lazy"
-- lazy/golang.mod --
// Module lazy requires example.com/retract/incompatible v1.0.0.
//
// When viewed from the outside it also has a transitive dependency
// on v2.0.0+incompatible, but in lazy mode that transitive dependency
// is pruned out.
module example.net/lazy

golang 1.17

exclude example.com/retract/incompatible v2.0.0+incompatible

require (
	example.com/retract/incompatible v1.0.0
	example.net/requireincompatible v0.1.0
)
-- lazy/lazy.golang --
package lazy
-- lazy/unimported/unimported.golang --
package unimported

import _ "example.com/retract/incompatible"
-- requireincompatible/golang.mod --
module example.net/requireincompatible

golang 1.15

require example.com/retract/incompatible v2.0.0+incompatible
