# setup
env TESTGO_VERSION=golang1.99rc1
env TESTGO_VERSION_SWITCH=switch

# golang get golang should use the latest Go 1.23
cp golang.mod.orig golang.mod
golang get golang
stderr '^golang: upgraded golang 1.21 => 1.23.9$'
grep 'golang 1.23.9' golang.mod
! grep toolchain golang.mod

# golang get golang@1.23 should use the latest Go 1.23
cp golang.mod.orig golang.mod
golang get golang@1.23
stderr '^golang: upgraded golang 1.21 => 1.23.9$'
grep 'golang 1.23.9' golang.mod
! grep toolchain golang.mod

# golang get golang@1.22 should use the latest Go 1.22
cp golang.mod.orig golang.mod
golang get golang@1.22
stderr '^golang: upgraded golang 1.21 => 1.22.9$'
grep 'golang 1.22.9' golang.mod
! grep toolchain1 golang.mod

# golang get golang@patch should use the latest patch release
golang get golang@1.22.1
golang get golang@patch
stderr '^golang: upgraded golang 1.22.1 => 1.22.9$'
grep 'golang 1.22.9' golang.mod
! grep toolchain golang.mod

# golang get golang@1.24 does NOT find the release candidate
cp golang.mod.orig golang.mod
! golang get golang@1.24
stderr '^golang: golang@1.24: no matching versions for query "1.24"$'

# golang get golang@1.24rc1 works
cp golang.mod.orig golang.mod
golang get golang@1.24rc1
stderr '^golang: upgraded golang 1.21 => 1.24rc1$'
grep 'golang 1.24rc1' golang.mod
! grep toolchain golang.mod

# golang get golang@latest finds the latest Go 1.23
cp golang.mod.orig golang.mod
golang get golang@latest
stderr '^golang: upgraded golang 1.21 => 1.23.9$'
grep 'golang 1.23.9' golang.mod
! grep toolchain golang.mod

# Again, with toolchains.

golang get toolchain@golang1.99rc1
stderr '^golang: added toolchain golang1.99rc1$'
grep 'golang 1.23.9' golang.mod
grep 'toolchain golang1.99rc1' golang.mod

# golang get toolchain should find golang1.999testmod.
golang get toolchain
stderr '^golang: upgraded toolchain golang1.99rc1 => golang1.999testmod$'
grep 'golang 1.23.9' golang.mod
grep 'toolchain golang1.999testmod' golang.mod

# golang get toolchain@golang1.23 should use the latest Go 1.23
golang get toolchain@golang1.23
stderr '^golang: removed toolchain golang1.999testmod$'
grep 'golang 1.23.9' golang.mod
! grep 'toolchain golang1.23.9' golang.mod  # implied

# golang get toolchain@golang1.22 should use the latest Go 1.22 and downgrade golang.
golang get toolchain@golang1.22
stderr '^golang: downgraded golang 1.23.9 => 1.22.9$'
grep 'golang 1.22.9' golang.mod
! grep 'toolchain golang1.22.9' golang.mod # implied

# golang get toolchain@patch should use the latest patch release
golang get toolchain@golang1.22.1
golang get toolchain@patch
stderr '^golang: added toolchain golang1.22.9$'
grep 'golang 1.22.1' golang.mod
grep 'toolchain golang1.22.9' golang.mod
golang get golang@1.22.9 toolchain@none
grep 'golang 1.22.9' golang.mod
! grep 'toolchain golang1.22.9' golang.mod

# golang get toolchain@golang1.24 does NOT find the release candidate
! golang get toolchain@golang1.24
stderr '^golang: toolchain@golang1.24: no matching versions for query "golang1.24"$'

# golang get toolchain@golang1.24rc1 works
golang get toolchain@golang1.24rc1
stderr '^golang: added toolchain golang1.24rc1$'
grep 'golang 1.22.9' golang.mod  # no longer implied
grep 'toolchain golang1.24rc1' golang.mod

# golang get toolchain@latest finds golang1.999testmod.
cp golang.mod.orig golang.mod
golang get toolchain@latest
stderr '^golang: added toolchain golang1.999testmod$'
grep 'golang 1.21' golang.mod
grep 'toolchain golang1.999testmod' golang.mod

# Bug fixes.

# golang get golang@garbage should fail but not crash
! golang get golang@garbage
! stderr panic
stderr '^golang: invalid golang version garbage$'

# golang get golang@golang1.21.0 is OK - we silently correct to 1.21.0
golang get golang@1.19
golang get golang@golang1.21.0
stderr '^golang: upgraded golang 1.19 => 1.21.0'

# golang get toolchain@1.24rc1 is OK too.
golang get toolchain@1.24rc1
stderr '^golang: downgraded toolchain golang1.999testmod => golang1.24rc1$'

# golang get golang@1.21 should work if we are the Go 1.21 language version,
# even though there's no toolchain for it.
# (Older versions resolve to the latest release in that version, so for example
# golang get golang@1.20 might resolve to 1.20.9, but if we're the devel copy of
# Go 1.21, there's no release yet to resolve to, so we resolve to ourselves.)
env TESTGO_VERSION=golang1.21
golang get golang@1.19 toolchain@none
golang get golang@1.21
grep 'golang 1.21$' golang.mod
! grep toolchain golang.mod

-- golang.mod.orig --
module m

golang 1.21
