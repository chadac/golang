# This test exercises that vendoring works properly using the workspace in the
# the work_prune test case.

golang work vendor
cmp vendor/modules.txt modules.txt.want
cmp vendor/example.com/b/b.golang b/b.golang
cmp vendor/example.com/q/q.golang q1_1_0/q.golang
golang list -m -f '{{.Version}}' example.com/q
stdout '^v1.1.0$'

golang list -f '{{.Dir}}' example.com/q
stdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]q
golang list -f '{{.Dir}}' example.com/b
stdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]b

[short] skip

rm b
rm q1_0_0
rm q1_1_0
golang run example.com/p
stdout 'version 1.1.0'

-- modules.txt.want --
## workspace
# example.com/b v1.0.0 => ./b
## explicit; golang 1.18
example.com/b
# example.com/q v1.0.0 => ./q1_0_0
## explicit; golang 1.18
# example.com/q v1.1.0 => ./q1_1_0
## golang 1.18
example.com/q
-- golang.work --
golang 1.18

use (
	./a
	./p
)
-- a/golang.mod --
module example.com/a

golang 1.18

require example.com/b v1.0.0

replace example.com/b v1.0.0 => ../b
-- a/foo.golang --
package main

import "example.com/b"

func main() {
	b.B()
}
-- b/golang.mod --
module example.com/b

golang 1.18

require example.com/q v1.1.0
-- b/b.golang --
package b

func B() {
}
-- b/b_test.golang --
package b

import "example.com/q"

func TestB() {
	q.PrintVersion()
}
-- p/golang.mod --
module example.com/p

golang 1.18

require example.com/q v1.0.0

replace example.com/q v1.0.0 => ../q1_0_0
replace example.com/q v1.1.0 => ../q1_1_0
-- p/main.golang --
package main

import "example.com/q"

func main() {
	q.PrintVersion()
}
-- q1_0_0/golang.mod --
module example.com/q

golang 1.18
-- q1_0_0/q.golang --
package q

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.0.0")
}
-- q1_1_0/golang.mod --
module example.com/q

golang 1.18
-- q1_1_0/q.golang --
package q

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.1.0")
}
