cp golang.mod golang.mod.orig

# 'golang list pkg' does not report an error when a retracted version is used.
golang list -e -f '{{if .Error}}{{.Error}}{{end}}' ./use
! stdout .
cmp golang.mod golang.mod.orig

# Nor does 'golang build'.
[!short] golang build ./use
[!short] ! stderr .
[!short] cmp golang.mod golang.mod.orig

# Neither 'golang list' nor 'golang build' should download golang.mod from the version
# that would list retractions.
exists $GOPATH/pkg/mod/cache/download/example.com/retract/@v/v1.0.0-bad.mod
! exists $GOPATH/pkg/mod/cache/download/example.com/retract/@v/v1.1.0.mod

# Importing a package from a module with a retracted latest version will
# select the latest non-retracted version.
golang get ./use_self_prev
golang list -m example.com/retract/self/prev
stdout '^example.com/retract/self/prev v1.1.0$'
exists $GOPATH/pkg/mod/cache/download/example.com/retract/self/prev/@v/v1.9.0.mod

-- golang.mod --
module example.com/use

golang 1.15

require example.com/retract v1.0.0-bad

-- golang.sum --
example.com/retract v1.0.0-bad h1:liAW69rbtjY67x2CcNzat668L/w+YGgNX3lhJsWIJis=
example.com/retract v1.0.0-bad/golang.mod h1:0DvGGolangfJ9hr1q63cBrOY/jSY52OwhRGA0K47NE80I5Y=
example.com/retract/self/prev v1.1.0 h1:0/8I/GTG+1eJTFeDQ/fUbgrMsVHHyKhh3Z8DSZp1fuA=
example.com/retract/self/prev v1.1.0/golang.mod h1:xl2EcklWuZZHVtHWcpzfSJQmnzAGpKZYpA/Wto7SZN4=
-- use/use.golang --
package use

import _ "example.com/retract"

-- use_self_prev/use.golang --
package use_self_prev

import _ "example.com/retract/self/prev"
