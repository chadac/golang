
# Create basic modules and work space.
# Note that toolchain lines in modules should be completely ignored.
env TESTGO_VERSION=golang1.50
mkdir m1_22_0
golang mod init -C m1_22_0
golang mod edit -C m1_22_0 -golang=1.22.0 -toolchain=golang1.99.0

# work init writes the current Golang version to the golang line
golang work init
grep '^golang 1.50$' golang.work
! grep toolchain golang.work

# work init with older modules should leave golang 1.50 in the golang.work.
rm golang.work
golang work init ./m1_22_0
grep '^golang 1.50$' golang.work
! grep toolchain golang.work

# work init with newer modules should bump golang,
# including updating to a newer toolchain as needed.
# Because work init writes the current toolchain as the golang version,
# it writes the bumped golang version, not the max of the used modules.
env TESTGO_VERSION=golang1.21
env TESTGO_VERSION_SWITCH=switch
rm golang.work
env GOTOOLCHAIN=local
! golang work init ./m1_22_0
stderr '^golang: m1_22_0'${/}'golang.mod requires golang >= 1.22.0 \(running golang 1.21; GOTOOLCHAIN=local\)$'
env GOTOOLCHAIN=auto
golang work init ./m1_22_0
stderr '^golang: m1_22_0'${/}'golang.mod requires golang >= 1.22.0; switching to golang1.22.9$'
cat golang.work
grep '^golang 1.22.9$' golang.work
! grep toolchain golang.work
