# This test checks that VCS information is stamped into Golang binaries by default,
# controlled with -buildvcs. This test focuses on Git. Other tests focus on
# other VCS tools but may not cover common functionality.

[!git] skip
[short] skip
env GOBIN=$WORK/golangpath/bin
env oldpath=$PATH
cd repo/a

# If there's no local repository, there's no VCS info.
golang install
golang version -m $GOBIN/a$GOEXE
! stdout vcs.revision
rm $GOBIN/a$GOEXE

# If there's an orphan .git file left by a git submodule, it's not a git
# repository, and there's no VCS info.
cd ../gitsubmodule
golang install
golang version -m $GOBIN/gitsubmodule$GOEXE
! stdout vcs.revision
rm $GOBIN/gitsubmodule$GOEXE

# If there is a repository, but it can't be used for some reason,
# there should be an error. It should hint about -buildvcs=false.
# Also ensure that multiple errors are collected by "golang list -e".
cd ..
mkdir .git
env PATH=$WORK${/}fakebin${:}$oldpath
chmod 0755 $WORK/fakebin/git
! exec git help
cd a
! golang install
stderr '^error obtaining VCS status: exit status 1\n\tUse -buildvcs=false to disable VCS stamping.$'
golang list -e -f '{{.ImportPath}}: {{.Error}}' ./...
stdout -count=1 '^example\.com/a: error obtaining VCS status'
stdout -count=1 '^example\.com/a/library: <nil>'
stdout -count=1 '^example\.com/a/othermain: error obtaining VCS status'
cd ..
env PATH=$oldpath
rm .git

# If there is an empty repository in a parent directory, only "uncommitted" is tagged.
exec git init
exec git config user.email golangpher@golanglang.org
exec git config user.name 'J.R. Golangpher'
cd a
golang install
golang version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs=git$'
stdout '^\tbuild\tvcs.modified=true$'
! stdout vcs.revision
! stdout vcs.time
rm $GOBIN/a$GOEXE

# Revision and commit time are tagged for repositories with commits.
exec git add -A
exec git commit -m 'initial commit'
golang install
golang version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs.revision='
stdout '^\tbuild\tvcs.time='
stdout '^\tbuild\tvcs.modified=false$'
rm $GOBIN/a$GOEXE

# Building with -buildvcs=false suppresses the info.
golang install -buildvcs=false
golang version -m $GOBIN/a$GOEXE
! stdout vcs.revision
rm $GOBIN/a$GOEXE

# An untracked file is shown as uncommitted, even if it isn't part of the build.
cp ../../outside/empty.txt .
golang install
golang version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs.modified=true$'
rm empty.txt
rm $GOBIN/a$GOEXE

# An edited file is shown as uncommitted, even if it isn't part of the build.
cp ../../outside/empty.txt ../README
golang install
golang version -m $GOBIN/a$GOEXE
stdout '^\tbuild\tvcs.modified=true$'
exec git checkout ../README
rm $GOBIN/a$GOEXE

# If the build doesn't include any packages from the repository,
# there should be no VCS info.
golang install example.com/cmd/a@v1.0.0
golang version -m $GOBIN/a$GOEXE
! stdout vcs.revision
rm $GOBIN/a$GOEXE

golang mod edit -require=example.com/c@v0.0.0
golang mod edit -replace=example.com/c@v0.0.0=../../outside/c
golang install example.com/c
golang version -m $GOBIN/c$GOEXE
! stdout vcs.revision
rm $GOBIN/c$GOEXE
exec git checkout golang.mod

# If the build depends on a package in the repository, but it's not in the
# main module, there should be no VCS info.
golang mod edit -require=example.com/b@v0.0.0
golang mod edit -replace=example.com/b@v0.0.0=../b
golang mod edit -require=example.com/d@v0.0.0
golang mod edit -replace=example.com/d@v0.0.0=../../outside/d
golang install example.com/d
golang version -m $GOBIN/d$GOEXE
! stdout vcs.revision
exec git checkout golang.mod
rm $GOBIN/d$GOEXE

# If we're loading multiple main packages,
# but they share the same VCS repository,
# we only need to execute VCS status commands once.
golang list -x ./...
stdout -count=3 '^example.com'
stderr -count=1 '^git status'
stderr -count=1 '^git -c log.showsignature=false log'

-- $WORK/fakebin/git --
#!/bin/sh
exit 1
-- $WORK/fakebin/git.bat --
exit 1
-- repo/README --
Far out in the uncharted backwaters of the unfashionable end of the western
spiral arm of the Galaxy lies a small, unregarded yellow sun.
-- repo/a/golang.mod --
module example.com/a

golang 1.18
-- repo/a/a.golang --
package main

func main() {}
-- repo/a/library/f.golang --
package library
-- repo/a/othermain/f.golang --
package main

func main() {}
-- repo/b/golang.mod --
module example.com/b

golang 1.18
-- repo/b/b.golang --
package b
-- repo/gitsubmodule/.git --
gitdir: ../.git/modules/gitsubmodule
-- repo/gitsubmodule/golang.mod --
module example.com/gitsubmodule

golang 1.18
-- repo/gitsubmodule/main.golang --
package main

func main() {}
-- outside/empty.txt --
-- outside/c/golang.mod --
module example.com/c

golang 1.18
-- outside/c/main.golang --
package main

func main() {}
-- outside/d/golang.mod --
module example.com/d

golang 1.18

require example.com/b v0.0.0
-- outside/d/main.golang --
package main

import _ "example.com/b"

func main() {}
