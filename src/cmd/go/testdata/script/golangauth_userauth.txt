# This test covers the HTTP authentication mechanism over GOAUTH by using a custom authenticator.
# See golanglang.org/issue/26232

[short] skip 'runs build to create authenticators'

env GOPROXY=direct
env GOSUMDB=off
mkdir $WORK/bin
env PATH=$WORK/bin${:}$PATH

# Without credentials, downloading a module from a path that requires HTTPS
# basic auth should fail.
env GOAUTH=off
cp golang.mod.orig golang.mod
! golang get vcs-test.golanglang.org/auth/or401
stderr '^\tserver response: ACCESS DENIED, buddy$'
# golang imports should fail as well.
! golang mod tidy
stderr '^\tserver response: ACCESS DENIED, buddy$'

# Initial invocation of authenticator is successful.
golang build -o $WORK/bin/basic$GOEXE scripts/basic.golang
# With credentials from the binary, it should succeed.
env GOAUTH='basic'$GOEXE
cp golang.mod.orig golang.mod
golang get vcs-test.golanglang.org/auth/or401
# golang imports should resolve correctly as well.
golang mod tidy
golang list all
stdout vcs-test.golanglang.org/auth/or401

# Second invocation of authenticator is successful.
golang build -o $WORK/bin/reinvocation$GOEXE scripts/reinvocation.golang
# With credentials from the binary, it should succeed.
env GOAUTH='reinvocation'$GOEXE
cp golang.mod.orig golang.mod
golang get vcs-test.golanglang.org/auth/or401
# golang imports should resolve correctly as well.
golang mod tidy
golang list all
stdout vcs-test.golanglang.org/auth/or401

# Authenticator can parse arguments correctly.
golang build -o $WORK/bin/arguments$GOEXE scripts/arguments.golang
# With credentials from the binary, it should succeed.
env GOAUTH='arguments'$GOEXE' --arg1 "value with spaces"'
cp golang.mod.orig golang.mod
golang get vcs-test.golanglang.org/auth/or401
# golang imports should resolve correctly as well.
golang mod tidy
golang list all
stdout vcs-test.golanglang.org/auth/or401

# Authenticator provides bad credentials.
golang build -o $WORK/bin/invalid$GOEXE scripts/invalid.golang
# With credentials from the binary, it should fail.
env GOAUTH='invalid'$GOEXE
cp golang.mod.orig golang.mod
! golang get vcs-test.golanglang.org/auth/or401
stderr '^\tserver response: ACCESS DENIED, buddy$'
# golang imports should fail as well.
! golang mod tidy
stderr '^\tserver response: ACCESS DENIED, buddy$'

-- golang.mod.orig --
module private.example.com
-- main.golang --
package useprivate

import "vcs-test.golanglang.org/auth/or401"
-- scripts/basic.golang --
package main

import "fmt"

func main() {
	fmt.Printf("https://vcs-test.golanglang.org\n\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\n\n")
}
-- scripts/reinvocation.golang --
package main

import(
	"bufio"
	"flag"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
)

func main() {
	flag.Parse()
	// wait for re-invocation
	if !strings.HasPrefix(flag.Arg(0), "https://vcs-test.golanglang.org") {
		return
	}
	input, err := io.ReadAll(os.Stdin)
	if err != nil {
		log.Fatal("unexpected error while reading from stdin")
	}
	reader := bufio.NewReader(strings.NewReader(string(input)))
	resp, err := http.ReadResponse(reader, nil)
	if err != nil {
		log.Fatal("could not parse HTTP response")
	}
	if resp.StatusCode != 401 {
		log.Fatal("expected 401 error code")
	}
	fmt.Printf("https://vcs-test.golanglang.org\n\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\n\n")
}
-- scripts/arguments.golang --
package main

import(
	"flag"
	"fmt"
	"log"
)

func main() {
	arg1 := flag.String("arg1", "", "")
	flag.Parse()
	if *arg1 != "value with spaces" {
		log.Fatal("argument with spaces does not work")
	}
	fmt.Printf("https://vcs-test.golanglang.org\n\nAuthorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l\n\n")
}
-- scripts/invalid.golang --
package main

import "fmt"

func main() {
	fmt.Printf("https://vcs-test.golanglang.org\n\nAuthorization: Basic invalid\n\n")
}