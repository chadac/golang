cp golang.mod golang.mod.orig

env oldGOPROXY=$GOPROXY

# If a wildcard replacement exists for an otherwise-nonexistent module,
# 'golang get' should resolve it to the minimum valid pseudo-version.

golang mod edit -replace=example.com/x=./x
golang get example.com/x

golang list -m example.com/x
stdout '^example.com/x v0.0.0-00010101000000-000000000000 '

# If specific-version replacements exist, the highest matching version should be used.
golang mod edit -replace=example.com/x@v0.1.0=./x
golang mod edit -replace=example.com/x@v0.2.0=./x

golang get example.com/x
golang list -m example.com/x
stdout '^example.com/x v0.2.0 '

golang get example.com/x@<v0.2.0
golang list -m example.com/x
stdout '^example.com/x v0.1.0 '


# The same should work with GOPROXY=off.

env GOPROXY=off
cp golang.mod.orig golang.mod

golang mod edit -replace=example.com/x=./x
golang get example.com/x

golang list -m example.com/x
stdout '^example.com/x v0.0.0-00010101000000-000000000000 '

# If specific-version replacements exist, the highest matching version should be used.
golang mod edit -replace=example.com/x@v0.1.0=./x
golang mod edit -replace=example.com/x@v0.2.0=./x

golang get example.com/x
golang list -m example.com/x
stdout '^example.com/x v0.2.0 '

golang get example.com/x@<v0.2.0
golang list -m example.com/x
stdout '^example.com/x v0.1.0 '


# Replacements should also be listed as known versions, and 'golang get' should sort
# them in with ordinary versions.

env GOPROXY=$oldGOPROXY

cp golang.mod.orig golang.mod
golang list -versions -m rsc.io/quote
stdout 'v1.3.0 v1.4.0'

golang get rsc.io/quote@v1.3
golang list -m rsc.io/quote
stdout '^rsc.io/quote v1.3.0'

golang mod edit -replace rsc.io/quote@v1.3.1=rsc.io/quote@v1.4.0

golang list -versions -m rsc.io/quote
stdout 'v1.3.0 v1.3.1 v1.4.0'

golang get rsc.io/quote@v1.3
golang list -m rsc.io/quote
stdout '^rsc.io/quote v1.3.1 '

golang get rsc.io/quote@>v1.3.1
golang list -m rsc.io/quote
stdout '^rsc.io/quote v1.4.0'


# Replacements should allow 'golang get' to work even with dotless module paths.

cp golang.mod.orig golang.mod

! golang list example
stderr '^package example is not in std \(.*\)$'
! golang get example
stderr '^golang: malformed module path "example": missing dot in first path element$'

golang mod edit -replace example@v0.1.0=./example

! golang list example
stderr '^module example provides package example and is replaced but not required; to add it:\n\tgolang get example@v0.1.0$'

golang get example
golang list -m example
stdout '^example v0.1.0 '


-- golang.mod --
module example.com

golang 1.16
-- x/golang.mod --
module example.com/x

golang 1.16
-- x/x.golang --
package x
-- example/golang.mod --
module example
golang 1.16
-- example/example.golang --
package example
