[short] skip 'runs golang run'

! golang work init doesnotexist
stderr 'golang: directory doesnotexist does not exist'
golang env GOWORK
! stdout .

golang work init ./a ./b
cmpenv golang.work golang.work.want
golang env GOWORK
stdout '^'$WORK'(\\|/)golangpath(\\|/)src(\\|/)golang.work$'

! golang run  example.com/b
stderr 'a(\\|/)a.golang:4:8: no required module provides package rsc.io/quote; to add it:\n\tcd '$WORK(\\|/)golangpath(\\|/)src(\\|/)a'\n\tgolang get rsc.io/quote'
cd a
golang get rsc.io/quote
cat golang.mod
golang env GOMOD # golang env GOMOD reports the module in a single module context
stdout $GOPATH(\\|/)src(\\|/)a(\\|/)golang.mod
cd ..
golang run example.com/b
stdout 'Hello, world.'

# And try from a different directory
cd c
golang run  example.com/b
stdout 'Hello, world.'
cd $GOPATH/src

golang list all # all includes both modules
stdout 'example.com/a'
stdout 'example.com/b'

# -mod can only be set to readonly in workspace mode
golang list -mod=readonly all
! golang list -mod=mod all
stderr '^golang: -mod may only be set to readonly or vendor when in workspace mode'
env GOWORK=off
golang list -mod=mod all
env GOWORK=

# Test that duplicates in the use list return an error
cp golang.work golang.work.backup
cp golang.work.dup golang.work
! golang run example.com/b
stderr 'golang.work:6: path .* appears multiple times in workspace'
cp golang.work.backup golang.work

cp golang.work.d golang.work
golang work use # update golang version
golang run example.com/d

# Test that we don't run into "newRequirements called with unsorted roots"
# panic with unsorted main modules.
cp golang.work.backwards golang.work
golang work use # update golang version
golang run example.com/d

# Test that command-line-arguments work inside and outside modules.
# This exercises the code that determines which module command-line-arguments
# belongs to.
golang list ./b/main.golang
env GOWORK=off
golang build -n -o foo foo.golang
env GOWORK=
golang build -n -o foo foo.golang

-- golang.work.dup --
golang 1.18

use (
	a
	b
	../src/a
)
-- golang.work.want --
golang $golangversion

use (
	./a
	./b
)
-- golang.work.d --
golang 1.18

use (
	a
	b
	d
)
-- a/golang.mod --

module example.com/a

-- a/a.golang --
package a

import "fmt"
import "rsc.io/quote"

func HelloFromA() {
	fmt.Println(quote.Hello())
}

-- b/golang.mod --

module example.com/b

-- b/main.golang --
package main

import "example.com/a"

func main() {
	a.HelloFromA()
}
-- b/lib/hello.golang --
package lib

import "example.com/a"

func Hello() {
	a.HelloFromA()
}

-- c/README --
Create this directory so we can cd to
it and make sure paths are interpreted
relative to the golang.work, not the cwd.
-- d/golang.mod --
module example.com/d

-- d/main.golang --
package main

import "example.com/b/lib"

func main() {
	lib.Hello()
}

-- golang.work.backwards --
golang 1.18

use (
	d
	b
	a
)

-- foo.golang --
package main
import "fmt"
func main() {
	fmt.Println("Hello, World")
}
