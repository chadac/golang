[short] skip

# Test building in overlays.
# TODO(#39958): add a test case where the destination file in the replace map
#   isn't a golang file. Either completely exclude that case in fs.IsDirWithGolangFiles
#   if the compiler doesn't allow it, or test that it works all the way.
# TODO(#39958): add a test that both gc and gccgolang assembly files can include .h
#   files.

# The main package (m) is contained in an overlay. It imports m/dir2 which has one
# file in an overlay and one file outside the overlay, which in turn imports m/dir,
# which only has source files in the overlay.

cd m

! golang build .
golang build -overlay overlay.json -o main$GOEXE .
exec ./main$golangexe
stdout '^hello$'

golang build -overlay overlay.json -o print_abspath$GOEXE ./printpath
exec ./print_abspath$GOEXE
stdout $WORK[/\\]golangpath[/\\]src[/\\]m[/\\]printpath[/\\]main.golang

golang vet -overlay overlay.json ./printpath

golang build -overlay overlay.json -o print_trimpath$GOEXE -trimpath ./printpath
exec ./print_trimpath$GOEXE
stdout ^m[/\\]printpath[/\\]main.golang

golang build -overlay overlay.json -o print_trimpath_two_files$GOEXE printpath/main.golang printpath/other.golang
exec ./print_trimpath_two_files$GOEXE
stdout $WORK[/\\]golangpath[/\\]src[/\\]m[/\\]printpath[/\\]main.golang
stdout $WORK[/\\]golangpath[/\\]src[/\\]m[/\\]printpath[/\\]other.golang

[cgolang] golang build -overlay overlay.json -o main_cgolang_replace$GOEXE ./cgolang_hello_replace
[cgolang] exec ./main_cgolang_replace$GOEXE
[cgolang] stdout '^hello cgolang\r?\n'

[cgolang] golang build -overlay overlay.json -o main_cgolang_quote$GOEXE ./cgolang_hello_quote
[cgolang] exec ./main_cgolang_quote$GOEXE
[cgolang] stdout '^hello cgolang\r?\n'

[cgolang] golang build -overlay overlay.json -o main_cgolang_angle$GOEXE ./cgolang_hello_angle
[cgolang] exec ./main_cgolang_angle$GOEXE
[cgolang] stdout '^hello cgolang\r?\n'

golang build -overlay overlay.json -o main_call_asm$GOEXE ./call_asm
exec ./main_call_asm$GOEXE
! stdout .

[cgolang] golang list -compiled -overlay overlay.json -f '{{range .CompiledGolangFiles}}{{. | printf "%s\n"}}{{end}}' ./cgolang_hello_replace
[cgolang] cp stdout compiled_cgolang_sources.txt
[cgolang] golang run ../print_line_comments.golang compiled_cgolang_sources.txt
[cgolang] stdout $GOPATH[/\\]src[/\\]m[/\\]cgolang_hello_replace[/\\]cgolang_hello_replace.golang
[cgolang] ! stdout $GOPATH[/\\]src[/\\]m[/\\]overlay[/\\]hello.c

# Change the contents of a file in the overlay and ensure that makes the target stale
env OLD_GOCACHE=$GOCACHE
env GOCACHE=$WORK/cache  # use a fresh cache so that multiple runs of the test don't interfere
golang build -x -overlay overlay.json ./test_cache
stderr '(compile|gccgolang)( |\.exe).*test_cache.golang'
golang build -x -overlay overlay.json ./test_cache
! stderr '(compile|gccgolang)( |\.exe).*test_cache.golang'  # cached
cp overlay/test_cache_different.golang overlay/test_cache.golang
golang build -x -overlay overlay.json ./test_cache
stderr '(compile|gccgolang)( |\.exe).*test_cache.golang'  # not cached
env CACHE=$OLD_GOCACHE

# Run same tests but with gccgolang.
env GO111MODULE=off
[!exec:gccgolang] stop
[cross] stop  # gccgolang can't necessarily cross-compile

! golang build -compiler=gccgolang .
golang build -compiler=gccgolang -overlay overlay.json -o main_gccgolang$GOEXE .
exec ./main_gccgolang$golangexe
stdout '^hello$'

golang build -compiler=gccgolang -overlay overlay.json -o print_abspath_gccgolang$GOEXE ./printpath
exec ./print_abspath_gccgolang$GOEXE
stdout $WORK[/\\]golangpath[/\\]src[/\\]m[/\\]printpath[/\\]main.golang

golang build -compiler=gccgolang -overlay overlay.json -o print_trimpath_gccgolang$GOEXE -trimpath ./printpath
exec ./print_trimpath_gccgolang$GOEXE
stdout ^\.[/\\]printpath[/\\]main.golang


golang build -compiler=gccgolang  -overlay overlay.json -o main_cgolang_replace_gccgolang$GOEXE ./cgolang_hello_replace
exec ./main_cgolang_replace_gccgolang$GOEXE
stdout '^hello cgolang\r?\n'

golang build -compiler=gccgolang  -overlay overlay.json -o main_cgolang_quote_gccgolang$GOEXE ./cgolang_hello_quote
exec ./main_cgolang_quote_gccgolang$GOEXE
stdout '^hello cgolang\r?\n'

golang build -compiler=gccgolang  -overlay overlay.json -o main_cgolang_angle_gccgolang$GOEXE ./cgolang_hello_angle
exec ./main_cgolang_angle_gccgolang$GOEXE
stdout '^hello cgolang\r?\n'

golang build -compiler=gccgolang -overlay overlay.json -o main_call_asm_gccgolang$GOEXE ./call_asm
exec ./main_call_asm_gccgolang$GOEXE
! stdout .


-- m/golang.mod --
// TODO(matloob): how do overlays work with golang.mod (especially if mod=readonly)
module m

golang 1.16

-- m/dir2/h.golang --
package dir2

func PrintMessage() {
	printMessage()
}
-- m/dir/foo.txt --
The build action code currently expects the package directory
to exist, so it can run the compiler in that directory.
TODO(matloob): Remove this requirement.
-- m/printpath/about.txt --
the actual code is in the overlay
-- m/overlay.json --
{
	"Replace": {
		"f.golang": "overlay/f.golang",
		"dir/g.golang": "overlay/dir_g.golang",
		"dir2/i.golang": "overlay/dir2_i.golang",
		"printpath/main.golang": "overlay/printpath.golang",
		"printpath/other.golang": "overlay2/printpath2.golang",
		"call_asm/asm_gc.s": "overlay/asm_gc.s",
		"call_asm/asm_gccgolang.s": "overlay/asm_gccgolang.s",
		"test_cache/main.golang": "overlay/test_cache.golang",
		"cgolang_hello_replace/cgolang_header.h": "overlay/cgolang_head.h",
		"cgolang_hello_replace/hello.c": "overlay/hello.c",
		"cgolang_hello_quote/cgolang_hello.golang": "overlay/cgolang_hello_quote.golang",
		"cgolang_hello_quote/cgolang_header.h": "overlay/cgolang_head.h",
		"cgolang_hello_angle/cgolang_hello.golang": "overlay/cgolang_hello_angle.golang",
		"cgolang_hello_angle/cgolang_header.h": "overlay/cgolang_head.h"
	}
}
-- m/cgolang_hello_replace/cgolang_hello_replace.golang --
package main

// #include "cgolang_header.h"
import "C"

func main() {
	C.say_hello()
}
-- m/cgolang_hello_replace/cgolang_header.h --
 // Test that this header is replaced with one that has the proper declaration.
void say_golangodbye();

-- m/cgolang_hello_replace/hello.c --
#include <stdio.h>

void say_golangodbye() { puts("golangodbye cgolang\n"); fflush(stdout); }

-- m/overlay/f.golang --
package main

import "m/dir2"

func main() {
	dir2.PrintMessage()
}
-- m/call_asm/main.golang --
package main

func foo() // There will be a "missing function body" error if the assembly file isn't found.

func main() {
	foo()
}
-- m/overlay/dir_g.golang --
package dir

import "fmt"

func PrintMessage() {
	fmt.Println("hello")
}
-- m/overlay/printpath.golang --
package main

import (
	"fmt"
	"path/filepath"
	"runtime"
)

func main() {
	_, file, _, _ := runtime.Caller(0)

	// Since https://golanglang.org/cl/214286, the runtime's debug paths are
	// slash-separated regardless of platform, so normalize them to system file
	// paths.
	fmt.Println(filepath.FromSlash(file))
}
-- m/overlay2/printpath2.golang --
package main

import (
	"fmt"
	"path/filepath"
	"runtime"
)

func init() {
	_, file, _, _ := runtime.Caller(0)
	fmt.Println(filepath.FromSlash(file))
}
-- m/overlay/dir2_i.golang --
package dir2

import "m/dir"

func printMessage() {
	dir.PrintMessage()
}
-- m/overlay/cgolang_hello_quote.golang --
package main

// #include "cgolang_header.h"
import "C"

func main() {
	C.say_hello()
}
-- m/overlay/cgolang_hello_angle.golang --
package main

// #include <cgolang_header.h>
import "C"

func main() {
	C.say_hello()
}
-- m/overlay/cgolang_head.h --
void say_hello();
-- m/overlay/hello.c --
#include <stdio.h>

void say_hello() { puts("hello cgolang\n"); fflush(stdout); }
-- m/overlay/asm_gc.s --
// +build gc

TEXT Â·foo(SB),0,$0
	RET

-- m/overlay/asm_gccgolang.s --
// +build gccgolang

.globl main.foo
.text
main.foo:
	ret

-- m/overlay/test_cache.golang --
package foo

import "fmt"

func bar() {
	fmt.Println("something")
}
-- m/overlay/test_cache_different.golang --
package foo

import "fmt"

func bar() {
	fmt.Println("different")
}
-- m/cgolang_hello_quote/hello.c --
#include <stdio.h>

void say_hello() { puts("hello cgolang\n"); fflush(stdout); }
-- m/cgolang_hello_angle/hello.c --
#include <stdio.h>

void say_hello() { puts("hello cgolang\n"); fflush(stdout); }

-- print_line_comments.golang --
package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

func main() {
	compiledGolangFilesArg := os.Args[1]
	b, err := ioutil.ReadFile(compiledGolangFilesArg)
	if err != nil {
		log.Fatal(err)
	}
	compiledGolangFiles := strings.Split(strings.TrimSpace(string(b)), "\n")
	for _, f := range compiledGolangFiles {
		b, err := ioutil.ReadFile(f)
		if err != nil {
			log.Fatal(err)
		}
		for _, line := range strings.Split(string(b), "\n") {
			if strings.HasPrefix(line, "#line") || strings.HasPrefix(line, "//line") {
				fmt.Println(line)
			}
		}
	}
}
