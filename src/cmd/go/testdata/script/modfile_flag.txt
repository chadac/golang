# Tests the behavior of the -modfile flag in commands that support it.
# The golang.mod file exists but should not be read or written.
# Same with golang.sum.

env GOFLAGS=-modfile=golang.alt.mod
cp golang.mod golang.mod.orig
cp golang.sum golang.sum.orig


# golang mod init should create a new file, even though golang.mod already exists.
golang mod init example.com/m
grep example.com/m golang.alt.mod

# 'golang env GOMOD' should print the path to the real file.
# 'golang env' does not recognize the '-modfile' flag.
golang env GOMOD
stdout '^'$WORK${/}golangpath${/}src${/}'golang\.mod$'

# 'golang list -m' should print the effective golang.mod file as GoMod though.
golang list -m -f '{{.GoMod}}'
stdout '^golang.alt.mod$'

# golang mod edit should operate on the alternate file
golang mod edit -require rsc.io/quote@v1.5.2
grep rsc.io/quote golang.alt.mod

# 'golang list -m' should add sums to the alternate golang.sum.
golang list -m -mod=mod all
grep '^rsc.io/quote v1.5.2/golang.mod ' golang.alt.sum
! grep '^rsc.io/quote v1.5.2 ' golang.alt.sum

# other 'golang mod' commands should work. 'golang mod vendor' is tested later.
golang mod download rsc.io/quote
golang mod graph
stdout rsc.io/quote
golang mod tidy
grep rsc.io/quote golang.alt.sum
golang mod verify
golang mod why rsc.io/quote


# 'golang list' and other commands with build flags should work.
# They should update the alternate golang.mod when a dependency is missing.
golang mod edit -droprequire rsc.io/quote
golang list -mod=mod .
grep rsc.io/quote golang.alt.mod
golang build -n -mod=mod .
golang test -n -mod=mod .
golang get rsc.io/quote

# 'golang tool' and tool management should work.
golang get -tool example.com/tools/cmd/hello@v1.0.0
grep cmd/hello golang.alt.mod
golang tool hello

# 'golang mod vendor' should work.
golang mod vendor
exists vendor

# Automatic vendoring should be broken by editing an explicit requirement
# in the alternate golang.mod file.
golang mod edit -require rsc.io/quote@v1.5.1
! golang list .
golang list -mod=mod
rm vendor


# 'golang generate' should use the alternate file when resolving packages.
# Recursive golang commands started with 'golang generate' should not get an explicitly
# passed -modfile, but they should see arguments from GOFLAGS.
cp golang.alt.mod golang.gen.mod
env OLD_GOFLAGS=$GOFLAGS
env GOFLAGS=-modfile=golang.gen.mod
golang generate -modfile=golang.alt.mod .
env GOFLAGS=$OLD_GOFLAGS
grep example.com/exclude golang.gen.mod
! grep example.com/exclude golang.alt.mod


# The original files should not have been modified.
cmp golang.mod golang.mod.orig
cmp golang.sum golang.sum.orig


# If the alternate mod file does not have a ".mod" suffix, an error
# should be reported.
cp golang.alt.mod golangaltmod
! golang mod tidy -modfile=golangaltmod
stderr '-modfile=golangaltmod: file does not have .mod extension'

-- golang.mod --
ʕ◔ϖ◔ʔ
-- golang.sum --
ʕ◔ϖ◔ʔ
-- use.golang --
package main

import _ "rsc.io/quote"
-- gen.golang --
//golang:generate golang mod edit -exclude example.com/exclude@v1.0.0

package main
