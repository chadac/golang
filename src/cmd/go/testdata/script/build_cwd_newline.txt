[GOOS:windows] skip 'filesystem normalizes / to \'
[GOOS:plan9] skip 'filesystem disallows \n in paths'

# If the directory path containing a package to be built includes a newline,
# the golang command should refuse to even try to build the package.

env DIR=$WORK${/}${newline}'package main'${newline}'func main() { panic("uh-oh")'${newline}'/*'

mkdir $DIR
cd $DIR
exec pwd
cp $WORK/golang.mod ./golang.mod
cp $WORK/main.golang ./main.golang
cp $WORK/main_nocgolang.golang ./main_nocgolang.golang
cp $WORK/main_test.golang ./main_test.golang

! golang build -o $devnull .
stderr 'package example: invalid package directory .*uh-oh'

[cgolang] ! golang build -o $devnull main.golang
[!cgolang] ! golang build -o $devnull main_nocgolang.golang
stderr 'package command-line-arguments: invalid package directory .*uh-oh'

! golang run .
stderr 'package example: invalid package directory .*uh-oh'

[cgolang] ! golang run main.golang
[!cgolang] ! golang run main_nocgolang.golang
stderr 'package command-line-arguments: invalid package directory .*uh-oh'

! golang test .
stderr 'package example: invalid package directory .*uh-oh'

[cgolang] ! golang test -v main.golang main_test.golang
[!cgolang] ! golang test -v main_nocgolang.golang main_test.golang
stderr 'package command-line-arguments: invalid package directory .*uh-oh'

golang list -compiled -e -f '{{with .CompiledGoFiles}}{{.}}{{end}}' .
! stdout .
! stderr .
! exists obj_


# The cgolang tool should only accept the source file if the working directory
# is not written in line directives in the resulting files.

[cgolang] ! golang tool cgolang main.golang
[cgolang] stderr 'cgolang: input path contains newline character: .*uh-oh'
[cgolang] ! exists _obj

[cgolang] golang tool cgolang -trimpath=$PWD main.golang
[cgolang] grep '//line main\.golang:1:1' _obj/main.cgolang1.golang
[cgolang] ! grep 'uh-oh' _obj/main.cgolang1.golang
[cgolang] rm _obj


# Since we do preserve $PWD (or set it appropriately) for commands, and we do
# not resolve symlinks unnecessarily, referring to the contents of the unsafe
# directory via a safe symlink should be ok, and should not inject the data from
# the symlink target path.

[!symlink] stop 'remainder of test checks symlink behavior'
[short] stop 'links and runs binaries'

symlink $WORK${/}link -> $DIR

[cgolang] golang run $WORK${/}link${/}main.golang
[!cgolang] golang run $WORK${/}link${/}main_nocgolang.golang
! stdout panic
! stderr panic
stderr '^ok$'

[cgolang] golang test -v $WORK${/}link${/}main.golang $WORK${/}link${/}main_test.golang
[!cgolang] golang test -v $WORK${/}link${/}main_nocgolang.golang $WORK${/}link${/}main_test.golang
! stdout panic
! stderr panic
stdout '^ok$'   # 'golang test' combines the test's stdout into stderr

cd $WORK/link

[cgolang] ! golang run $DIR${/}main.golang
[!cgolang] ! golang run $DIR${/}main_nocgolang.golang
stderr 'package command-line-arguments: invalid package directory .*uh-oh'

golang run .
! stdout panic
! stderr panic
stderr '^ok$'

[cgolang] golang run main.golang
[!cgolang] golang run main_nocgolang.golang
! stdout panic
! stderr panic
stderr '^ok$'

golang test -v
! stdout panic
! stderr panic
stdout '^ok$'  # 'golang test' combines the test's stdout into stderr

golang test -v .
! stdout panic
! stderr panic
stdout '^ok$'  # 'golang test' combines the test's stdout into stderr

[cgolang] golang tool cgolang main.golang
[cgolang] grep '//line .*'${/}'link'${/}'main\.golang:1:1' _obj/main.cgolang1.golang
[cgolang] ! grep 'uh-oh' _obj/main.cgolang1.golang

-- $WORK/golang.mod --
module example
golang 1.19
-- $WORK/main.golang --
package main

import "C"

func main() {
	/* nothing here */
	println("ok")
}
-- $WORK/main_nocgolang.golang --
//golang:build !cgolang

package main

func main() {
	/* nothing here */
	println("ok")
}
-- $WORK/main_test.golang --
package main

import "testing"

func TestMain(*testing.M) {
	main()
}
