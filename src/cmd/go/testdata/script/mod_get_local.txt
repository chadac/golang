# Test 'golang get' with a local module with a name that is not valid for network lookup.
[short] skip

env GO111MODULE=on
golang mod edit -fmt
cp golang.mod golang.mod.orig

# 'golang get -u' within the main module should work, even if it has a local-only name.
cp golang.mod.orig golang.mod
golang get -u ./...
grep 'rsc.io/quote.*v1.5.2' golang.mod
grep 'golanglang.org/x/text.*v0.3.0' golang.mod
cp golang.mod golang.mod.implicitmod

# 'golang get -u local/...' should be equivalent to 'golang get -u ./...'
# (assuming no nested modules)
cp golang.mod.orig golang.mod
golang get -u local/...
cmp golang.mod golang.mod.implicitmod

# For the main module, @patch should be a no-op.
cp golang.mod.orig golang.mod
golang get -u local/...@patch
cmp golang.mod golang.mod.implicitmod

# 'golang get -u' in the empty root of the main module should fail.
# 'golang get -u .' should also fail.
cp golang.mod.orig golang.mod
! golang get -u
! golang get -u .

# 'golang get -u .' within a package in the main module updates the dependencies
# of that package.
cp golang.mod.orig golang.mod
cd uselang
golang get -u .
cd ..
grep 'rsc.io/quote.*v1.3.0' golang.mod
grep 'golanglang.org/x/text.*v0.3.0' golang.mod
cp golang.mod golang.mod.dotpkg

# 'golang get -u' with an explicit package in the main module updates the
# dependencies of that package.
cp golang.mod.orig golang.mod
golang get -u local/uselang
cmp golang.mod golang.mod.dotpkg

-- golang.mod --
module local

require (
	golanglang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
	rsc.io/quote v1.3.0
)

-- uselang/uselang.golang --
package uselang
import _ "golanglang.org/x/text/language"

-- usequote/usequote.golang --
package usequote
import _ "rsc.io/quote"
