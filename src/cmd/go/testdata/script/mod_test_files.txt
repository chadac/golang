env GO111MODULE=on

cd foo

# Testing an explicit source file should use the same import visibility as the
# package in the same directory.
golang list -test -deps
golang list -test -deps foo_test.golang

# If the file is inside the main module's vendor directory, it should have
# visibility based on the vendor-relative import path.
mkdir vendor/example.com/foo
cp foo_test.golang vendor/example.com/foo
golang list -test -deps vendor/example.com/foo/foo_test.golang

# If the file is outside the main module entirely, it should be treated as outside.
cp foo_test.golang ../foo_test.golang
! golang list -test -deps ../foo_test.golang
stderr 'use of internal package'

-- foo/golang.mod --
module example.com/foo
golang 1.12
require example.com/internal v0.0.0
replace example.com/internal => ../internal

-- foo/internal.golang --
package foo
import _ "example.com/internal"

-- foo/foo_test.golang --
package foo_test

import (
	"testing"
	"example.com/internal"
)

func TestHacksEnabled(t *testing.T) {
	if !internal.Hacks {
		t.Fatal("hacks not enabled")
	}
}

-- internal/golang.mod --
module example.com/internal

-- internal/internal.golang --
package internal
const Hacks = true
