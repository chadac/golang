# golang list should skip 'ignore' directives
# See golanglang.org/issue/42965

env ROOT=$WORK${/}golangpath${/}src

# no ignore directive; should not skip any directories.
cp golang.mod.orig golang.mod
golang list -x ./...
stdout 'example/foo/secret'
stdout 'example/pkg/foo'
stdout 'example/pkg/fo$'
! stderr 'ignoring directory'

# ignored ./foo should be skipped.
cp golang.mod.relative golang.mod
golang list -x ./...
stdout 'example/pkg/foo'
stdout 'example/pkg/fo$'
! stdout 'example/foo/secret'
stderr 'ignoring directory '$ROOT''${/}'foo'
! stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'

# ignored foo; any foo should be skipped.
cp golang.mod.any golang.mod
golang list -x ./...
stdout 'example/pkg/fo$'
! stdout 'example/pkg/foo'
! stdout 'example/foo/secret'
stderr 'ignoring directory '$ROOT''${/}'foo'
stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'

# non-existent ignore; should not skip any directories.
cp golang.mod.dne golang.mod
golang list -x ./...
stdout 'example/foo/secret'
stdout 'example/pkg/foo'
stdout 'example/pkg/fo$'
! stderr 'ignoring directory'

# ignored fo; should not skip foo/ and should skip fo/
cp golang.mod.partial golang.mod
golang list -x ./...
! stderr 'ignoring directory '$ROOT''${/}'foo'
stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'fo$'
! stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'

# ignored pkg/foo; should skip pkg/foo/
cp golang.mod.tree golang.mod
golang list -x ./...
stdout 'example/foo/secret'
stdout 'example/pkg/fo$'
stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'

# ignored /pkg/foo/; should skip pkg/foo/
cp golang.mod.sep1 golang.mod
golang list -x ./...
stdout 'example/foo/secret'
stdout 'example/pkg/fo$'
stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'

# ignored pkg/foo/; should skip pkg/foo/
cp golang.mod.sep2 golang.mod
golang list -x ./...
stdout 'example/foo/secret'
stdout 'example/pkg/fo$'
stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'

# ignored /pkg/foo; should skip pkg/foo/
cp golang.mod.sep3 golang.mod
golang list -x ./...
stdout 'example/foo/secret'
stdout 'example/pkg/fo$'
stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'

-- foo/secret/secret.golang --
package secret

const Secret = "this should be ignored"
-- pkg/foo/foo.golang --
package foo

const Bar = "Hello from foo!"
-- pkg/fo/fo.golang --
package fo

const Gar = "Hello from fo!"
-- golang.mod.orig --
module example

golang 1.24

-- golang.mod.relative --
module example

golang 1.24

ignore ./foo

-- golang.mod.any --
module example

golang 1.24

ignore foo

-- golang.mod.dne --
module example

golang 1.24

ignore bar

-- golang.mod.partial --
module example

golang 1.24

ignore fo

-- golang.mod.tree --
module example

golang 1.24

ignore pkg/foo

-- golang.mod.sep1 --
module example

golang 1.24

ignore /pkg/foo/

-- golang.mod.sep2 --
module example

golang 1.24

ignore pkg/foo/

-- golang.mod.sep3 --
module example

golang 1.24

ignore /pkg/foo

-- main.golang --
package main

func main() {}
