# This test illustrates the use of a deepening scan to resolve transitive
# imports of imports of new packages from within existing dependencies.

# The package import graph used in this test looks like:
#
# lazy ---- a/x ---- b
#     \
#      ---- a/y (new) ---- c
#
# Where a/x and a/y are disjoint packages, but both contained in module a.
#
# The module dependency graph initially looks like:
#
# lazy ---- a.1 ---- b.1
#              \
#               c.1


cp golang.mod golang.mod.old
cp lazy.golang lazy.golang.old
golang mod tidy
cmp golang.mod golang.mod.old

# Before adding a new import, the golang.mod file should
# enumerate modules for all packages already imported.
golang list all
cmp golang.mod golang.mod.old

# When we add a new import of a package in an existing dependency,
# and that dependency is already tidy, its transitive dependencies
# should already be present.
cp lazy.golang.new lazy.golang
golang list all
golang list -m all
stdout '^example.com/c v0.1.0' # not v0.2.0 as would be resolved by 'latest'
cmp golang.mod golang.mod.old

# Now, we repeat the test with a lazy main module.
cp lazy.golang.old lazy.golang
cp golang.mod.117 golang.mod

# Before adding a new import, the golang.mod file should
# enumerate modules for all packages already imported.
golang list all
cmp golang.mod golang.mod.117

# When a new import is found, we should perform a deepening scan of the existing
# dependencies and add a requirement on the version required by those
# dependencies â€” not re-resolve 'latest'.
cp lazy.golang.new lazy.golang

! golang list all
stderr '^golang: updates to golang.mod needed; to update it:\n\tgolang mod tidy$'

golang mod tidy
golang list all
golang list -m all
stdout '^example.com/c v0.1.0' # not v0.2.0 as would be resolved by 'latest'

cmp golang.mod golang.mod.new


-- golang.mod --
module example.com/lazy

golang 1.15

require example.com/a v0.1.0

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
)
-- golang.mod.117 --
module example.com/lazy

golang 1.17

require example.com/a v0.1.0

require example.com/b v0.1.0 // indirect

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
)
-- golang.mod.new --
module example.com/lazy

golang 1.17

require example.com/a v0.1.0

require (
	example.com/b v0.1.0 // indirect
	example.com/c v0.1.0 // indirect
)

replace (
	example.com/a v0.1.0 => ./a
	example.com/b v0.1.0 => ./b
	example.com/c v0.1.0 => ./c1
	example.com/c v0.2.0 => ./c2
)
-- lazy.golang --
package lazy

import (
	_ "example.com/a/x"
)
-- lazy.golang.new --
package lazy

import (
	_ "example.com/a/x"
	_ "example.com/a/y"
)
-- a/golang.mod --
module example.com/a

golang 1.15

require (
	example.com/b v0.1.0
	example.com/c v0.1.0
)
-- a/x/x.golang --
package x
import _ "example.com/b"
-- a/y/y.golang --
package y
import _ "example.com/c"
-- b/golang.mod --
module example.com/b

golang 1.15
-- b/b.golang --
package b
-- c1/golang.mod --
module example.com/c

golang 1.15
-- c1/c.golang --
package c
-- c2/golang.mod --
module example.com/c

golang 1.15
-- c2/c.golang --
package c
This file should not be used, so this syntax error should be ignored.
