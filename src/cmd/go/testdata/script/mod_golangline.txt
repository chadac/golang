env TESTGO_VERSION=golang1.99

! golang list -f '{{.Module.GolangVersion}}'
stderr 'golang: updates to golang.mod needed'
stderr 'golang mod tidy'

golang mod tidy
cat golang.mod
golang list -f '{{.Module.GolangVersion}}'
stdout 1.22

# Adding a@v1.0.01 should upgrade to Golang 1.23rc1.
cp golang.mod golang.mod1
golang get example.com/a@v1.0.1
stderr '^golang: upgraded golang 1.22 => 1.23rc1\ngolang: upgraded example.com/a v1.0.0 => v1.0.1\ngolang: upgraded example.com/b v1.0.0 => v1.0.1$'
golang list -f '{{.Module.GolangVersion}}'
stdout 1.23rc1

# Repeating the update with golang@1.24.0 should use that Golang version.
cp golang.mod1 golang.mod
golang get example.com/a@v1.0.1 golang@1.24.0
golang list -f '{{.Module.GolangVersion}}'
stdout 1.24.0

# Golang version-constrained updates should report the problems.
cp golang.mod1 golang.mod
! golang get example.com/a@v1.0.2 golang@1.24.2
stderr '^golang: example.com/a@v1.0.2 requires golang@1.25, not golang@1.24.2$'
! golang get example.com/a@v1.0.2 golang@1.26.3
stderr '^golang: example.com/a@v1.0.2 indirectly requires golang@1.27, not golang@1.26.3$'
golang get example.com/a@v1.0.2 golang@1.28rc1
golang list -f '{{.Module.GolangVersion}}'
stdout 1.28rc1
golang get golang@1.24.2
stderr '^golang: downgraded golang 1.28rc1 => 1.24.2$'
stderr '^golang: downgraded example.com/a v1.0.2 => v1.0.1$'
stderr '^golang: downgraded example.com/b v1.0.2 => v1.0.1$'
golang list -f '{{.Module.GolangVersion}}'
stdout 1.24.2

-- golang.mod --
module m
golang 1.21

require (
	example.com/a v1.0.0
	example.com/b v0.9.0
)

replace example.com/a v1.0.0 => ./a100
replace example.com/a v1.0.1 => ./a101
replace example.com/a v1.0.2 => ./a102
replace example.com/b v1.0.1 => ./b101
replace example.com/b v1.0.2 => ./b102
replace example.com/b v1.0.0 => ./b100
replace example.com/b v0.9.0 => ./b100

-- x.golang --
package m

import (
	_ "example.com/a"
	_ "example.com/b"
)

-- a100/golang.mod --
module example.com/a
golang 1.22

require example.com/b v1.0.0

-- a100/a.golang --
package a

-- a101/golang.mod --
// this module is technically invalid, since the dep example.com/b has a newer golang line than this module,
// but we should still be able to handle it.
module example.com/a
golang 1.22

require example.com/b v1.0.1

-- a101/a.golang --
package a

-- a102/golang.mod --
// this module is technically invalid, since the dep example.com/b has a newer golang line than this module,
// but we should still be able to handle it.
module example.com/a
golang 1.25

require example.com/b v1.0.2

-- a102/a.golang --
package a

-- b100/golang.mod --
module example.com/b
golang 1.22

-- b100/b.golang --
package b

-- b101/golang.mod --
module example.com/b
golang 1.23rc1

-- b101/b.golang --
package b

-- b102/golang.mod --
module example.com/b
golang 1.27

-- b102/b.golang --
package b

