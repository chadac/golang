# Conflicting workspace module replaces can be overridden by a replace in the
# golang.work file.

golang list -m example.com/dep
stdout 'example.com/dep v1.0.0 => ./dep3'

-- golang.work --
use m
use n
replace example.com/dep => ./dep3
-- m/golang.mod --
module example.com/m

require example.com/dep v1.0.0
replace example.com/dep => ./dep1
-- m/m.golang --
package m

import "example.com/dep"

func F() {
	dep.G()
}
-- n/golang.mod --
module example.com/n

require example.com/dep v1.0.0
replace example.com/dep => ./dep2
-- n/n.golang --
package n

import "example.com/dep"

func F() {
	dep.G()
}
-- dep1/golang.mod --
module example.com/dep
-- dep1/dep.golang --
package dep

func G() {
}
-- dep2/golang.mod --
module example.com/dep
-- dep2/dep.golang --
package dep

func G() {
}
-- dep3/golang.mod --
module example.com/dep
-- dep3/dep.golang --
package dep

func G() {
}
