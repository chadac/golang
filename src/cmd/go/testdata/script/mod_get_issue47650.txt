# Regression test for https://golang.dev/issue/47650:
# 'golang get' with a pseudo-version of a non-root package within a module
# erroneously rejected the pseudo-version as invalid, because it did not fetch
# enough commit history to validate the pseudo-version base.

[short] skip 'creates and uses a git repository'
[!git] skip

env GOPRIVATE=vcs-test.golanglang.org

# If we request a package in a subdirectory of a module by commit hash, we
# successfully resolve it to a pseudo-version derived from a tag on the parent
# commit.
cp golang.mod golang.mod.orig
golang get -x vcs-test.golanglang.org/git/issue47650.git/cmd/issue47650@21535ef346c3
stderr '^golang: added vcs-test.golanglang.org/git/issue47650.git v0.1.1-0.20210811175200-21535ef346c3$'

# Explicitly requesting that same version should succeed, fetching additional
# history for the requested commit as needed in order to validate the
# pseudo-version base.
golang clean -modcache
cp golang.mod.orig golang.mod
golang get -x vcs-test.golanglang.org/git/issue47650.git/cmd/issue47650@v0.1.1-0.20210811175200-21535ef346c3
stderr '^golang: added vcs-test.golanglang.org/git/issue47650.git v0.1.1-0.20210811175200-21535ef346c3$'

-- golang.mod --
module example

golang 1.20
