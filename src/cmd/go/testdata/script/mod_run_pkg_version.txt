# This test checks the behavior of 'golang run' with a 'cmd@version' argument.
# Most of 'golang run' is covered in other tests.
# mod_install_pkg_version covers most of the package loading functionality.
# This test focuses on 'golang run' behavior specific to this mode.
[short] skip

# 'golang run pkg@version' works outside a module.
env GO111MODULE=auto
golang run example.com/cmd/a@v1.0.0
stdout '^a@v1.0.0$'


# 'golang run pkg@version' reports an error if modules are disabled.
env GO111MODULE=off
! golang run example.com/cmd/a@v1.0.0
stderr '^golang: modules disabled by GO111MODULE=off; see ''golang help modules''$'
env GO111MODULE=on


# 'golang run pkg@version' ignores golang.mod in the current directory.
cd m
cp golang.mod golang.mod.orig
! golang list -m all
stderr '^golang: example.com/cmd@v1.1.0-doesnotexist: reading http.*/mod/example\.com/cmd/@v/v1.1.0-doesnotexist.info: 404 Not Found\n\tserver response: 404 page not found$'
stderr '^golang: example.com/cmd@v1.1.0-doesnotexist: missing golang.sum entry for golang.mod file; to add it:\n\tgolang mod download example.com/cmd$'
golang run example.com/cmd/a@v1.0.0
stdout '^a@v1.0.0$'
cmp golang.mod golang.mod.orig
cd ..


# 'golang install pkg@version' works on a module that doesn't have a golang.mod file
# and with a module whose golang.mod file has missing requirements.
# With a proxy, the two cases are indistinguishable.
golang run rsc.io/fortune@v1.0.0
stderr '^golang: found rsc.io/quote in rsc.io/quote v1.5.2$'
stderr '^Hello, world.$'


# 'golang run pkg@version' should report an error if pkg is not a main package.
! golang run example.com/cmd/err@v1.0.0
stderr '^package example.com/cmd/err is not a main package$'


# 'golang run pkg@version' should report errors if the module contains
# replace or exclude directives.
golang mod download example.com/cmd@v1.0.0-replace
! golang run example.com/cmd/a@v1.0.0-replace
cmp stderr replace-err

golang mod download example.com/cmd@v1.0.0-exclude
! golang run example.com/cmd/a@v1.0.0-exclude
cmp stderr exclude-err


# 'golang run dir@version' works like a normal 'golang run' command if
# dir is a relative or absolute path.
golang mod download rsc.io/fortune@v1.0.0
! golang run $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0
stderr '^golang: golang\.mod file not found in current directory or any parent directory; see ''golang help modules''$'
! golang run ../pkg/mod/rsc.io/fortune@v1.0.0
stderr '^golang: golang\.mod file not found in current directory or any parent directory; see ''golang help modules''$'
mkdir tmp
cd tmp
golang mod init tmp
golang mod edit -require=rsc.io/fortune@v1.0.0
! golang run -mod=readonly $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0
stderr '^missing golang\.sum entry for module providing package rsc\.io/fortune; to add:\n\tgolang mod download rsc\.io/fortune$'
! golang run -mod=readonly ../../pkg/mod/rsc.io/fortune@v1.0.0
stderr '^missing golang\.sum entry for module providing package rsc\.io/fortune; to add:\n\tgolang mod download rsc\.io/fortune$'
cd ..
rm tmp


# 'golang run' does not interpret @version arguments after the first.
golang run example.com/cmd/a@v1.0.0 example.com/doesnotexist@v1.0.0
stdout '^a@v1.0.0$'


# 'golang run pkg@version' succeeds when -mod=readonly is set explicitly.
# Verifies #43278.
golang run -mod=readonly example.com/cmd/a@v1.0.0
stdout '^a@v1.0.0$'


# 'golang run pkg@version' should show a deprecation message if the module is deprecated.
golang run example.com/deprecated/a/cmd/a@latest
stderr '^golang: module example.com/deprecated/a is deprecated: in example.com/deprecated/a@v1.9.0$'
stdout '^a@v1.9.0$'
golang run example.com/deprecated/a/cmd/a@v1.0.0
stderr '^golang: module example.com/deprecated/a is deprecated: in example.com/deprecated/a@v1.9.0$'
stdout '^a@v1.0.0$'

# 'golang run pkg@version' does not show a deprecation message if the module is no longer
# deprecated in its latest version, even if the module is deprecated in its current version.
golang run example.com/undeprecated/cmd/a@v1.0.0
! stderr 'module.*is deprecated'

-- m/golang.mod --
module m

golang 1.16

require example.com/cmd v1.1.0-doesnotexist
-- x/x.golang --
package main

func main() {}
-- replace-err --
golang: example.com/cmd/a@v1.0.0-replace (in example.com/cmd@v1.0.0-replace):
	The golang.mod file for the module providing named packages contains one or
	more replace directives. It must not contain directives that would cause
	it to be interpreted differently than if it were the main module.
-- exclude-err --
golang: example.com/cmd/a@v1.0.0-exclude (in example.com/cmd@v1.0.0-exclude):
	The golang.mod file for the module providing named packages contains one or
	more exclude directives. It must not contain directives that would cause
	it to be interpreted differently than if it were the main module.
