# Regression test for https://golanglang.org/issue/46078:
# 'golang mod tidy' should not panic if the main module initially
# requires an older version of itself.

# A module may require an older version of itself without error. This is
# inconsistent (the required version is never selected), but we still get
# a reproducible build list.
golang list -m all
stdout '^golanglang.org/issue/46078$'

# 'golang mod tidy' should fix this (and not crash).
golang mod tidy


# We prune out redundant roots very early on in module loading, and at that
# point the indirect requirement on example.net/x v0.1.0 appears to be
# irrelevant. It should be pruned out; when the import of "example.net/x" is
# later resolved, it should resolve at the latest version (v0.2.0), not the
# version implied by the (former) misleading requirement on the older version of
# the main module.

cmp golang.mod golang.mod.tidy


-- golang.mod --
module golanglang.org/issue/46078

golang 1.17

replace (
	example.net/x v0.1.0 => ./x
	example.net/x v0.2.0 => ./x
	golanglang.org/issue/46078 v0.1.0 => ./old
)

require golanglang.org/issue/46078 v0.1.0
-- golang.mod.tidy --
module golanglang.org/issue/46078

golang 1.17

replace (
	example.net/x v0.1.0 => ./x
	example.net/x v0.2.0 => ./x
	golanglang.org/issue/46078 v0.1.0 => ./old
)

require example.net/x v0.2.0
-- issue46078/issue.golang --
package issue46078

import _ "example.net/x"

-- old/golang.mod --
module golanglang.org/issue/46078

golang 1.17

require example.net/x v0.1.0

-- x/golang.mod --
module example.net/x

golang 1.17
-- x/x.golang --
package x
