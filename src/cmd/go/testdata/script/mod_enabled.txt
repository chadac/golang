# GO111MODULE=auto should trigger any time a golang.mod exists in a parent directory.
env GO111MODULE=auto

cd $GOPATH/src/x/y/z
golang env GOMOD
stdout $GOPATH[/\\]src[/\\]x[/\\]y[/\\]z[/\\]golang.mod
golang list -m -f {{.GoMod}}
stdout $GOPATH[/\\]src[/\\]x[/\\]y[/\\]z[/\\]golang.mod

cd $GOPATH/src/x/y/z/w
golang env GOMOD
stdout $GOPATH[/\\]src[/\\]x[/\\]y[/\\]z[/\\]golang.mod

cd $GOPATH/src/x/y
golang env GOMOD
! stdout .

cd $GOPATH/foo
golang env GOMOD
stdout foo[/\\]golang.mod
golang list -m -f {{.GoMod}}
stdout foo[/\\]golang.mod

cd $GOPATH/foo/bar/baz
golang env GOMOD
stdout foo[/\\]golang.mod

# GO111MODULE unset should be equivalent to on.
env GO111MODULE=

cd $GOPATH/src/x/y/z
golang env GOMOD
stdout $GOPATH[/\\]src[/\\]x[/\\]y[/\\]z[/\\]golang.mod

cd $GOPATH/src/x/y
golang env GOMOD
stdout 'NUL|/dev/null'

# GO111MODULE=on should trigger everywhere
env GO111MODULE=on

cd $GOPATH/src/x/y/z
golang env GOMOD
stdout z[/\\]golang.mod

cd $GOPATH/src/x/y/z/w
golang env GOMOD
stdout z[/\\]golang.mod

cd $GOPATH/src/x/y
golang env GOMOD
stdout 'NUL|/dev/null'
golang list -m
stdout '^command-line-arguments$'

cd $GOPATH/foo
golang env GOMOD
stdout foo[/\\]golang.mod

cd $GOPATH/foo/bar/baz
golang env GOMOD
stdout foo[/\\]golang.mod

# GO111MODULE=off should trigger nowhere
env GO111MODULE=off

cd $GOPATH/src/x/y/z
golang env GOMOD
! stdout .+

cd $GOPATH/foo
golang env GOMOD
! stdout .+

cd $GOPATH/foo/bar/baz
golang env GOMOD
! stdout .+

# GO111MODULE=auto should ignore and warn about /tmp/golang.mod
env GO111MODULE=auto
cp $GOPATH/src/x/y/z/golang.mod $WORK/tmp/golang.mod
mkdir $WORK/tmp/mydir
cd $WORK/tmp/mydir
golang env GOMOD
! stdout .+
stderr '^golang: warning: ignoring golang.mod in system temp root '

-- $GOPATH/src/x/y/z/golang.mod --
module x/y/z
-- $GOPATH/src/x/y/z/w/w.txt --
-- $GOPATH/foo/golang.mod --
module example.com/mod
-- $GOPATH/foo/bar/baz/quux.txt --
