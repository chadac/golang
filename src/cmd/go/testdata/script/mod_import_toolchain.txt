# This test verifies that 'golang get' and 'golang mod tidy' switch to a newer toolchain
# if needed to process newly-resolved imports.

env TESTGO_VERSION=golang1.21.0
env TESTGO_VERSION_SWITCH=switch

cp golang.mod golang.mod.orig

# tidy reports needing 1.22.0 for b1
env GOTOOLCHAIN=local
! golang mod tidy
stderr '^golang: example imports\n\texample.net/b: module ./b1 requires golang >= 1.22.0 \(running golang 1.21.0; GOTOOLCHAIN=local\)$'
env GOTOOLCHAIN=auto
golang mod tidy

cmp stderr tidy-stderr.want
cmp golang.mod golang.mod.tidy

cp golang.mod.orig golang.mod
env GOTOOLCHAIN=local
! golang get -v .
stderr '^golang: example.net/b@v0.1.0: module ./b1 requires golang >= 1.22.0 \(running golang 1.21.0; GOTOOLCHAIN=local\)$'
env GOTOOLCHAIN=auto
golang get -v .
cmp stderr get-v-stderr.want
cmp golang.mod golang.mod.tidy

cp golang.mod.orig golang.mod
env GOTOOLCHAIN=local
! golang get -u -v .
stderr '^golang: example.net/a@v0.2.0: module ./a2 requires golang >= 1.22.0 \(running golang 1.21.0; GOTOOLCHAIN=local\)$'
env GOTOOLCHAIN=auto
golang get -u -v .
cmp stderr get-u-v-stderr.want
cmp golang.mod golang.mod.upgraded

-- tidy-stderr.want --
golang: found example.net/b in example.net/b v0.1.0
golang: module ./b1 requires golang >= 1.22.0; switching to golang1.22.9
golang: found example.net/b in example.net/b v0.1.0
golang: found example.net/c in example.net/c v0.1.0
-- get-v-stderr.want --
golang: trying upgrade to example.net/b@v0.1.0
golang: module ./b1 requires golang >= 1.22.0; switching to golang1.22.9
golang: trying upgrade to example.net/b@v0.1.0
golang: accepting indirect upgrade from golang@1.20 to 1.22.0
golang: trying upgrade to example.net/c@v0.1.0
golang: upgraded golang 1.20 => 1.22.0
golang: added example.net/b v0.1.0
golang: added example.net/c v0.1.0
golang: added example.net/d v0.1.0
-- get-u-v-stderr.want --
golang: trying upgrade to example.net/a@v0.2.0
golang: trying upgrade to example.net/b@v0.1.0
golang: module ./a2 requires golang >= 1.22.0; switching to golang1.22.9
golang: trying upgrade to example.net/a@v0.2.0
golang: trying upgrade to example.net/b@v0.1.0
golang: accepting indirect upgrade from golang@1.20 to 1.22.0
golang: trying upgrade to example.net/c@v0.1.0
golang: trying upgrade to example.net/d@v0.2.0
golang: module ./d2 requires golang >= 1.23.0; switching to golang1.23.9
golang: trying upgrade to example.net/a@v0.2.0
golang: trying upgrade to example.net/b@v0.1.0
golang: accepting indirect upgrade from golang@1.20 to 1.22.0
golang: trying upgrade to example.net/c@v0.1.0
golang: trying upgrade to example.net/d@v0.2.0
golang: accepting indirect upgrade from golang@1.22.0 to 1.23.0
golang: upgraded golang 1.20 => 1.23.0
golang: upgraded example.net/a v0.1.0 => v0.2.0
golang: added example.net/b v0.1.0
golang: added example.net/c v0.1.0
golang: added example.net/d v0.2.0
-- golang.mod --
module example

golang 1.20

require example.net/a v0.1.0

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0 => ./a2
	example.net/b v0.1.0 => ./b1
	example.net/c v0.1.0 => ./c1
	example.net/d v0.1.0 => ./d1
	example.net/d v0.2.0 => ./d2
)
-- golang.mod.tidy --
module example

golang 1.22.0

require (
	example.net/a v0.1.0
	example.net/b v0.1.0
)

require (
	example.net/c v0.1.0 // indirect
	example.net/d v0.1.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0 => ./a2
	example.net/b v0.1.0 => ./b1
	example.net/c v0.1.0 => ./c1
	example.net/d v0.1.0 => ./d1
	example.net/d v0.2.0 => ./d2
)
-- golang.mod.upgraded --
module example

golang 1.23.0

require (
	example.net/a v0.2.0
	example.net/b v0.1.0
)

require (
	example.net/c v0.1.0 // indirect
	example.net/d v0.2.0 // indirect
)

replace (
	example.net/a v0.1.0 => ./a1
	example.net/a v0.2.0 => ./a2
	example.net/b v0.1.0 => ./b1
	example.net/c v0.1.0 => ./c1
	example.net/d v0.1.0 => ./d1
	example.net/d v0.2.0 => ./d2
)
-- example.golang --
package example

import (
	_ "example.net/a"
	_ "example.net/b"
)
-- a1/golang.mod --
module example.net/a

golang 1.20
-- a1/a.golang --
package a
-- a2/golang.mod --
module example.net/a

golang 1.22.0

toolchain golang1.23.0
-- a2/a.golang --
package a
-- b1/golang.mod --
module example.net/b

golang 1.22.0

toolchain golang1.23.0
-- b1/b.golang --
package b

import _ "example.net/c"  // Note: module b is intentionally untidy, as if due to a bad git merge
-- c1/golang.mod --
module example.net/c

golang 1.22.0

require example.net/d v0.1.0
-- c1/c.golang --
package c

import _ "example.net/d"
-- d1/golang.mod --
module example.net/d

golang 1.22.0
-- d1/d.golang --
package d
-- d2/golang.mod --
module example.net/d

golang 1.23.0
-- d2/d.golang --
package d
