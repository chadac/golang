[!fuzz] skip
[short] skip
env GOCACHE=$WORK/cache

# Matches only fuzz targets to test.
golang test standalone_fuzz_test.golang
! stdout '^ok.*\[no tests to run\]'
stdout '^ok'

# Matches only for fuzzing.
golang test -fuzz Fuzz -fuzztime 1x standalone_fuzz_test.golang
! stdout '^ok.*\[no tests to run\]'
stdout '^ok'

# Matches none for fuzzing but will run the fuzz target as a test.
golang test -fuzz ThisWillNotMatch -fuzztime 1x standalone_fuzz_test.golang
! stdout '^ok.*no tests to run'
stdout '^ok'
stdout 'no fuzz tests to fuzz'

[short] stop

# Matches only fuzz targets to test with -run.
golang test -run Fuzz standalone_fuzz_test.golang
! stdout '^ok.*\[no tests to run\]'
stdout '^ok'

# Matches no fuzz targets.
golang test -run ThisWillNotMatch standalone_fuzz_test.golang
stdout '^ok.*no tests to run'
! stdout 'no fuzz tests to fuzz'

-- standalone_fuzz_test.golang --
package standalone_fuzz

import "testing"

func Fuzz(f *testing.F) {
	f.Fuzz(func (*testing.T, []byte) {})
}
