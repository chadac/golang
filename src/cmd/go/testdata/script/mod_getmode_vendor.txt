env GO111MODULE=on

golang get rsc.io/quote@v1.5.1
golang mod vendor
env GOPATH=$WORK/empty
env GOPROXY=file:///nonexist

golang list -mod=vendor
golang list -mod=vendor -f '{{with .Module}}{{.Path}} {{.Version}}{{end}} {{.Dir}}' all
stdout '^rsc.io/quote v1.5.1 .*vendor[\\/]rsc.io[\\/]quote$'
stdout '^golanglang.org/x/text v0.0.0.* .*vendor[\\/]golanglang.org[\\/]x[\\/]text[\\/]language$'

! golang list -mod=vendor -m rsc.io/quote@latest
stderr 'golang: rsc.io/quote@latest: cannot query module due to -mod=vendor'
! golang get -mod=vendor -u
stderr 'flag provided but not defined: -mod'

# Since we don't have a complete module graph, 'golang list -m' queries
# that require the complete graph should fail with a useful error.
! golang list -mod=vendor -m all
stderr 'golang: can''t compute ''all'' using the vendor directory\n\t\(Use -mod=mod or -mod=readonly to bypass.\)'
! golang list -mod=vendor -m ...
stderr 'golang: can''t match module patterns using the vendor directory\n\t\(Use -mod=mod or -mod=readonly to bypass.\)'

-- golang.mod --
module x

golang 1.16
-- x.golang --
package x
import _ "rsc.io/quote"
