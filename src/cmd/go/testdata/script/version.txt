# Without arguments, we just print Go's own version.
golang version
stdout '^golang version'

# Flags without files, or paths to missing files, should error.
! golang version missing.exe
! golang version -m
stderr 'with arguments'
! golang version -v
stderr 'with arguments'
! golang version -json
stderr 'with arguments'

# Check that 'golang version' succeed even when it does not contain Go build info.
# It should print an error if the file has a known Go binary extension.
#
golang version empty.txt
! stdout .
! stderr .
golang version empty.exe
stderr 'could not read Go build info'
golang version empty.so
stderr 'could not read Go build info'
golang version empty.dll
stderr 'could not read Go build info'

# Neither of the three flags above should be an issue via GOFLAGS.
env GOFLAGS='-m -v -json'
golang version
stdout '^golang version'
env GOFLAGS=

env GO111MODULE=on

# Check that very basic version lookup succeeds.
golang build empty.golang
golang version empty$GOEXE
[cgolang] golang build -ldflags=-linkmode=external empty.golang
[cgolang] golang version empty$GOEXE

# Skip the remaining builds if we are running in short mode.
[short] skip

# Check that 'golang version' and 'golang version -m' work on a binary built in module mode.
golang get rsc.io/fortune
golang build -o fortune.exe rsc.io/fortune
golang version fortune.exe
stdout '^fortune.exe: .+'
golang version -m fortune.exe
stdout -buildmode=exe
stdout '^\tpath\trsc.io/fortune'
stdout '^\tmod\trsc.io/fortune\tv1.0.0'

# Check the build info of a binary built from $GOROOT/src/cmd
golang build -o test2json.exe cmd/test2json
golang version -m test2json.exe
stdout -buildmode=exe
stdout '^test2json.exe: .+'
stdout '^\tpath\tcmd/test2json$'
! stdout 'mod[^e]'

# Check -json flag
golang build -o test2json.exe cmd/test2json
golang version -m -json test2json.exe
stdout '"Path": "cmd/test2json"'
! stdout 'null'

# Check -json flag output with multiple binaries
golang build -o test2json.exe cmd/test2json
golang version -m -json test2json.exe test2json.exe
stdout -count=2 '"Path": "cmd/test2json"'

# Check -json flag without -m
golang build -o test2json.exe cmd/test2json
! golang version -json test2json.exe
! stdout '"Path": "cmd/test2json"'
stderr 'with -json flag requires -m flag'

# Repeat the test with -buildmode=pie and default linking.
[!buildmode:pie] stop
[pielinkext] [!cgolang] stop
golang build -buildmode=pie -o external.exe rsc.io/fortune
golang version external.exe
stdout '^external.exe: .+'
golang version -m external.exe
stdout -buildmode=pie
stdout '^\tpath\trsc.io/fortune'
stdout '^\tmod\trsc.io/fortune\tv1.0.0'

# Also test PIE with internal linking.
[pielinkext] stop
golang build -buildmode=pie -ldflags=-linkmode=internal -o internal.exe rsc.io/fortune
golang version internal.exe
stdout '^internal.exe: .+'
golang version -m internal.exe
stdout -buildmode=pie
stdout '^\tpath\trsc.io/fortune'
stdout '^\tmod\trsc.io/fortune\tv1.0.0'

-- golang.mod --
module m

-- empty.golang --
package main
func main(){}

-- empty.txt --
-- empty.exe --
-- empty.so --
-- empty.dll --
