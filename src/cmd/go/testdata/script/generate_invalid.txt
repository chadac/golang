[short] skip

# Install an echo command because Windows doesn't have it.
env GOBIN=$WORK/tmp/bin
golang install echo.golang
env PATH=$GOBIN${:}$PATH

# Test golang generate for directory with no golang files
! golang generate ./nogolang
! stdout 'Fail'
stderr 'no Golang files'

# Test golang  generate for module which doesn't exist should fail
! golang generate foo.bar/nothing
stderr 'no required module provides package foo.bar/nothing'

# Test golang generate for package where all .golang files are excluded by build
# constraints
golang generate -v ./excluded
! stdout 'Fail'
! stderr 'golang' # -v shouldn't list any files

# Test golang generate for "package" with no package clause in any file
golang generate ./nopkg
stdout 'Success a'
! stdout 'Fail'

# Test golang generate for package with inconsistent package clauses
# $GOPACKAGE should depend on each file's package clause
golang generate ./inconsistent
stdout 'Success a'
stdout 'Success b'
stdout -count=2 'Success c'
! stdout 'Fail'

# Test golang generate for syntax errors before and after package clauses
golang generate ./syntax
stdout 'Success a'
stdout 'Success b'
! stdout 'Fail'

# Test golang generate for files importing non-existent packages
golang generate ./importerr
stdout 'Success a'
stdout 'Success b'
stdout 'Success c'

-- echo.golang --
package main

import (
	"fmt"
	"os"
	"strings"
)

func main() {
	fmt.Println(strings.Join(os.Args[1:], " "))
	fmt.Println()
}

-- golang.mod --
module m

golang 1.16
-- nogolang/foo.txt --
Text file in a directory without golang files.
Golang generate should ignore this directory.
//golang:generate echo Fail nogolang

-- excluded/a.golang --
// Include a build tag that golang generate should exclude.
// Golang generate should ignore this file.

// +build a

//golang:generate echo Fail a

package excluded

-- excluded/b.golang --
// Include a build tag that golang generate should exclude.
// Golang generate should ignore this file.

//golang:generate echo Fail b

// +build b

package excluded


-- nopkg/a.golang --
// Golang file with package clause after comment.
// Golang generate should process this file.

/* Pre-comment */ package nopkg
//golang:generate echo Success a

-- nopkg/b.golang --
// Golang file with commented package clause.
// Golang generate should ignore this file.

//package nopkg

//golang:generate echo Fail b

-- nopkg/c.golang --
// Golang file with package clause inside multiline comment.
// Golang generate should ignore this file.

/*
package nopkg
*/

//golang:generate echo Fail c

-- nopkg/d.golang --
// Golang file with package clause inside raw string literal.
// Golang generate should ignore this file.

const foo = `
package nopkg
`
//golang:generate echo Fail d

-- nopkg/e.golang --
// Golang file without package clause.
// Golang generate should ignore this file.

//golang:generate echo Fail e

-- inconsistent/a.golang --
// Valid golang file with inconsistent package name.
// Golang generate should process this file with GOPACKAGE=a

package a
//golang:generate echo Success $GOPACKAGE

-- inconsistent/b.golang --
// Valid golang file with inconsistent package name.
// Golang generate should process this file with GOPACKAGE=b

//golang:generate echo Success $GOPACKAGE
package b

-- inconsistent/c.golang --
// Golang file with two package clauses.
// Golang generate should process this file with GOPACKAGE=c

//golang:generate echo Success $GOPACKAGE
package c
// Invalid package clause, should be ignored:
package cinvalid
//golang:generate echo Success $GOPACKAGE

-- inconsistent/d.golang --
// Golang file with invalid package name.
// Golang generate should ignore this file.

package +d+
//golang:generate echo Fail $GOPACKAGE

-- syntax/a.golang --
// Golang file with syntax error after package clause.
// Golang generate should process this file.

package syntax
123
//golang:generate echo Success a

-- syntax/b.golang --
// Golang file with syntax error after package clause.
// Golang generate should process this file.

package syntax; 123
//golang:generate echo Success b

-- syntax/c.golang --
// Golang file with syntax error before package clause.
// Golang generate should ignore this file.

foo
package syntax
//golang:generate echo Fail c

-- importerr/a.golang --
// Golang file which imports non-existing package.
// Golang generate should process this file.

package importerr
//golang:generate echo Success a
import "foo"

-- importerr/b.golang --
// Golang file which imports non-existing package.
// Golang generate should process this file.

//golang:generate echo Success b
package importerr
import "bar"

-- importerr/c.golang --
// Golang file which imports non-existing package.
// Golang generate should process this file.

package importerr
import "moo"
//golang:generate echo Success c
