# Check that with -mod=readonly, when we load a package in a module that is
# replaced but not required, we emit an error with the command to add the
# requirement.
# Verifies golanglang.org/issue/41416, golanglang.org/issue/41577.
cp golang.mod golang.mod.orig

# Replace all versions of a module without requiring it.
# With -mod=mod, we'd add a requirement for a "zero" pseudo-version, but we
# can't in readonly mode, since its golang.mod may alter the build list.
golang mod edit -replace rsc.io/quote=./quote
! golang list rsc.io/quote
stderr '^module rsc.io/quote provides package rsc.io/quote and is replaced but not required; to add it:\n\tgolang get rsc.io/quote$'
golang get rsc.io/quote
cmp golang.mod golang.mod.latest
golang list rsc.io/quote
cp golang.mod.orig golang.mod

# Same test with a specific version.
golang mod edit -replace rsc.io/quote@v1.0.0-doesnotexist=./quote
! golang list rsc.io/quote
stderr '^module rsc.io/quote provides package rsc.io/quote and is replaced but not required; to add it:\n\tgolang get rsc.io/quote@v1.0.0-doesnotexist$'
golang get rsc.io/quote@v1.0.0-doesnotexist
cmp golang.mod golang.mod.specific
golang list rsc.io/quote
cp golang.mod.orig golang.mod

# If there are multiple versions, the highest is suggested.
golang mod edit -replace rsc.io/quote@v1.0.0-doesnotexist=./quote
golang mod edit -replace rsc.io/quote@v1.1.0-doesnotexist=./quote
! golang list rsc.io/quote
stderr '^module rsc.io/quote provides package rsc.io/quote and is replaced but not required; to add it:\n\tgolang get rsc.io/quote@v1.1.0-doesnotexist$'

-- golang.mod --
module m

golang 1.16
-- golang.mod.latest --
module m

golang 1.16

replace rsc.io/quote => ./quote

require rsc.io/quote v1.5.2 // indirect
-- golang.mod.specific --
module m

golang 1.16

replace rsc.io/quote v1.0.0-doesnotexist => ./quote

require rsc.io/quote v1.0.0-doesnotexist // indirect
-- use.golang --
package use

import _ "rsc.io/quote"
-- quote/golang.mod --
module rsc.io/quote

golang 1.16
-- quote/quote.golang --
package quote
