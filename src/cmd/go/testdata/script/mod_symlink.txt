env GO111MODULE=on
[!symlink] skip

# 'golang get' should resolve modules of imported packages.
golang get
golang list -deps -f '{{.Module}}' .
stdout golanglang.org/x/text

golang get ./subpkg
golang list -deps -f '{{.Module}}' ./subpkg
stdout golanglang.org/x/text

# Create a copy of the module using symlinks in src/links.
mkdir links
symlink links/golang.mod -> $GOPATH/src/golang.mod
symlink links/golang.sum -> $GOPATH/src/golang.sum
symlink links/issue.golang -> $GOPATH/src/issue.golang
mkdir links/subpkg
symlink links/subpkg/issue.golang -> $GOPATH/src/subpkg/issue.golang

# We should see the copy as a valid module root.
cd links
golang env GOMOD
stdout links[/\\]golang.mod
golang list -m
stdout golanglang.org/issue/28107

# The symlink-based copy should contain the same packages
# and have the same dependencies as the original.
golang list -deps -f '{{.Module}}' .
stdout golanglang.org/x/text
golang list -deps -f '{{.Module}}' ./subpkg
stdout golanglang.org/x/text

-- golang.mod --
module golanglang.org/issue/28107

-- issue.golang --
package issue

import _ "golanglang.org/x/text/language"
-- subpkg/issue.golang --
package issue

import _ "golanglang.org/x/text/language"
