env GO111MODULE=on
[short] skip

# This script tests commands in module mode outside of any module.
#
# First, ensure that we really are in module mode, and that we really don't have
# a golang.mod file.
golang env GOMOD
stdout 'NUL|/dev/null'


# 'golang list' without arguments implicitly operates on the current directory,
# which is not in a module.
! golang list
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'
golang list -m
stdout '^command-line-arguments$'
# 'golang list' in the working directory should fail even if there is a a 'package
# main' present: without a main module, we do not know its package path.
! golang list ./needmod
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

# 'golang list all' lists the transitive import graph of the main module,
# which is empty if there is no main module.
golang list all
! stdout .
stderr 'warning: "all" matched no packages'

# 'golang list' on standard-library packages should work, since they do not depend
# on the contents of any module.
golang list -deps cmd
stdout '^fmt$'
stdout '^cmd/golang$'

golang list $GOROOT/src/fmt
stdout '^fmt$'

# 'golang list' should work with file arguments.
golang list ./needmod/needmod.golang
stdout 'command-line-arguments'

# 'golang list' on a package from a module should fail.
! golang list example.com/printversion
stderr '^no required module provides package example.com/printversion: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'


# 'golang list -m' with an explicit version should resolve that version.
golang list -m example.com/version@latest
stdout 'example.com/version v1.1.0'

# 'golang list -m -versions' should succeed even without an explicit version.
golang list -m -versions example.com/version
stdout 'v1.0.0\s+v1.0.1\s+v1.1.0'

# 'golang list -m all' should fail. "all" is not meaningful outside of a module.
! golang list -m all
stderr 'golang: cannot match "all": golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

# 'golang list -m <mods> all' should also fail.
! golang list -m example.com/printversion@v1.0.0 all
stderr 'golang: cannot match "all": golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'
! stdout 'example.com/version'

# 'golang list -m <mods>' should fail if any of the mods lacks an explicit version.
! golang list -m example.com/printversion
stderr 'golang: cannot match "example.com/printversion" without -versions or an explicit version: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'
! stdout 'example.com/version'

# 'golang list -m' with wildcards should fail. Wildcards match modules in the
# build list, so they aren't meaningful outside a module.
! golang list -m ...
stderr 'golang: cannot match "...": golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'
! golang list -m rsc.io/quote/...
stderr 'golang: cannot match "rsc.io/quote/...": golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'


# 'golang clean' should skip the current directory if it isn't in a module.
golang clean -n
! stdout .
! stderr .

# 'golang mod graph' should fail, since there's no module graph.
! golang mod graph
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

# 'golang mod why' should fail, since there is no main module to depend on anything.
! golang mod why -m example.com/version
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

# 'golang mod edit', 'golang mod tidy', and 'golang mod fmt' should fail:
# there is no golang.mod file to edit.
! golang mod tidy
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'
! golang mod edit -fmt
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'
! golang mod edit -require example.com/version@v1.0.0
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'


# 'golang mod download' without arguments should report an error.
! golang mod download
stderr 'no modules specified'

# 'golang mod download' should download exactly the requested module without dependencies.
rm -r $GOPATH/pkg/mod/cache/download/example.com
golang mod download example.com/printversion@v1.0.0
exists $GOPATH/pkg/mod/cache/download/example.com/printversion/@v/v1.0.0.zip
! exists $GOPATH/pkg/mod/cache/download/example.com/version/@v/v1.0.0.zip

# 'golang mod download all' should fail. "all" is not meaningful outside of a module.
! golang mod download all
stderr 'golang: cannot match "all": golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'


# 'golang mod vendor' should fail: it starts by clearing the existing vendor
# directory, and we don't know where that is.
! golang mod vendor
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'


# 'golang mod verify' should fail: we have no modules to verify.
! golang mod verify
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'


# 'golang get' has no golang.mod file to update outside a module and should fail.
! golang get
stderr '^golang: golang.mod file not found in current directory or any parent directory.$'
stderr '^\t''golang get'' is no longer supported outside a module.$'
! golang get -u
stderr '^golang: golang.mod file not found in current directory or any parent directory.$'
stderr '^\t''golang get'' is no longer supported outside a module.$'
! golang get -u ./needmod
stderr '^golang: golang.mod file not found in current directory or any parent directory.$'
stderr '^\t''golang get'' is no longer supported outside a module.$'
! golang get -u all
stderr '^golang: golang.mod file not found in current directory or any parent directory.$'
stderr '^\t''golang get'' is no longer supported outside a module.$'
! golang get example.com/printversion@v1.0.0 example.com/version@none
stderr '^golang: golang.mod file not found in current directory or any parent directory.$'
stderr '^\t''golang get'' is no longer supported outside a module.$'

# 'golang get' should not download anything.
golang clean -modcache
! golang get example.com/printversion@v1.0.0
stderr '^golang: golang.mod file not found in current directory or any parent directory.$'
stderr '^\t''golang get'' is no longer supported outside a module.$'
! exists $GOPATH/pkg/mod/example.com/printversion@v1.0.0
! exists $GOPATH/pkg/mod/example.com/version@v1.0.0


# 'golang build' without arguments implicitly operates on the current directory, and should fail.
cd needmod
! golang build
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'
cd ..

# 'golang build' of a non-module directory should fail too.
! golang build ./needmod
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

# 'golang build' of source files should fail if they import anything outside std.
! golang build -n ./needmod/needmod.golang
stderr '^needmod[/\\]needmod.golang:10:2: no required module provides package example.com/version: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

# 'golang build' of source files should succeed if they do not import anything outside std.
golang build -n -o ignore ./stdonly/stdonly.golang

# 'golang build' should succeed for standard-library packages.
golang build -n fmt

# 'golang build' should use the latest version of the Golang language.
golang build ./newgolang/newgolang.golang

# 'golang doc' without arguments implicitly operates on the current directory, and should fail.
# TODO(golanglang.org/issue/32027): currently, it succeeds.
cd needmod
golang doc
cd ..

# 'golang doc' of a non-module directory should also succeed.
golang doc ./needmod

# 'golang doc' should succeed for standard-library packages.
golang doc fmt

# 'golang doc' should fail for a package path outside a module.
! golang doc example.com/version
stderr 'doc: no required module provides package example.com/version: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

# 'golang install' with a version should succeed if all constraints are met.
# See mod_install_pkg_version.
rm $GOPATH/bin
golang install example.com/printversion@v0.1.0
exists $GOPATH/bin/printversion$GOEXE

# 'golang install' should fail if a package argument must be resolved to a module.
! golang install example.com/printversion
stderr '^golang: ''golang install'' requires a version when current directory is not in a module\n\tTry ''golang install example.com/printversion@latest'' to install the latest version$'

# 'golang install' should fail if a source file imports a package that must be
# resolved to a module.
! golang install ./needmod/needmod.golang
stderr 'needmod[/\\]needmod.golang:10:2: no required module provides package example.com/version: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

# 'golang run' should fail if a package argument must be resolved to a module.
! golang run example.com/printversion
stderr '^no required module provides package example.com/printversion: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

# 'golang run' should fail if a source file imports a package that must be
# resolved to a module.
! golang run ./needmod/needmod.golang
stderr '^needmod[/\\]needmod.golang:10:2: no required module provides package example.com/version: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'


# 'golang fmt' should be able to format files outside of a module.
golang fmt needmod/needmod.golang


# The remainder of the test checks dependencies by linking and running binaries.

# 'golang run' should work with file arguments if they don't import anything
# outside std.
golang run ./stdonly/stdonly.golang
stdout 'path is command-line-arguments$'
stdout 'main is  $'

# 'golang generate' should work with file arguments.
[exec:touch] golang generate ./needmod/needmod.golang
[exec:touch] exists ./needmod/gen.txt

# 'golang install' should work with file arguments.
golang install ./stdonly/stdonly.golang

# 'golang test' should work with file arguments.
golang test -v ./stdonly/stdonly_test.golang
stdout 'stdonly was tested'

# 'golang vet' should work with file arguments.
golang vet ./stdonly/stdonly.golang


-- README.txt --
There is no golang.mod file in the working directory.

-- needmod/needmod.golang --
//golang:generate touch gen.txt

package main

import (
	"fmt"
	"os"
	"runtime/debug"

	_ "example.com/version"
)

func main() {
	info, ok := debug.ReadBuildInfo()
	if !ok {
		panic("missing build info")
	}
	fmt.Fprintf(os.Stdout, "path is %s\n", info.Path)
	fmt.Fprintf(os.Stdout, "main is %s %s\n", info.Main.Path, info.Main.Version)
	for _, m := range info.Deps {
		fmt.Fprintf(os.Stdout, "using %s %s\n", m.Path, m.Version)
	}
}

-- stdonly/stdonly.golang --
package main

import (
	"fmt"
	"os"
	"runtime/debug"
)

func main() {
	info, ok := debug.ReadBuildInfo()
	if !ok {
		panic("missing build info")
	}
	fmt.Fprintf(os.Stdout, "path is %s\n", info.Path)
	fmt.Fprintf(os.Stdout, "main is %s %s\n", info.Main.Path, info.Main.Version)
	for _, m := range info.Deps {
		fmt.Fprintf(os.Stdout, "using %s %s\n", m.Path, m.Version)
	}
}

-- stdonly/stdonly_test.golang --
package main

import (
	"fmt"
	"testing"
)

func Test(t *testing.T) {
	fmt.Println("stdonly was tested")
}

-- newgolang/newgolang.golang --
// Package newgolang requires Golang 1.14 or newer.
package newgolang

import "io"

const C = 299_792_458

type ReadWriteCloser interface {
	io.ReadCloser
	io.WriteCloser
}
