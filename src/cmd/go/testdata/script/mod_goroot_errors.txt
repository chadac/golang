env GO111MODULE=on

# Regression test for https://golanglang.org/issue/34769.
# Missing standard-library imports should refer to GOROOT rather than
# complaining about a malformed module path.
# This is especially important when GOROOT is set incorrectly,
# since such an error will occur for every package in std.

# Building a nonexistent std package directly should fail usefully.

! golang build -mod=readonly nonexist
! stderr 'import lookup disabled'
! stderr 'missing dot'
stderr '^package nonexist is not in std \('$GOROOT'[/\\]src[/\\]nonexist\)$'

! golang build nonexist
! stderr 'import lookup disabled'
! stderr 'missing dot'
stderr '^package nonexist is not in std \('$GOROOT'[/\\]src[/\\]nonexist\)$'

# Building a nonexistent std package indirectly should also fail usefully.

! golang build -mod=readonly ./importnonexist
! stderr 'import lookup disabled'
! stderr 'missing dot'
stderr '^importnonexist[/\\]x.golang:2:8: package nonexist is not in std \('$GOROOT'[/\\]src[/\\]nonexist\)$'

! golang build ./importnonexist
! stderr 'import lookup disabled'
! stderr 'missing dot'
stderr '^importnonexist[/\\]x.golang:2:8: package nonexist is not in std \('$GOROOT'[/\\]src[/\\]nonexist\)$'

# Building an *actual* std package should fail if GOROOT is set to something bogus.

[!short] golang build ./importjson  # Prove that it works when GOROOT is valid.

env GOROOT=$WORK/not-a-valid-golangroot
! golang build ./importjson
! stderr 'import lookup disabled'
! stderr 'missing dot'
stderr 'importjson[/\\]x.golang:2:8: package encoding/json is not in std \('$WORK'[/\\]not-a-valid-golangroot[/\\]src[/\\]encoding[/\\]json\)$'

-- golang.mod --
module example.com
golang 1.14
-- importnonexist/x.golang --
package importnonexist
import _ "nonexist"
-- importjson/x.golang --
package importjson
import _ "encoding/json"
-- $WORK/not-a-valid-golangroot/README --
This directory is not a valid GOROOT.
