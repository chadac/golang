[short] skip

# Compiler name is always added.
golang build
golang version -m m$GOEXE
stdout '^\tbuild\t-compiler=gc$'
stdout '^\tbuild\tGOOS='
stdout '^\tbuild\tGOARCH='
[GOARCH:amd64] stdout '^\tbuild\tGOAMD64='
! stdout asmflags|gcflags|ldflags|gccgolangflags

# Toolchain flags are added if present.
# The raw flags are included, with package patterns if specified.
golang build -asmflags=example.com/m=-D=FOO=bar
golang version -m m$GOEXE
stdout '^\tbuild\t-asmflags=example\.com/m=-D=FOO=bar$'

golang build -gcflags=example.com/m=-N
golang version -m m$GOEXE
stdout '^\tbuild\t-gcflags=example\.com/m=-N$'

golang build -ldflags=example.com/m=-w
golang version -m m$GOEXE
stdout '^\tbuild\t-ldflags=example\.com/m=-w$'

golang build -trimpath
golang version -m m$GOEXE
stdout '\tbuild\t-trimpath=true$'

# gccgolangflags are not added when gc is used, and vice versa.
# TODO: test gccgolang.
golang build -gccgolangflags=all=UNUSED
golang version -m m$GOEXE
! stdout gccgolangflags

# Build and tool tags are added but not release tags.
# "race" is included with build tags but not "cgolang".
golang build -tags=a,b
golang version -m m$GOEXE
stdout '^\tbuild\t-tags=a,b$'
[race] golang build -race
[race] golang version -m m$GOEXE
[race] ! stdout '^\tbuild\t-tags='
[race] stdout '^\tbuild\t-race=true$'

# CGO flags are separate settings.
# CGO_ENABLED is always present.
# Other flags are added if CGO_ENABLED is true.
env CGO_ENABLED=0
golang build
golang version -m m$GOEXE
stdout '^\tbuild\tCGO_ENABLED=0$'
! stdout CGO_CPPFLAGS|CGO_CFLAGS|CGO_CXXFLAGS|CGO_LDFLAGS

[cgolang] env CGO_ENABLED=1
[cgolang] env CGO_CPPFLAGS=-DFROM_CPPFLAGS=1
[cgolang] env CGO_CFLAGS=-DFROM_CFLAGS=1
[cgolang] env CGO_CXXFLAGS=-DFROM_CXXFLAGS=1
[cgolang] env CGO_LDFLAGS=-L/extra/dir/does/not/exist
[cgolang] golang build '-ldflags=all=-linkmode=external -extldflags=-L/bonus/dir/does/not/exist'
[cgolang] golang version -m m$GOEXE
[cgolang] stdout '^\tbuild\t-ldflags="all=-linkmode=external -extldflags=-L/bonus/dir/does/not/exist"$'
[cgolang] stdout '^\tbuild\tCGO_ENABLED=1$'
[cgolang] stdout '^\tbuild\tCGO_CPPFLAGS=-DFROM_CPPFLAGS=1$'
[cgolang] stdout '^\tbuild\tCGO_CFLAGS=-DFROM_CFLAGS=1$'
[cgolang] stdout '^\tbuild\tCGO_CXXFLAGS=-DFROM_CXXFLAGS=1$'
[cgolang] stdout '^\tbuild\tCGO_LDFLAGS=-L/extra/dir/does/not/exist$'

# https://golang.dev/issue/52372: a cgolang-enabled binary should not be stamped with
# CGO_ flags that contain paths.
[cgolang] env CGO_ENABLED=1
[cgolang] env CGO_CPPFLAGS=-DFROM_CPPFLAGS=1
[cgolang] env CGO_CFLAGS=-DFROM_CFLAGS=1
[cgolang] env CGO_CXXFLAGS=-DFROM_CXXFLAGS=1
[cgolang] env CGO_LDFLAGS=-L/extra/dir/does/not/exist
[cgolang] golang build -trimpath '-ldflags=all=-linkmode=external -extldflags=-L/bonus/dir/does/not/exist'
[cgolang] golang version -m m$GOEXE
[cgolang] ! stdout '/extra/dir/does/not/exist'
[cgolang] ! stdout '/bonus/dir/does/not/exist'
[cgolang] stdout '^\tbuild\tCGO_ENABLED=1$'

-- golang.mod --
module example.com/m

golang 1.18
-- m.golang --
package main

func main() {}
