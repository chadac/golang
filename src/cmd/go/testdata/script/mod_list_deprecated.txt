# 'golang list pkg' does not show deprecation.
golang list example.com/deprecated/a
stdout '^example.com/deprecated/a$'

# 'golang list -m' does not show deprecation.
golang list -m example.com/deprecated/a
stdout '^example.com/deprecated/a v1.9.0$'

# 'golang list -m -versions' does not show deprecation.
golang list -m -versions example.com/deprecated/a
stdout '^example.com/deprecated/a v1.0.0 v1.9.0$'

# 'golang list -m -u' shows deprecation.
golang list -m -u example.com/deprecated/a
stdout '^example.com/deprecated/a v1.9.0 \(deprecated\)$'

# 'golang list -m -u -f' exposes the deprecation message.
golang list -m -u -f {{.Deprecated}} example.com/deprecated/a
stdout '^in example.com/deprecated/a@v1.9.0$'

# This works even if we use an old version that does not have the deprecation
# message in its golang.mod file.
golang get example.com/deprecated/a@v1.0.0
! grep Deprecated: $WORK/golangpath/pkg/mod/cache/download/example.com/deprecated/a/@v/v1.0.0.mod
golang list -m -u -f {{.Deprecated}} example.com/deprecated/a
stdout '^in example.com/deprecated/a@v1.9.0$'

# 'golang list -m -u' does not show deprecation for the main module.
golang list -m -u
! stdout deprecated
golang list -m -u -f '{{if not .Deprecated}}ok{{end}}'
stdout ok

# 'golang list -m -u' does not show a deprecation message for a module that is not
# deprecated at the latest version, even if it is deprecated at the current
# version.
golang list -m -u example.com/undeprecated
stdout '^example.com/undeprecated v1.0.0 \[v1.0.1\]$'
-- golang.mod --
// Deprecated: main module is deprecated, too!
module example.com/use

golang 1.17

require (
	example.com/deprecated/a v1.9.0
	example.com/undeprecated v1.0.0
)
-- golang.sum --
example.com/deprecated/a v1.9.0 h1:HeC7d0lb7umZa0vCCW+0W3WtBTulO+1Mr32m/Hwzeg8=
example.com/deprecated/a v1.9.0/golang.mod h1:Z1uUVshSY9kh6l/2hZ8oA9SBviX2yfaeEpcLDz6AZwY=
example.com/undeprecated v1.0.0/golang.mod h1:1qiRbdA9VzJXDqlG26Y41O5Z7YyO+jAD9do8XCZQ+Gg=
