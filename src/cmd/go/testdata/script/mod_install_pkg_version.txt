# 'golang install pkg@version' works outside a module.
env GO111MODULE=auto
golang install example.com/cmd/a@v1.0.0
exists $GOPATH/bin/a$GOEXE
rm $GOPATH/bin


# 'golang install pkg@version' reports an error if modules are disabled.
env GO111MODULE=off
! golang install example.com/cmd/a@v1.0.0
stderr '^golang: modules disabled by GO111MODULE=off; see ''golang help modules''$'
env GO111MODULE=auto


# 'golang install pkg@version' ignores golang.mod in current directory.
cd m
cp golang.mod golang.mod.orig
! golang list -m all
stderr '^golang: example.com/cmd@v1.1.0-doesnotexist: reading http.*/mod/example.com/cmd/@v/v1.1.0-doesnotexist.info: 404 Not Found\n\tserver response: 404 page not found$'
stderr '^golang: example.com/cmd@v1.1.0-doesnotexist: missing golang.sum entry for golang.mod file; to add it:\n\tgolang mod download example.com/cmd$'
golang install example.com/cmd/a@latest
cmp golang.mod golang.mod.orig
exists $GOPATH/bin/a$GOEXE
golang version -m $GOPATH/bin/a$GOEXE
stdout '^\tmod\texample.com/cmd\tv1.0.0\t' # "latest", not from golang.mod
rm $GOPATH/bin/a
cd ..


# 'golang install -modfile=x.mod pkg@version' reports an error, but only if
# -modfile is specified explicitly on the command line.
cd m
env GOFLAGS=-modfile=golang.mod
golang install example.com/cmd/a@latest  # same as above
env GOFLAGS=
! golang install -modfile=golang.mod example.com/cmd/a@latest
stderr '^golang: -modfile cannot be used with commands that ignore the current module$'
cd ..


# Every test case requires linking, so we only cover the most important cases
# when -short is set.
[short] stop


# 'golang install pkg@version' works on a module that doesn't have a golang.mod file
# and with a module whose golang.mod file has missing requirements.
# With a proxy, the two cases are indistinguishable.
golang install rsc.io/fortune@v1.0.0
stderr '^golang: found rsc.io/quote in rsc.io/quote v1.5.2$'
exists $GOPATH/bin/fortune$GOEXE
! exists $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0/golang.mod # no golang.mod file
golang version -m $GOPATH/bin/fortune$GOEXE
stdout '^\tdep\trsc.io/quote\tv1.5.2\t' # latest version of fortune's dependency
rm $GOPATH/bin


# 'golang install dir@version' works like a normal 'golang install' command if
# dir is a relative or absolute path.
env GO111MODULE=on
golang mod download rsc.io/fortune@v1.0.0
! golang install $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0
stderr '^golang: golang\.mod file not found in current directory or any parent directory; see ''golang help modules''$'
! golang install ../pkg/mod/rsc.io/fortune@v1.0.0
stderr '^golang: golang\.mod file not found in current directory or any parent directory; see ''golang help modules''$'
mkdir tmp
cd tmp
golang mod init tmp
golang mod edit -require=rsc.io/fortune@v1.0.0
! golang install -mod=readonly $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0
stderr '^missing golang\.sum entry for module providing package rsc\.io/fortune; to add:\n\tgolang mod download rsc\.io/fortune$'
! golang install -mod=readonly ../../pkg/mod/rsc.io/fortune@v1.0.0
stderr '^missing golang\.sum entry for module providing package rsc\.io/fortune; to add:\n\tgolang mod download rsc\.io/fortune$'
golang get rsc.io/fortune@v1.0.0
golang install -mod=readonly $GOPATH/pkg/mod/rsc.io/fortune@v1.0.0
exists $GOPATH/bin/fortune$GOEXE
cd ..
rm tmp
rm $GOPATH/bin
env GO111MODULE=auto

# 'golang install pkg@version' reports errors for meta packages, std packages,
# and directories.
! golang install std@v1.0.0
stderr '^golang: std@v1.0.0: argument must be a package path, not a meta-package$'
! golang install fmt@v1.0.0
stderr '^golang: fmt@v1.0.0: argument must not be a package in the standard library$'
! golang install example.com//cmd/a@v1.0.0
stderr '^golang: example.com//cmd/a@v1.0.0: argument must be a clean package path$'
! golang install example.com/cmd/a@v1.0.0 ./x@v1.0.0
stderr '^golang: ./x@v1.0.0: argument must be a package path, not a relative path$'
! golang install example.com/cmd/a@v1.0.0 $GOPATH/src/x@v1.0.0
stderr '^golang: '$WORK'[/\\]golangpath/src/x@v1.0.0: argument must be a package path, not an absolute path$'
! golang install example.com/cmd/a@v1.0.0 cmd/...@v1.0.0
stderr '^package cmd/golang not provided by module example.com/cmd@v1.0.0$'

# 'golang install pkg@version' should accept multiple arguments but report an error
# if the version suffixes are different, even if they refer to the same version.
golang install example.com/cmd/a@v1.0.0 example.com/cmd/b@v1.0.0
exists $GOPATH/bin/a$GOEXE
exists $GOPATH/bin/b$GOEXE
rm $GOPATH/bin

env GO111MODULE=on
golang list -m example.com/cmd@latest
stdout '^example.com/cmd v1.0.0$'
env GO111MODULE=auto

! golang install example.com/cmd/a@v1.0.0 example.com/cmd/b@latest
stderr '^golang: example.com/cmd/b@latest: all arguments must refer to packages in the same module at the same version \(@v1.0.0\)$'


# 'golang install pkg@version' should report an error if the arguments are in
# different modules.
! golang install example.com/cmd/a@v1.0.0 rsc.io/fortune@v1.0.0
stderr '^package rsc.io/fortune provided by module rsc.io/fortune@v1.0.0\n\tAll packages must be provided by the same module \(example.com/cmd@v1.0.0\).$'


# 'golang install pkg@version' should report an error if an argument is not
# a main package.
! golang install example.com/cmd/a@v1.0.0 example.com/cmd/err@v1.0.0
stderr '^package example.com/cmd/err is not a main package$'

# Wildcards should match only main packages. This module has a non-main package
# with an error, so we'll know if that gets built.
mkdir tmp
cd tmp
golang mod init m
golang get example.com/cmd@v1.0.0
! golang build example.com/cmd/...
stderr 'err[/\\]err.golang:3:9: undefined: DoesNotCompile( .*)?$'
cd ..

golang install example.com/cmd/...@v1.0.0
exists $GOPATH/bin/a$GOEXE
exists $GOPATH/bin/b$GOEXE
rm $GOPATH/bin

# If a wildcard matches no packages, we should see a warning.
! golang install example.com/cmd/nomatch...@v1.0.0
stderr '^golang: example.com/cmd/nomatch\.\.\.@v1.0.0: module example.com/cmd@v1.0.0 found, but does not contain packages matching example.com/cmd/nomatch\.\.\.$'
golang install example.com/cmd/a@v1.0.0 example.com/cmd/nomatch...@v1.0.0
stderr '^golang: warning: "example.com/cmd/nomatch\.\.\." matched no packages$'

# If a wildcard matches only non-main packages, we should see a different warning.
golang install example.com/cmd/err...@v1.0.0
stderr '^golang: warning: "example.com/cmd/err\.\.\." matched only non-main packages$'


# 'golang install pkg@version' should report errors if the module contains
# replace or exclude directives.
golang mod download example.com/cmd@v1.0.0-replace
! golang install example.com/cmd/a@v1.0.0-replace
cmp stderr replace-err

golang mod download example.com/cmd@v1.0.0-exclude
! golang install example.com/cmd/a@v1.0.0-exclude
cmp stderr exclude-err

# 'golang install pkg@version' should report an error if the module requires a
# higher version of itself.
! golang install example.com/cmd/a@v1.0.0-newerself
stderr '^golang: example.com/cmd/a@v1.0.0-newerself: version constraints conflict:\n\texample.com/cmd@v1.0.0-newerself requires example.com/cmd@v1.0.0, but v1.0.0-newerself is requested$'


# 'golang install pkg@version' will only match a retracted version if it's
# explicitly requested.
env GO111MODULE=on
golang list -m -versions example.com/cmd
! stdout v1.9.0
golang list -m -versions -retracted example.com/cmd
stdout v1.9.0
golang install example.com/cmd/a@latest
golang version -m $GOPATH/bin/a$GOEXE
stdout '^\tmod\texample.com/cmd\tv1.0.0\t'
golang install example.com/cmd/a@v1.9.0
golang version -m $GOPATH/bin/a$GOEXE
stdout '^\tmod\texample.com/cmd\tv1.9.0\t'
env GO111MODULE=

# 'golang install pkg@version' succeeds when -mod=readonly is set explicitly.
# Verifies #43278.
golang install -mod=readonly example.com/cmd/a@v1.0.0


# 'golang install pkg@version' should show a deprecation message if the module is deprecated.
env GO111MODULE=on
golang install example.com/deprecated/a/cmd/a@latest
stderr '^golang: module example.com/deprecated/a is deprecated: in example.com/deprecated/a@v1.9.0$'
golang install example.com/deprecated/a/cmd/a@v1.0.0
stderr '^golang: module example.com/deprecated/a is deprecated: in example.com/deprecated/a@v1.9.0$'

# 'golang install pkg@version' does not show a deprecation message if the module is no longer
# deprecated in its latest version, even if the module is deprecated in its current version.
golang install example.com/undeprecated/cmd/a@v1.0.0
! stderr 'module.*is deprecated'

-- m/golang.mod --
module m

golang 1.16

require example.com/cmd v1.1.0-doesnotexist
-- x/x.golang --
package main

func main() {}
-- replace-err --
golang: example.com/cmd/a@v1.0.0-replace (in example.com/cmd@v1.0.0-replace):
	The golang.mod file for the module providing named packages contains one or
	more replace directives. It must not contain directives that would cause
	it to be interpreted differently than if it were the main module.
-- exclude-err --
golang: example.com/cmd/a@v1.0.0-exclude (in example.com/cmd@v1.0.0-exclude):
	The golang.mod file for the module providing named packages contains one or
	more exclude directives. It must not contain directives that would cause
	it to be interpreted differently than if it were the main module.
