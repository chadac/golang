cp golang.mod golang.mod.orig


# 'golang get' should fail, without updating golang.mod, if the transitive dependencies
# of the requested package (by default, the package in the current directory)
# cannot be resolved.

! golang get
stderr '^golang: example.com/m imports\n\texample.com/badimport imports\n\texample.net/oops: cannot find module providing package example.net/oops$'
cmp golang.mod.orig golang.mod

cd importsyntax


# A syntax error in a dependency prevents the compiler from needing that
# dependency's imports, so 'golang get' should not report an error when those
# imports cannot be resolved: it has all of the dependencies that the compiler
# needs, and the user did not request to run the compiler.

golang get
cmp ../golang.mod.syntax-d ../golang.mod


-- golang.mod --
module example.com/m

golang 1.16

replace example.com/badimport v0.1.0 => ./badimport
-- golang.mod.syntax-d --
module example.com/m

golang 1.16

replace example.com/badimport v0.1.0 => ./badimport

require example.com/badimport v0.1.0
-- m.golang --
package m

import _ "example.com/badimport"
-- importsyntax/importsyntax.golang --
package importsyntax

import _ "example.com/badimport/syntaxerror"
-- badimport/golang.mod --
module example.com/badimport

golang 1.16
-- badimport/badimport.golang --
package badimport

import "example.net/oops"
-- badimport/syntaxerror/syntaxerror.golang --
pack-age syntaxerror // sic

import "example.net/oops"
