# 'golang mod download' can download specific versions of the main module.
golang mod download rsc.io/quote@5d9f230b
golang mod download rsc.io/quote@v1.5.2
golang mod download rsc.io/quote@latest

# 'golang mod download' will not download @upgrade or @patch, since they always
# resolve to the main module.
golang mod download rsc.io/quote@upgrade
stderr '^golang: skipping download of rsc.io/quote@upgrade that resolves to the main module$'
golang mod download rsc.io/quote@patch
stderr '^golang: skipping download of rsc.io/quote@patch that resolves to the main module$'

# 'golang list -m' can show a version of the main module.
golang list -m rsc.io/quote@5d9f230b
stdout '^rsc.io/quote v0.0.0-20180710144737-5d9f230bcfba$'
golang list -m rsc.io/quote@v1.5.2
stdout '^rsc.io/quote v1.5.2$'
golang list -m rsc.io/quote@latest
stdout '^rsc.io/quote v1.5.2$'

# 'golang list -m -versions' shows available versions.
golang list -m -versions rsc.io/quote
stdout '^rsc.io/quote.*v1.5.2'

# 'golang list -m' resolves @upgrade and @patch to the main module.
golang list -m rsc.io/quote@upgrade
stdout '^rsc.io/quote$'
golang list -m rsc.io/quote@patch
stdout '^rsc.io/quote$'

# 'golang get' will not attempt to upgrade the main module to any specific version.
# See also: mod_get_main.txt.
! golang get rsc.io/quote@5d9f230b
stderr '^golang: can''t request version "5d9f230b" of the main module \(rsc.io/quote\)$'
! golang get rsc.io/quote@v1.5.2
stderr '^golang: can''t request version "v1.5.2" of the main module \(rsc.io/quote\)$'
! golang get rsc.io/quote@latest
stderr '^golang: can''t request version "latest" of the main module \(rsc.io/quote\)$'

-- golang.mod --
module rsc.io/quote

golang 1.16
