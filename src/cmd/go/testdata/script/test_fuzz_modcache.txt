# This test demonstrates the fuzz corpus behavior for packages outside of the main module.
# (See https://golanglang.org/issue/48495.)

[short] skip

# Set -modcacherw so that the test behaves the same regardless of whether the
# module cache is writable. (For example, on some platforms it can always be
# written if the user is running as root.) At one point, a failing fuzz test
# in a writable module cache would corrupt module checksums in the cache.
env GOFLAGS=-modcacherw


# When the upstream module has no test corpus, running 'golang test' should succeed,
# but 'golang test -fuzz=.' should error out before running the test.
# (It should NOT corrupt the module cache by writing out new fuzz inputs,
# even if the cache is writable.)

golang get -t example.com/fuzzfail@v0.1.0
golang test example.com/fuzzfail

! golang test -fuzz=. example.com/fuzzfail
! stdout .
stderr '^cannot use -fuzz flag on package outside the main module$'

golang mod verify


# If the module does include a test corpus, 'golang test' (without '-fuzz') should
# load that corpus and run the fuzz tests against it, but 'golang test -fuzz=.'
# should continue to be rejected.

golang get -t example.com/fuzzfail@v0.2.0

! golang test example.com/fuzzfail
stdout '^\s*fuzzfail_test\.golang:7: oops:'

! golang test -fuzz=. example.com/fuzzfail
! stdout .
stderr '^cannot use -fuzz flag on package outside the main module$'

golang mod verify


# Packages in 'std' cannot be fuzzed when the corresponding GOROOT module is not
# the main module â€” either the failures would not be recorded or the behavior of
# the 'std' tests would change globally.

! golang test -fuzz . encoding/json
stderr '^cannot use -fuzz flag on package outside the main module$'

! golang test -fuzz . cmd/buildid
stderr '^cannot use -fuzz flag on package outside the main module$'


-- golang.mod --
module example.com/m

golang 1.18
