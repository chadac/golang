[!fuzz] skip
[short] skip
env GOCACHE=$WORK/cache

# Cleanup should run after F.Skip.
golang test -run=FuzzTargetSkip
stdout cleanup

# Cleanup should run after F.Fatal.
! golang test -run=FuzzTargetFatal
stdout cleanup

# Cleanup should run after an unexpected runtime.Golangexit.
! golang test -run=FuzzTargetGolangexit
stdout cleanup

# Cleanup should run after panic.
! golang test -run=FuzzTargetPanic
stdout cleanup

# Cleanup should run in fuzz function on seed corpus.
golang test -v -run=FuzzFunction
stdout '(?s)inner.*outer'

# TODO(jayconrod): test cleanup while fuzzing. For now, the worker process's
# stdout and stderr is connected to the coordinator's, but it should eventually
# be connected to os.DevNull, so we wouldn't see t.Log output.

-- golang.mod --
module cleanup

golang 1.15
-- cleanup_test.golang --
package cleanup

import (
	"runtime"
	"testing"
)

func FuzzTargetSkip(f *testing.F) {
	f.Cleanup(func() { f.Log("cleanup") })
	f.Skip()
}

func FuzzTargetFatal(f *testing.F) {
	f.Cleanup(func() { f.Log("cleanup") })
	f.Fatal()
}

func FuzzTargetGolangexit(f *testing.F) {
	f.Cleanup(func() { f.Log("cleanup") })
	runtime.Golangexit()
}

func FuzzTargetPanic(f *testing.F) {
	f.Cleanup(func() { f.Log("cleanup") })
	panic("oh no")
}

func FuzzFunction(f *testing.F) {
	f.Add([]byte{0})
	f.Cleanup(func() { f.Log("outer") })
	f.Fuzz(func(t *testing.T, b []byte) {
		t.Cleanup(func() { t.Logf("inner") })
	})
}
