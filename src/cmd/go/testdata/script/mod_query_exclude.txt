env GO111MODULE=on

# list excluded version
golang list -modfile=golang.exclude.mod -m rsc.io/quote@v1.5.0
stdout '^rsc.io/quote v1.5.0$'

# list versions should not print excluded versions
golang list -m -versions rsc.io/quote
stdout '\bv1.5.0\b'
golang list -modfile=golang.exclude.mod -m -versions rsc.io/quote
! stdout '\bv1.5.0\b'

# list query with excluded version
golang list -m rsc.io/quote@>=v1.5
stdout '^rsc.io/quote v1.5.0$'
golang list -modfile=golang.exclude.mod -m rsc.io/quote@>=v1.5
stdout '^rsc.io/quote v1.5.1$'

# get excluded version
cp golang.exclude.mod golang.exclude.mod.orig
! golang get -modfile=golang.exclude.mod rsc.io/quote@v1.5.0
stderr '^golang: rsc.io/quote@v1.5.0: excluded by golang.mod$'

# get non-excluded version
cp golang.exclude.mod.orig golang.exclude.mod
golang get -modfile=golang.exclude.mod rsc.io/quote@v1.5.1
stderr 'rsc.io/quote v1.5.1'

# get query with excluded version
cp golang.exclude.mod.orig golang.exclude.mod
golang get -modfile=golang.exclude.mod rsc.io/quote@>=v1.5
golang list -modfile=golang.exclude.mod -m ...quote
stdout 'rsc.io/quote v1.5.[1-9]'

-- golang.mod --
module x

-- golang.exclude.mod --
module x

exclude rsc.io/quote v1.5.0

-- x.golang --
package x
import _ "rsc.io/quote"

