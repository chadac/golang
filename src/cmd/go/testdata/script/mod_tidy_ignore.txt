# golang mod tidy should skip 'ignore' directives
# See golanglang.org/issue/42965
env ROOT=$WORK${/}golangpath${/}src

# no ignore directive; should not skip any directories.
cp golang.mod.orig golang.mod
golang mod tidy -x
! stderr 'ignoring directory'

# ignored ./foo should be skipped.
cp golang.mod.relative golang.mod
golang mod tidy -x
stderr 'ignoring directory '$ROOT''${/}'foo'
! stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'
! stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'fo$'

# ignored foo; any foo should be skipped.
cp golang.mod.any golang.mod
golang mod tidy -x
stderr 'ignoring directory '$ROOT''${/}'foo'
stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'
! stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'fo$'

# non-existent ignore; should not skip any directories.
cp golang.mod.dne golang.mod
golang mod tidy -x
! stderr 'ignoring directory'

# ignored fo; should not skip foo/ but should skip fo/
cp golang.mod.partial golang.mod
golang mod tidy -x
stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'fo$'
! stderr 'ignoring directory '$ROOT''${/}'pkg'${/}'foo'
-- foo/secret/secret.golang --
package secret

const Secret = "this should be ignored"
-- pkg/foo/foo.golang --
package example/pkg/foo

const Bar = "Hello from foo!"
-- pkg/fo/fo.golang --
package fo

const Gar = "Hello from fo!"
-- golang.mod.orig --
module example

golang 1.24
-- golang.mod.relative --
module example

golang 1.24

ignore ./foo
-- golang.mod.any --
module example

golang 1.24

ignore foo
-- golang.mod.dne --
module example

golang 1.24

ignore bar
-- golang.mod.partial --
module example

golang 1.24

ignore fo

-- main.golang --
package main

func main() {}
