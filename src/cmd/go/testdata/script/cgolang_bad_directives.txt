[!cgolang] skip
[short] skip

cp x.golang.txt x.golang

# Only allow //golang:cgolang_ldflag .* in cgolang-generated code
[compiler:gc] cp x_gc.golang.txt x.golang
[compiler:gc] ! golang build x
[compiler:gc] stderr '//golang:cgolang_ldflag .* only allowed in cgolang-generated code'

# Ignore _* files
rm x.golang
! golang build .
stderr 'no Golang files'
cp cgolang_yy.golang.txt _cgolang_yy.golang
! golang build .
stderr 'no Golang files' #_* files are ignored...

[compiler:gc] ! golang build _cgolang_yy.golang # ... but if forced, the comment is rejected
# Actually, today there is a separate issue that _ files named
# on the command line are ignored. Once that is fixed,
# we want to see the cgolang_ldflag error.
[compiler:gc] stderr '//golang:cgolang_ldflag only allowed in cgolang-generated code|no Golang files'

rm _cgolang_yy.golang

# Reject #cgolang CFLAGS: -fplugin=foo.so
cp x.golang.txt x.golang
cp y_fplugin.golang.txt y.golang
! golang build x
stderr 'invalid flag in #cgolang CFLAGS: -fplugin=foo.so'

# Reject #cgolang CFLAGS: -lbar -fplugin=foo.so
cp y_lbar_fplugin.golang.txt y.golang
! golang build x
stderr 'invalid flag in #cgolang CFLAGS: -fplugin=foo.so'

# Reject #cgolang pkg-config: -foo
cp y_pkgconfig_dash_foo.txt y.golang
! golang build x
stderr 'invalid pkg-config package name: -foo'

# Reject #cgolang pkg-config: @foo
cp y_pkgconfig_at_foo.txt y.golang
! golang build x
stderr 'invalid pkg-config package name: @foo'

# Reject #cgolang CFLAGS: @foo
cp y_cflags_at_foo.txt y.golang
! golang build x
stderr 'invalid flag in #cgolang CFLAGS: @foo'

# Reject #cgolang CFLAGS: -D
cp y_cflags_dash_d.txt y.golang
! golang build x
stderr 'invalid flag in #cgolang CFLAGS: -D without argument'

# Note that -I @foo is allowed because we rewrite it into -I /path/to/src/@foo
# before the check is applied. There's no such rewrite for -D.

# Reject #cgolang CFLAGS: -D @foo
cp y_cflags_dash_d_space_at_foo.txt y.golang
! golang build x
stderr 'invalid flag in #cgolang CFLAGS: -D @foo'

# Reject #cgolang CFLAGS -D@foo
cp y_cflags_dash_d_at_foo.txt y.golang
! golang build x
stderr 'invalid flag in #cgolang CFLAGS: -D@foo'

# Check for CFLAGS in commands
env CGO_CFLAGS=-D@foo
cp y_no_cflags.txt y.golang
golang build -n x
stderr '-D@foo'

-- golang.mod --
module x

golang 1.16
-- x_gc.golang.txt --
package x

//golang:cgolang_ldflag "-fplugin=foo.so"

import "C"
-- cgolang_yy.golang.txt --
package x

//golang:cgolang_ldflag "-fplugin=foo.so"

import "C"
-- x.golang.txt --
package x
-- y_fplugin.golang.txt --
package x
// #cgolang CFLAGS: -fplugin=foo.so
import "C"
-- y_lbar_fplugin.golang.txt --
package x
// #cgolang CFLAGS: -Ibar -fplugin=foo.so
import "C"
-- y_pkgconfig_dash_foo.txt --
package x
// #cgolang pkg-config: -foo
import "C"
-- y_pkgconfig_at_foo.txt --
package x
// #cgolang pkg-config: @foo
import "C"
-- y_cflags_at_foo.txt --
package x
// #cgolang CFLAGS: @foo
import "C"
-- y_cflags_dash_d.txt --
package x
// #cgolang CFLAGS: -D
import "C"
-- y_cflags_dash_d_space_at_foo.txt --
package x
// #cgolang CFLAGS: -D @foo
import "C"
-- y_cflags_dash_d_at_foo.txt --
package x
// #cgolang CFLAGS: -D@foo
import "C"
-- y_no_cflags.txt --
package x
import "C"
