env TESTGO_VERSION=golang1.24

golang list -f '{{.Module.GolangVersion}}'
stdout 1.15

golang mod tidy
golang list -f '{{.Module.GolangVersion}}'
stdout 1.15

golang get example.com/a@v1.0.1
golang list -f '{{.Module.GolangVersion}}'
stdout 1.15

golang get example.com/a@v1.0.1 golang@1.16
golang list -f '{{.Module.GolangVersion}}'
stdout 1.16

-- golang.mod --
module m
golang 1.15

require (
	example.com/a v1.0.0
	example.com/b v1.0.0
)

replace example.com/a v1.0.0 => ./a100
replace example.com/a v1.0.1 => ./a101
replace example.com/b v1.0.1 => ./b101
replace example.com/b v1.0.0 => ./b100
replace example.com/b v0.9.0 => ./b100

-- x.golang --
package m

import (
	_ "example.com/a"
	_ "example.com/b"
)

-- a100/golang.mod --
module example.com/a
golang 1.16

require example.com/b v1.0.0

-- a100/a.golang --
package a

-- a101/golang.mod --
module example.com/a
golang 1.17

require example.com/b v1.0.1

-- a101/a.golang --
package a

-- b100/golang.mod --
module example.com/b
golang 1.18

-- b100/b.golang --
package b

-- b101/golang.mod --
module example.com/b
golang 1.19

-- b101/b.golang --
package b

