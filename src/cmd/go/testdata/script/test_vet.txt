[short] skip

# Test file
! golang test p1_test.golang
stderr 'Logf format %d'
golang test -vet=off
stdout '^ok'

# Non-test file
! golang test p1.golang
stderr 'Printf format %d'
golang test -x -vet=shift p1.golang
stderr '[\\/]vet.*-shift'
stdout '\[no test files\]'
golang test -vet=off p1.golang
! stderr '[\\/]vet.*-shift'
stdout '\[no test files\]'

# ensure all runs non-default vet
! golang test -vet=all ./vetall/...
stderr 'using resp before checking for errors'

# Test issue #47309
! golang test -vet=bools,xyz ./vetall/...
stderr '-vet argument must be a supported analyzer'

# Test with a single analyzer
! golang test -vet=httpresponse ./vetall/...
stderr 'using resp before checking for errors'

# Test with a list of analyzers
golang test -vet=atomic,bools,nilfunc ./vetall/...
stdout 'm/vetall.*\[no tests to run\]'

# Test issue #22890
golang test m/vetcycle
stdout 'm/vetcycle.*\[no test files\]'

# Test with ...
! golang test ./vetfail/...
stderr 'Printf format %d'
stdout 'ok\s+m/vetfail/p2'

# Check there's no diagnosis of a bad build constraint in vetxonly mode.
# Use -a so that we need to recompute the vet-specific export data for
# vetfail/p1.
golang test -a m/vetfail/p2
! stderr 'invalid.*constraint'

-- golang.mod --
module m

golang 1.16
-- p1_test.golang --
package p

import "testing"

func Test(t *testing.T) {
	t.Logf("%d") // oops
}
-- p1.golang --
package p

import "fmt"

func F() {
	fmt.Printf("%d") // oops
}
-- vetall/p.golang --
package p

import "net/http"

func F() {
	resp, err := http.Head("example.com")
	defer resp.Body.Close()
	if err != nil {
		panic(err)
	}
	// (defer statement belongs here)
}
-- vetall/p_test.golang --
package p
-- vetcycle/p.golang --
package p

type (
	_  interface{ m(B1) }
	A1 interface{ a(D1) }
	B1 interface{ A1 }
	C1 interface {
		B1 /* ERROR issue #18395 */
	}
	D1 interface{ C1 }
)

var _ A1 = C1 /* ERROR cannot use C1 */ (nil)
-- vetfail/p1/p1.golang --
// +build !foo-bar

package p1

import "fmt"

func F() {
	fmt.Printf("%d", "hello") // causes vet error
}
-- vetfail/p2/p2.golang --
package p2

import _ "m/vetfail/p1"

func F() {
}
-- vetfail/p2/p2_test.golang --
package p2

import "testing"

func TestF(t *testing.T) {
	F()
}
