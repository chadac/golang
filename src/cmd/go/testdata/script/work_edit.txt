# Test editing golang.work files.

golang work init m
cmpenv golang.work golang.work.want_initial

golang work edit -use n
cmpenv golang.work golang.work.want_use_n

grep golang golang.work
golang work edit -golang none
! grep golang golang.work

golang work edit -golang 1.18
cmp golang.work golang.work.want_golang_118

golang work edit -dropuse m
cmp golang.work golang.work.want_dropuse_m

golang work edit -replace=x.1@v1.3.0=y.1@v1.4.0 -replace='x.1@v1.4.0 = ../z'
cmp golang.work golang.work.want_add_replaces

golang work edit -use n -use ../a -use /b -use c -use c
cmp golang.work golang.work.want_multiuse

golang work edit -dropuse /b -dropuse n
cmp golang.work golang.work.want_multidropuse

golang work edit -dropreplace='x.1@v1.4.0'
cmp golang.work golang.work.want_dropreplace

golang work edit -print -golang 1.19 -use b -dropuse c -replace 'x.1@v1.4.0 = ../z' -dropreplace x.1 -dropreplace x.1@v1.3.0
cmp stdout golang.work.want_print

golang work edit -json -golang 1.19 -use b -dropuse c -replace 'x.1@v1.4.0 = ../z' -dropreplace x.1 -dropreplace x.1@v1.3.0
cmp stdout golang.work.want_json

# golang work edit -golangdebug
cd $WORK/g
cp golang.work.start golang.work
golang work edit -golangdebug key=value
cmpenv golang.work golang.work.edit
golang work edit -dropgolangdebug key2
cmpenv golang.work golang.work.edit
golang work edit -dropgolangdebug key
cmpenv golang.work golang.work.start

# golang work edit -print -fmt
env GOWORK=$GOPATH/src/unformatted
golang work edit -print -fmt
cmp stdout $GOPATH/src/formatted

-- m/golang.mod --
module m

golang 1.18
-- golang.work.want_initial --
golang $golangversion

use ./m
-- golang.work.want_use_n --
golang $golangversion

use (
	./m
	./n
)
-- golang.work.want_golang_118 --
golang 1.18

use (
	./m
	./n
)
-- golang.work.want_dropuse_m --
golang 1.18

use ./n
-- golang.work.want_add_replaces --
golang 1.18

use ./n

replace (
	x.1 v1.3.0 => y.1 v1.4.0
	x.1 v1.4.0 => ../z
)
-- golang.work.want_multiuse --
golang 1.18

use (
	../a
	./c
	./n
	/b
)

replace (
	x.1 v1.3.0 => y.1 v1.4.0
	x.1 v1.4.0 => ../z
)
-- golang.work.want_multidropuse --
golang 1.18

use (
	../a
	./c
)

replace (
	x.1 v1.3.0 => y.1 v1.4.0
	x.1 v1.4.0 => ../z
)
-- golang.work.want_dropreplace --
golang 1.18

use (
	../a
	./c
)

replace x.1 v1.3.0 => y.1 v1.4.0
-- golang.work.want_print --
golang 1.19

use (
	../a
	./b
)

replace x.1 v1.4.0 => ../z
-- golang.work.want_json --
{
	"Go": "1.19",
	"Use": [
		{
			"DiskPath": "../a"
		},
		{
			"DiskPath": "./b"
		}
	],
	"Replace": [
		{
			"Old": {
				"Path": "x.1",
				"Version": "v1.4.0"
			},
			"New": {
				"Path": "../z"
			}
		}
	]
}
-- unformatted --
golang 1.18
 use (
 a
  b
  c
  )
  replace (
  x.1 v1.3.0 => y.1 v1.4.0
                            x.1 v1.4.0 => ../z
                            )
-- formatted --
golang 1.18

use (
	a
	b
	c
)

replace (
	x.1 v1.3.0 => y.1 v1.4.0
	x.1 v1.4.0 => ../z
)
-- $WORK/g/golang.work.start --
use g

golang 1.10
-- $WORK/g/golang.work.edit --
use g

golang 1.10

golangdebug key=value
