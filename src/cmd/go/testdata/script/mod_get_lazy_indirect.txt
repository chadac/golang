# https://golanglang.org/issue/45979: after 'golang get' on a package,
# that package should be importable without error.


# We start out with an unresolved dependency.
# 'golang list' suggests that we run 'golang get' on that dependency.

! golang list -deps .
stderr '^m.golang:3:8: no required module provides package rsc\.io/quote; to add it:\n\tgolang get rsc.io/quote$'


# When we run the suggested 'golang get' command, the new dependency can be used
# immediately.
#
# 'golang get' marks the new dependency as 'indirect', because it doesn't scan
# enough source code to know whether it is direct, and it is easier and less
# invasive to remove an incorrect indirect mark (e.g. using 'golang get') than to
# add one that is missing ('golang mod tidy' or 'golang mod vendor').

golang get rsc.io/quote
grep 'rsc.io/quote v\d+\.\d+\.\d+ // indirect$' golang.mod
! grep 'rsc.io/quote v\d+\.\d+\.\d+$' golang.mod

golang list -deps .
! stderr .
[!short] golang build .
[!short] ! stderr .


# 'golang get .' (or 'golang mod tidy') removes the indirect mark.

golang get .
grep 'rsc.io/quote v\d+\.\d+\.\d+$' golang.mod
! grep 'rsc.io/quote v\d+\.\d+\.\d+ // indirect$' golang.mod


-- golang.mod --
module example.com/m

golang 1.17
-- m.golang --
package m

import _ "rsc.io/quote"
