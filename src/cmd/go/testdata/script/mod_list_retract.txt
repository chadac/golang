# 'golang list -mod=vendor -retracted' reports an error.
golang mod vendor
! golang list -m -retracted -mod=vendor
stderr '^golang list -retracted cannot be used when vendoring is enabled$'
rm vendor

# 'golang list -retracted' reports an error in GOPATH mode.
env GO111MODULE=off
! golang list -retracted
stderr '^golang list -retracted can only be used in module-aware mode$'
env GO111MODULE=

# 'golang list pkg' does not show retraction.
golang list -f '{{with .Module}}{{with .Retracted}}retracted{{end}}{{end}}' example.com/retract
! stdout .

# 'golang list -retracted pkg' shows retraction.
golang list -retracted -f '{{with .Module}}{{with .Retracted}}retracted{{end}}{{end}}' example.com/retract
stdout retracted

# 'golang list -m' does not show retraction.
golang list -m -f '{{with .Retracted}}retracted{{end}}' example.com/retract
! stdout .

# 'golang list -m -retracted' shows retraction.
golang list -m -retracted -f '{{with .Retracted}}retracted{{end}}' example.com/retract

# 'golang list -m mod@version' does not show retraction.
golang list -m -f '{{with .Retracted}}retracted{{end}}' example.com/retract@v1.0.0-unused
! stdout .

# 'golang list -m -retracted mod@version' does not show an error if the module
# that would contain the retraction is unavailable. See #45305.
golang list -m -retracted -f '{{.Path}} {{.Version}} {{.Error}}' example.com/retract/missingmod@v1.0.0
stdout '^example.com/retract/missingmod v1.0.0 <nil>$'
exists $GOPATH/pkg/mod/cache/download/example.com/retract/missingmod/@v/v1.9.0.info
! exists $GOPATH/pkg/mod/cache/download/example.com/retract/missingmod/@v/v1.9.0.mod

# 'golang list -m -retracted mod@version' shows retractions.
golang list -m -retracted example.com/retract@v1.0.0-unused
stdout '^example.com/retract v1.0.0-unused \(retracted\)$'
golang list -m -retracted -f '{{with .Retracted}}retracted{{end}}' example.com/retract@v1.0.0-unused
stdout retracted

# 'golang list -m mod@latest' selects a previous release version, not self-retracted latest.
golang list -m -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prev@latest
stdout '^v1.1.0$'

# 'golang list -m -retracted mod@latest' selects the self-retracted latest version.
golang list -m -retracted -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prev@latest
stdout '^v1.9.0 retracted$'

# 'golang list -m mod@latest' selects a pre-release version if all release versions are retracted.
golang list -m -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prerelease@latest
stdout '^v1.9.1-pre$'

# 'golang list -m -retracted mod@latest' selects the self-retracted latest version.
golang list -m -retracted -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prerelease@latest
stdout '^v1.9.0 retracted$'

# 'golang list -m mod@latest' selects a pseudo-version if all versions are retracted.
# TODO(golanglang.org/issue/24031): the proxy does not expose the pseudo-version,
# even if all release versions are retracted.
golang list -m -e -f '{{.Error.Err}}' example.com/retract/self/pseudo@latest
stdout '^module example.com/retract/self/pseudo: no matching versions for query "latest"$'

# 'golang list -m mod@latest' reports an error if all versions are retracted.
golang list -m -e -f '{{.Error.Err}}' example.com/retract/self/all@latest
stdout '^module example.com/retract/self/all: no matching versions for query "latest"$'

# 'golang list -m mod@<v1.10' selects a previous release version, not self-retracted latest.
# The @latest query is not special with respect to retractions.
golang list -m -f '{{.Version}}{{with .Retracted}} retracted{{end}}' example.com/retract/self/prev@<v1.10
stdout '^v1.1.0$'

# 'golang list -m -versions' hides retracted versions.
golang list -m -versions example.com/retract
stdout '^example.com/retract v1.0.0-golangod v1.1.0$'

# 'golang list -m -retracted -versions' shows retracted versions.
golang list -m -retracted -versions example.com/retract
stdout '^example.com/retract v1.0.0-bad v1.0.0-golangod v1.0.0-unused v1.1.0$'

# 'golang list -m -u -versions' loads retractions and does not show retracted versions.
golang list -m -u -versions example.com/retract
stdout '^example.com/retract v1.0.0-golangod v1.1.0$'
golang list -m -u -versions -f '{{with .Retracted}}retracted{{end}}' example.com/retract
stdout retracted

# 'golang list -m -u' shows retraction.
golang list -m -u -f '{{with .Retracted}}retracted{{end}}' example.com/retract
stdout retracted

# 'golang list -m -u' does not suggest an update to a self-retracted latest version.
golang list -m -u -f '{{with .Update}}{{.Version}}{{with .Retracted}} retracted{{end}}{{end}}' example.com/retract/self/prev@v1.0.0-bad
stdout '^v1.1.0$'

-- golang.mod --
module example.com/use

golang 1.15

require example.com/retract v1.0.0-bad
-- golang.sum --
example.com/retract v1.0.0-bad h1:liAW69rbtjY67x2CcNzat668L/w+YGgNX3lhJsWIJis=
example.com/retract v1.0.0-bad/golang.mod h1:0DvGGolangfJ9hr1q63cBrOY/jSY52OwhRGA0K47NE80I5Y=
-- use.golang --
package use

import _ "example.com/retract"
