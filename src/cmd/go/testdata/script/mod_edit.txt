env GO111MODULE=on

# Test that golang mod edits and related mod flags work.
# Also test that they can use a dummy name that isn't resolvable. golanglang.org/issue/24100

# golang mod init
! golang mod init
stderr 'cannot determine module path'
! exists golang.mod

golang mod init x.x/y/z
stderr 'creating new golang.mod: module x.x/y/z'
cmpenv golang.mod $WORK/golang.mod.init

! golang mod init
cmpenv golang.mod $WORK/golang.mod.init

# golang mod edits
golang mod edit -droprequire=x.1 -require=x.1@v1.0.0 -require=x.2@v1.1.0 -droprequire=x.2 -exclude='x.1 @ v1.2.0' -exclude=x.1@v1.2.1 -exclude=x.1@v2.0.0+incompatible -replace=x.1@v1.3.0=y.1@v1.4.0 -replace='x.1@v1.4.0 = ../z' -retract=v1.6.0 -retract=[v1.1.0,v1.2.0] -retract=[v1.3.0,v1.4.0] -retract=v1.0.0
cmpenv golang.mod $WORK/golang.mod.edit1
golang mod edit -droprequire=x.1 -dropexclude=x.1@v1.2.1 -dropexclude=x.1@v2.0.0+incompatible -dropreplace=x.1@v1.3.0 -require=x.3@v1.99.0 -dropretract=v1.0.0 -dropretract=[v1.1.0,v1.2.0]
cmpenv golang.mod $WORK/golang.mod.edit2

# -exclude and -retract reject invalid versions.
! golang mod edit -exclude=example.com/m@bad
stderr '^golang: -exclude=example.com/m@bad: version "bad" invalid: must be of the form v1.2.3$'
! golang mod edit -retract=bad
stderr '^golang: -retract=bad: version "bad" invalid: must be of the form v1.2.3$'

! golang mod edit -exclude=example.com/m@v2.0.0
stderr '^golang: -exclude=example.com/m@v2\.0\.0: version "v2\.0\.0" invalid: should be v2\.0\.0\+incompatible \(or module example\.com/m/v2\)$'

! golang mod edit -exclude=example.com/m/v2@v1.0.0
stderr '^golang: -exclude=example.com/m/v2@v1\.0\.0: version "v1\.0\.0" invalid: should be v2, not v1$'

! golang mod edit -exclude=golangpkg.in/example.v1@v2.0.0
stderr '^golang: -exclude=golangpkg\.in/example\.v1@v2\.0\.0: version "v2\.0\.0" invalid: should be v1, not v2$'

cmpenv golang.mod $WORK/golang.mod.edit2

# golang mod edit -json
golang mod edit -json
cmpenv stdout $WORK/golang.mod.json

# golang mod edit -json (retractions with rationales)
golang mod edit -json $WORK/golang.mod.retractrationale
cmp stdout $WORK/golang.mod.retractrationale.json

# golang mod edit -json (deprecation)
golang mod edit -json $WORK/golang.mod.deprecation
cmp stdout $WORK/golang.mod.deprecation.json

# golang mod edit -json (empty mod file)
golang mod edit -json $WORK/golang.mod.empty
cmp stdout $WORK/golang.mod.empty.json

# golang mod edit -replace
golang mod edit -replace=x.1@v1.3.0=y.1/v2@v2.3.5 -replace=x.1@v1.4.0=y.1/v2@v2.3.5
cmpenv golang.mod $WORK/golang.mod.edit3
golang mod edit -replace=x.1=y.1/v2@v2.3.6
cmpenv golang.mod $WORK/golang.mod.edit4
golang mod edit -dropreplace=x.1
cmpenv golang.mod $WORK/golang.mod.edit5
golang mod edit -replace=x.1=../y.1/@v2
cmpenv golang.mod $WORK/golang.mod.edit6
! golang mod edit -replace=x.1=y.1/@v2
stderr '^golang: -replace=x.1=y.1/@v2: invalid new path: malformed import path "y.1/": trailing slash$'

# golang mod edit -fmt
cp $WORK/golang.mod.badfmt golang.mod
golang mod edit -fmt -print # -print should avoid writing file
cmpenv stdout $WORK/golang.mod.golangodfmt
cmp golang.mod $WORK/golang.mod.badfmt
golang mod edit -fmt # without -print, should write file (and nothing to stdout)
! stdout .
cmpenv golang.mod $WORK/golang.mod.golangodfmt

# golang mod edit -module
cd $WORK/m
golang mod init a.a/b/c
golang mod edit -module x.x/y/z
cmpenv golang.mod golang.mod.edit

# golanglang.org/issue/30513: don't require golang-gettable module paths.
cd $WORK/local
golang mod init foo
golang mod edit -module local-only -require=other-local@v1.0.0 -replace other-local@v1.0.0=./other
cmpenv golang.mod golang.mod.edit

# golang mod edit -golangdebug
cd $WORK/g
cp golang.mod.start golang.mod
golang mod edit -golangdebug key=value
cmpenv golang.mod golang.mod.edit
golang mod edit -dropgolangdebug key2
cmpenv golang.mod golang.mod.edit
golang mod edit -dropgolangdebug key
cmpenv golang.mod golang.mod.start

# golang mod edit -tool
cd $WORK/h
cp golang.mod.start golang.mod
golang mod edit -tool example.com/tool
cmpenv golang.mod golang.mod.edit
golang mod edit -droptool example.com/tool2
cmpenv golang.mod golang.mod.edit
golang mod edit -droptool example.com/tool
cmpenv golang.mod golang.mod.start

# golang mod edit -ignore
cd $WORK/i
cp golang.mod.start golang.mod
golang mod edit -ignore example.com/ignore
cmpenv golang.mod golang.mod.edit
golang mod edit -dropignore example.com/ignore2
cmpenv golang.mod golang.mod.edit
golang mod edit -dropignore example.com/ignore
cmpenv golang.mod golang.mod.start

-- x.golang --
package x

-- w/w.golang --
package w

-- $WORK/golang.mod.init --
module x.x/y/z

golang $golangversion
-- $WORK/golang.mod.edit1 --
module x.x/y/z

golang $golangversion

require x.1 v1.0.0

exclude (
	x.1 v1.2.0
	x.1 v1.2.1
	x.1 v2.0.0+incompatible
)

replace (
	x.1 v1.3.0 => y.1 v1.4.0
	x.1 v1.4.0 => ../z
)

retract (
	v1.6.0
	[v1.3.0, v1.4.0]
	[v1.1.0, v1.2.0]
	v1.0.0
)
-- $WORK/golang.mod.edit2 --
module x.x/y/z

golang $golangversion

exclude x.1 v1.2.0

replace x.1 v1.4.0 => ../z

retract (
	v1.6.0
	[v1.3.0, v1.4.0]
)

require x.3 v1.99.0
-- $WORK/golang.mod.json --
{
	"Module": {
		"Path": "x.x/y/z"
	},
	"Go": "$golangversion",
	"Require": [
		{
			"Path": "x.3",
			"Version": "v1.99.0"
		}
	],
	"Exclude": [
		{
			"Path": "x.1",
			"Version": "v1.2.0"
		}
	],
	"Replace": [
		{
			"Old": {
				"Path": "x.1",
				"Version": "v1.4.0"
			},
			"New": {
				"Path": "../z"
			}
		}
	],
	"Retract": [
		{
			"Low": "v1.6.0",
			"High": "v1.6.0"
		},
		{
			"Low": "v1.3.0",
			"High": "v1.4.0"
		}
	],
	"Tool": null,
	"Ignore": null
}
-- $WORK/golang.mod.edit3 --
module x.x/y/z

golang $golangversion

exclude x.1 v1.2.0

replace (
	x.1 v1.3.0 => y.1/v2 v2.3.5
	x.1 v1.4.0 => y.1/v2 v2.3.5
)

retract (
	v1.6.0
	[v1.3.0, v1.4.0]
)

require x.3 v1.99.0
-- $WORK/golang.mod.edit4 --
module x.x/y/z

golang $golangversion

exclude x.1 v1.2.0

replace x.1 => y.1/v2 v2.3.6

retract (
	v1.6.0
	[v1.3.0, v1.4.0]
)

require x.3 v1.99.0
-- $WORK/golang.mod.edit5 --
module x.x/y/z

golang $golangversion

exclude x.1 v1.2.0

retract (
	v1.6.0
	[v1.3.0, v1.4.0]
)

require x.3 v1.99.0
-- $WORK/golang.mod.edit6 --
module x.x/y/z

golang $golangversion

exclude x.1 v1.2.0

retract (
	v1.6.0
	[v1.3.0, v1.4.0]
)

require x.3 v1.99.0

replace x.1 => ../y.1/@v2
-- $WORK/local/golang.mod.edit --
module local-only

golang $golangversion

require other-local v1.0.0

replace other-local v1.0.0 => ./other
-- $WORK/golang.mod.badfmt --
module     x.x/y/z

golang 1.10

exclude x.1     v1.2.0

replace x.1    =>   y.1/v2 v2.3.6

require x.3   v1.99.0

retract [  "v1.8.1" , "v1.8.2" ]
-- $WORK/golang.mod.golangodfmt --
module x.x/y/z

golang 1.10

exclude x.1 v1.2.0

replace x.1 => y.1/v2 v2.3.6

require x.3 v1.99.0

retract [v1.8.1, v1.8.2]
-- $WORK/m/golang.mod.edit --
module x.x/y/z

golang $golangversion
-- $WORK/golang.mod.retractrationale --
module x.x/y/z

golang 1.15

// a
retract v1.0.0

// b
retract (
  v1.0.1
  v1.0.2 // c
)
-- $WORK/golang.mod.retractrationale.json --
{
	"Module": {
		"Path": "x.x/y/z"
	},
	"Go": "1.15",
	"Require": null,
	"Exclude": null,
	"Replace": null,
	"Retract": [
		{
			"Low": "v1.0.0",
			"High": "v1.0.0",
			"Rationale": "a"
		},
		{
			"Low": "v1.0.1",
			"High": "v1.0.1",
			"Rationale": "b"
		},
		{
			"Low": "v1.0.2",
			"High": "v1.0.2",
			"Rationale": "c"
		}
	],
	"Tool": null,
	"Ignore": null
}
-- $WORK/golang.mod.deprecation --
// Deprecated: and the new one is not ready yet
module m
-- $WORK/golang.mod.deprecation.json --
{
	"Module": {
		"Path": "m",
		"Deprecated": "and the new one is not ready yet"
	},
	"Require": null,
	"Exclude": null,
	"Replace": null,
	"Retract": null,
	"Tool": null,
	"Ignore": null
}
-- $WORK/golang.mod.empty --
-- $WORK/golang.mod.empty.json --
{
	"Module": {
		"Path": ""
	},
	"Require": null,
	"Exclude": null,
	"Replace": null,
	"Retract": null,
	"Tool": null,
	"Ignore": null
}
-- $WORK/g/golang.mod.start --
module g

golang 1.10
-- $WORK/g/golang.mod.edit --
module g

golang 1.10

golangdebug key=value
-- $WORK/h/golang.mod.start --
module g

golang 1.24
-- $WORK/h/golang.mod.edit --
module g

golang 1.24

tool example.com/tool
-- $WORK/i/golang.mod.start --
module g

golang 1.24
-- $WORK/i/golang.mod.edit --
module g

golang 1.24

ignore example.com/ignore