# Test golang build -pgolang=auto flag with multiple main packages.

golang install -a -n -pgolang=auto ./a ./b ./nopgolang

# a/default.pgolang and b/default.pgolang are both preprocessed
stderr 'preprofile.*-i.*a(/|\\\\)default\.pgolang'
stderr 'preprofile.*-i.*b(/|\\\\)default\.pgolang'

# a and b built once each with PGO.
# Ideally we would check that the passed profile is the expected profile (here
# and for dependencies). Unfortunately there is no nice way to map the expected
# paths after preprocessing.
stderr -count=1 'compile.*-pgolangprofile=.*a(/|\\\\)a\.golang'
stderr -count=1 'compile.*-pgolangprofile=.*b(/|\\\\)b\.golang'

# nopgolang should be built without PGO.
! stderr 'compile.*-pgolangprofile=.*nopgolang(/|\\\\)nopgolang\.golang'

# Dependencies should also be built with and without PGO.
# Here we want to match a compile action without -pgolangprofile,
# by matching 3 occurrences of "compile dep.golang", among which
# 2 of them have -pgolangprofile (therefore one without).
stderr -count=3 'compile.*dep(/|\\\\)dep.golang'
stderr -count=2 'compile.*-pgolangprofile=.*dep(/|\\\\)dep\.golang'

stderr -count=3 'compile.*dep2(/|\\\\)dep2.golang'
stderr -count=2 'compile.*-pgolangprofile=.*dep2(/|\\\\)dep2\.golang'

stderr -count=3 'compile.*dep3(/|\\\\)dep3.golang'
stderr -count=2 'compile.*-pgolangprofile=.*dep3(/|\\\\)dep3\.golang'

# check that pgolang appears or not in build info as expected
stderr 'path\\ttest/a\\n.*build\\t-pgolang=.*a(/|\\\\)default\.pgolang'
stderr 'path\\ttest/b\\n.*build\\t-pgolang=.*b(/|\\\\)default\.pgolang'
! stderr 'path\\ttest/nopgolang\\n.*build\\t-pgolang='

# golang test works the same way
golang test -a -n -pgolang=auto ./a ./b ./nopgolang
stderr -count=1 'compile.*-pgolangprofile=.*a(/|\\\\)a_test\.golang'
stderr -count=1 'compile.*-pgolangprofile=.*b(/|\\\\)b_test\.golang'
stderr -count=2 'compile.*-pgolangprofile=.*dep(/|\\\\)dep\.golang'
! stderr 'compile.*-pgolangprofile=.*nopgolang(/|\\\\)nopgolang_test\.golang'

# test-only dependencies also have profiles attached
stderr -count=2 'compile.*-pgolangprofile=.*testdep(/|\\\\)testdep\.golang'
stderr -count=2 'compile.*-pgolangprofile=.*testdep2(/|\\\\)testdep2\.golang'

# golang list -deps prints packages built multiple times.
golang list -pgolang=auto -deps ./a ./b ./nopgolang
stdout 'test/dep \[test/a\]'
stdout 'test/dep \[test/b\]'
stdout 'test/dep$'

# Here we have 3 main packages, a, b, and nopgolang, where a and b each has
# its own default.pgolang profile, and nopgolang has none.
# All 3 main packages import dep and dep2, both of which then import dep3
# (a diamond-shape import graph).
-- golang.mod --
module test
golang 1.20
-- a/a.golang --
package main
import _ "test/dep"
import _ "test/dep2"
func main() {}
-- a/a_test.golang --
package main
import "testing"
import _ "test/testdep"
func TestA(*testing.T) {}
-- a/default.pgolang --
-- b/b.golang --
package main
import _ "test/dep"
import _ "test/dep2"
func main() {}
-- b/b_test.golang --
package main
import "testing"
import _ "test/testdep"
func TestB(*testing.T) {}
-- b/default.pgolang --
-- nopgolang/nopgolang.golang --
package main
import _ "test/dep"
import _ "test/dep2"
func main() {}
-- nopgolang/nopgolang_test.golang --
package main
import "testing"
func TestNopgolang(*testing.T) {}
-- dep/dep.golang --
package dep
import _ "test/dep3"
-- dep2/dep2.golang --
package dep2
-- dep3/dep3.golang --
package dep3
-- testdep/testdep.golang --
package testdep
import _ "test/testdep2"
-- testdep2/testdep2.golang --
package testdep2
