env GO111MODULE=on

# golanglang.org/issue/31248: loading the build list must not add explicit entries
# for indirect dependencies already implied by older-than-selected versions
# already in the build list.

cp golang.mod.orig golang.mod
golang mod tidy
cmp golang.mod golang.mod.orig

cp golang.mod.orig golang.mod
golang list -m all
cmp golang.mod golang.mod.orig

-- golang.mod.orig --
module main

golang 1.13

require a v0.0.0

replace (
	a v0.0.0 => ./a
	b v0.0.0 => ./b
	i v0.0.0 => ./i
	x v0.1.0 => ./x1
	x v0.2.0 => ./x2
)
-- main.golang --
package main

import _ "a"

func main() {}
-- a/golang.mod --
module a
golang 1.13
require (
	x v0.2.0
	b v0.0.0
)
-- a/a.golang --
package a
-- b/golang.mod --
module b
golang 1.13
require x v0.1.0
-- x1/golang.mod --
module x
golang 1.13
require (
	b v0.0.0
	i v0.0.0
)
-- x2/golang.mod --
module x
golang 1.13
-- i/golang.mod --
module i
golang 1.13
