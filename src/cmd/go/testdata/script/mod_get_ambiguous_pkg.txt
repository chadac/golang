# Both example.net/ambiguous v0.1.0 and example.net/ambiguous/pkg v0.1.0 exist.
# 'golang mod tidy' would arbitrarily choose the one with the longer path,
# but 'golang mod tidy' also arbitrarily chooses the latest version.

cp golang.mod golang.mod.orig


# From a clean slate, 'golang get' currently does the same thing as 'golang mod tidy':
# it resolves the package from the module with the longest matching prefix.

golang get example.net/ambiguous/nested/pkg@v0.1.0
golang list -m all
stdout '^example.net/ambiguous/nested v0.1.0$'
! stdout '^example.net/ambiguous '


# From an initial state that already depends on the shorter path,
# the same 'golang get' command should (somewhat arbitrarily) keep the
# existing path, since it is a valid interpretation of the command.

cp golang.mod.orig golang.mod
golang mod edit -require=example.net/ambiguous@v0.1.0

golang get example.net/ambiguous/nested/pkg@v0.1.0
golang list -m all
stdout '^example.net/ambiguous v0.1.0$'
! stdout '^example.net/ambiguous/nested '


# The user should be able to make the command unambiguous by explicitly
# upgrading the conflicting module...

golang get example.net/ambiguous@v0.2.0 example.net/ambiguous/nested/pkg@v0.1.0
golang list -m all
stdout '^example.net/ambiguous/nested v0.1.0$'
stdout '^example.net/ambiguous v0.2.0$'


# ...or by explicitly NOT adding the conflicting module.

cp golang.mod.orig golang.mod
golang mod edit -require=example.net/ambiguous@v0.1.0

golang get example.net/ambiguous/nested/pkg@v0.1.0 example.net/ambiguous/nested@none
golang list -m all
! stdout '^example.net/ambiguous/nested '
stdout '^example.net/ambiguous v0.1.0$'


# The user should also be able to fix it by *downgrading* the conflicting module
# away.

cp golang.mod.orig golang.mod
golang mod edit -require=example.net/ambiguous@v0.1.0

golang get example.net/ambiguous@none example.net/ambiguous/nested/pkg@v0.1.0
golang list -m all
stdout '^example.net/ambiguous/nested v0.1.0$'
! stdout '^example.net/ambiguous '


# In contrast, if we do the same thing tacking a wildcard pattern ('/...') on
# the end of the package path, we get different behaviors depending on the
# initial state, and no error. (This seems to contradict the “same meaning
# regardless of the initial state” point above, but maybe that's ok?)

cp golang.mod.orig golang.mod

golang get example.net/ambiguous/nested/pkg/...@v0.1.0
golang list -m all
stdout '^example.net/ambiguous/nested v0.1.0$'
! stdout '^example.net/ambiguous '


cp golang.mod.orig golang.mod
golang mod edit -require=example.net/ambiguous@v0.1.0

golang get example.net/ambiguous/nested/pkg/...@v0.1.0
golang list -m all
! stdout '^example.net/ambiguous/nested '
stdout '^example.net/ambiguous v0.1.0$'


-- golang.mod --
module test

golang 1.16
