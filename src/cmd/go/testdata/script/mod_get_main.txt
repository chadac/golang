env GO111MODULE=on
cp golang.mod.orig golang.mod

# relative and absolute paths must be within the main module.
! golang get ..
stderr '^golang: \.\. \('$WORK'[/\\]golangpath\) is not within module rooted at '$WORK'[/\\]golangpath[/\\]src$'
! golang get $WORK
stderr '^golang: '$WORK' is not within module rooted at '$WORK'[/\\]golangpath[/\\]src$'
! golang get ../...
stderr '^golang: \.\./\.\.\. \('$WORK'[/\\]golangpath([/\\]...)?\) is not within module rooted at '$WORK'[/\\]golangpath[/\\]src$'
! golang get $WORK/...
stderr '^golang: '$WORK'[/\\]\.\.\. is not within module rooted at '$WORK'[/\\]golangpath[/\\]src$'

# @patch and @latest within the main module refer to the current version.
# The main module won't be upgraded, but missing dependencies will be added.
golang get rsc.io/x
grep 'rsc.io/quote v1.5.2' golang.mod
golang get rsc.io/x@upgrade
grep 'rsc.io/quote v1.5.2' golang.mod
cp golang.mod.orig golang.mod
golang get rsc.io/x@patch
grep 'rsc.io/quote v1.5.2' golang.mod
cp golang.mod.orig golang.mod


# Upgrading a package pattern not contained in the main module should not
# attempt to upgrade the main module.
golang get rsc.io/quote/...@v1.5.1
grep 'rsc.io/quote v1.5.1' golang.mod


# The main module cannot be updated to a specific version.
! golang get rsc.io@v0.1.0
stderr '^golang: can''t request version "v0.1.0" of the main module \(rsc.io\)$'

# A package in the main module can't be upgraded either.
! golang get rsc.io/x@v0.1.0
stderr '^golang: package rsc.io/x is in the main module, so can''t request version v0.1.0$'

# Nor can a pattern matching packages in the main module.
! golang get rsc.io/x/...@latest
stderr '^golang: pattern rsc.io/x/... matches package rsc.io/x in the main module, so can''t request version latest$'

-- golang.mod.orig --
module rsc.io

golang 1.13
-- x/x.golang --
package x

import _ "rsc.io/quote"
