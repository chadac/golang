# 'golang get pkg' should not upgrade to a retracted version.
cp golang.mod.orig golang.mod
golang mod edit -require example.com/retract/self/prev@v1.1.0
golang get example.com/retract/self/prev
golang list -m example.com/retract/self/prev
stdout '^example.com/retract/self/prev v1.1.0$'

# 'golang get pkg' should not downgrade from a retracted version when no higher
# version is available.
cp golang.mod.orig golang.mod
golang mod edit -require example.com/retract/self/prev@v1.9.0
golang get example.com/retract/self/prev
stderr '^golang: warning: example.com/retract/self/prev@v1.9.0: retracted by module author: self$'
stderr '^golang: to switch to the latest unretracted version, run:\n\tgolang get example.com/retract/self/prev@latest\n$'
golang list -m example.com/retract/self/prev
stdout '^example.com/retract/self/prev v1.9.0$'

# 'golang get pkg@latest' should downgrade from a retracted version.
cp golang.mod.orig golang.mod
golang mod edit -require example.com/retract/self/prev@v1.9.0
golang get example.com/retract/self/prev@latest
golang list -m example.com/retract/self/prev
stdout '^example.com/retract/self/prev v1.1.0$'

# 'golang get pkg@version' should update to a specific version, even if that
# version is retracted.
cp golang.mod.orig golang.mod
golang get example.com/retract@v1.0.0-bad
stderr '^golang: warning: example.com/retract@v1.0.0-bad: retracted by module author: bad$'
golang list -m example.com/retract
stdout '^example.com/retract v1.0.0-bad$'

# 'golang get -u' should not downgrade from a retracted version when no higher
# version is available.
cp golang.mod.orig golang.mod
golang mod edit -require example.com/retract/self/prev@v1.9.0
golang get -u ./use
stderr '^golang: warning: example.com/retract/self/prev@v1.9.0: retracted by module author: self$'
golang list -m example.com/retract/self/prev
stdout '^example.com/retract/self/prev v1.9.0$'

# 'golang get' should warn if a module needed to build named packages is retracted.
# 'golang get' should not warn about unrelated modules.
golang get ./empty
! stderr retracted
golang get ./use
stderr '^golang: warning: example.com/retract/self/prev@v1.9.0: retracted by module author: self$'

-- golang.mod.orig --
module example.com/use

golang 1.15

-- use/use.golang --
package use

import _ "example.com/retract/self/prev"
-- empty/empty.golang --
package empty
