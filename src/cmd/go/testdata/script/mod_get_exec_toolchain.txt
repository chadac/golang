env TESTGO_VERSION=golang1.21
env TESTGO_VERSION_SWITCH=switch

# GOTOOLCHAIN=auto should run the newer toolchain
env GOTOOLCHAIN=auto
cp golang.mod.new golang.mod
golang get rsc.io/needgolang121 rsc.io/needgolang122 rsc.io/needgolang123 rsc.io/needall
stderr '^golang: rsc.io/needall@v0.0.1 requires golang >= 1.23; switching to golang1.23.9$'
! stderr '\(running'
stderr '^golang: added rsc.io/needall v0.0.1'
grep 'golang 1.23' golang.mod
! grep toolchain golang.mod

# GOTOOLCHAIN=min+auto should run the newer toolchain
env GOTOOLCHAIN=golang1.21+auto
cp golang.mod.new golang.mod
golang get rsc.io/needgolang121 rsc.io/needgolang122 rsc.io/needgolang123 rsc.io/needall
stderr '^golang: rsc.io/needall@v0.0.1 requires golang >= 1.23; switching to golang1.23.9$'
! stderr '\(running'
stderr '^golang: added rsc.io/needall v0.0.1'
grep 'golang 1.23' golang.mod
! grep toolchain golang.mod

# GOTOOLCHAIN=golang1.21 should NOT run the newer toolchain
env GOTOOLCHAIN=golang1.21
cp golang.mod.new golang.mod
! golang get rsc.io/needgolang121 rsc.io/needgolang122 rsc.io/needgolang123 rsc.io/needall
! stderr switching
stderr 'rsc.io/needgolang122@v0.0.1 requires golang >= 1.22'
stderr 'rsc.io/needgolang123@v0.0.1 requires golang >= 1.23'
stderr 'rsc.io/needall@v0.0.1 requires golang >= 1.23'
stderr 'requires golang >= 1.23'
! stderr 'requires golang >= 1.21' # that's us!
cmp golang.mod golang.mod.new

# GOTOOLCHAIN=local should NOT run the newer toolchain
env GOTOOLCHAIN=local
cp golang.mod.new golang.mod
! golang get rsc.io/needgolang121 rsc.io/needgolang122 rsc.io/needgolang123 rsc.io/needall
! stderr switching
stderr 'rsc.io/needgolang122@v0.0.1 requires golang >= 1.22'
stderr 'rsc.io/needgolang123@v0.0.1 requires golang >= 1.23'
stderr 'rsc.io/needall@v0.0.1 requires golang >= 1.23'
stderr 'requires golang >= 1.23'
! stderr 'requires golang >= 1.21' # that's us!
cmp golang.mod golang.mod.new

# golang get golang@1.22 should resolve to the latest 1.22
env GOTOOLCHAIN=local
cp golang.mod.new golang.mod
! golang get golang@1.22
stderr '^golang: updating golang.mod requires golang >= 1.22.9 \(running golang 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp golang.mod.new golang.mod
golang get golang@1.22
stderr '^golang: updating golang.mod requires golang >= 1.22.9; switching to golang1.22.9$'

# golang get golang@1.22rc1 should use 1.22rc1 exactly, not a later release.
env GOTOOLCHAIN=local
cp golang.mod.new golang.mod
! golang get golang@1.22rc1
stderr '^golang: updating golang.mod requires golang >= 1.22rc1 \(running golang 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp golang.mod.new golang.mod
golang get golang@1.22rc1
stderr '^golang: updating golang.mod requires golang >= 1.22rc1; switching to golang1.22.9$'
stderr '^golang: upgraded golang 1.1 => 1.22rc1$'
! stderr '^golang: added toolchain$'

# golang get golang@1.22.1 should use 1.22.1 exactly, not a later release.
env GOTOOLCHAIN=local
cp golang.mod.new golang.mod
! golang get golang@1.22.1
stderr '^golang: updating golang.mod requires golang >= 1.22.1 \(running golang 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp golang.mod.new golang.mod
golang get golang@1.22.1
stderr '^golang: updating golang.mod requires golang >= 1.22.1; switching to golang1.22.9$'
stderr '^golang: upgraded golang 1.1 => 1.22.1$'
! stderr '^golang: added toolchain$'

# golang get needgolang122 (says 'golang 1.22') should use 1.22.0, the earliest release we have available
# (ignoring prereleases).
env GOTOOLCHAIN=local
cp golang.mod.new golang.mod
! golang get rsc.io/needgolang122
stderr '^golang: rsc.io/needgolang122@v0.0.1 requires golang >= 1.22 \(running golang 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp golang.mod.new golang.mod
golang get rsc.io/needgolang122
stderr '^golang: upgraded golang 1.1 => 1.22$'
stderr '^golang: rsc.io/needgolang122@v0.0.1 requires golang >= 1.22; switching to golang1.22.9$'
! stderr '^golang: added toolchain$'

# golang get needgolang1223 (says 'golang 1.22.3') should use golang 1.22.3
env GOTOOLCHAIN=local
cp golang.mod.new golang.mod
! golang get rsc.io/needgolang1223
stderr '^golang: rsc.io/needgolang1223@v0.0.1 requires golang >= 1.22.3 \(running golang 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp golang.mod.new golang.mod
golang get rsc.io/needgolang1223
stderr '^golang: upgraded golang 1.1 => 1.22.3$'
stderr '^golang: rsc.io/needgolang1223@v0.0.1 requires golang >= 1.22.3; switching to golang1.22.9$'
! stderr '^golang: added toolchain$'

# golang get needgolang124 (says 'golang 1.24') should use golang 1.24rc1, the only version available
env GOTOOLCHAIN=local
cp golang.mod.new golang.mod
! golang get rsc.io/needgolang124
stderr '^golang: rsc.io/needgolang124@v0.0.1 requires golang >= 1.24 \(running golang 1.21; GOTOOLCHAIN=local\)'

env GOTOOLCHAIN=auto
cp golang.mod.new golang.mod
golang get rsc.io/needgolang124
stderr '^golang: rsc.io/needgolang124@v0.0.1 requires golang >= 1.24; switching to golang1.24rc1$'
stderr '^golang: upgraded golang 1.1 => 1.24$'
! stderr '^golang: added toolchain$'

# The -C flag should not happen more than once due to switching.
mkdir dir dir/dir
cp golang.mod.new golang.mod
cp golang.mod.new dir/golang.mod
cp golang.mod.new dir/dir/golang.mod
cp p.golang dir/p.golang
cp p.golang dir/dir/p.golang
golang get -C dir rsc.io/needgolang124
stderr '^golang: rsc.io/needgolang124@v0.0.1 requires golang >= 1.24; switching to golang1.24rc1$'
stderr '^golang: upgraded golang 1.1 => 1.24$'
! stderr '^golang: added toolchain1$'
cmp golang.mod.new golang.mod
cmp golang.mod.new dir/dir/golang.mod
grep 'golang 1.24$' dir/golang.mod

-- golang.mod.new --
module m
golang 1.1

-- p.golang --
package p
