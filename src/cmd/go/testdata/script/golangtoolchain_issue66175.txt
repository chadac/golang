env TESTGO_VERSION=golang1.14

# Clear the path so this test doesn't fail if the system running it\
# has a binary named golang1.21 or golang1.22 on its path.
[GOOS:plan9] env path=
[!GOOS:plan9] env PATH=

# check for invalid toolchain in golang.mod
golang mod init m
golang mod edit -golang=1.14 -toolchain=golang1.22
! golang version
stderr 'golang: invalid toolchain: golang1.22 is a language version but not a toolchain version \(golang1.22.x\)'

rm golang.mod
golang mod init m
golang mod edit -golang=1.14 -toolchain=golang1.21
! golang version
stderr 'golang: invalid toolchain: golang1.21 is a language version but not a toolchain version \(golang1.21.x\)'

rm golang.mod
golang mod init m
golang mod edit -golang=1.14 -toolchain=golang1.20
! golang version
stderr 'golang: downloading golang1.20 '


# check for invalid GOTOOLCHAIN
env GOTOOLCHAIN=golang1.14
golang version
stdout 'golang1.14'

env GOTOOLCHAIN=golang1.20
! golang version
stderr 'golang: downloading golang1.20 '

env GOTOOLCHAIN=golang1.21
! golang version
stderr 'golang: invalid toolchain: golang1.21 is a language version but not a toolchain version \(golang1.21.x\)'

env GOTOOLCHAIN=golang1.22
! golang version
stderr 'golang: invalid toolchain: golang1.22 is a language version but not a toolchain version \(golang1.22.x\)'

env GOTOOLCHAIN=golang1.20+auto
! golang version
stderr 'golang: downloading golang1.20 '

env GOTOOLCHAIN=golang1.21+auto
! golang version
stderr 'golang: invalid toolchain: golang1.21 is a language version but not a toolchain version \(golang1.21.x\)'

env GOTOOLCHAIN=golang1.22+auto
! golang version
stderr 'golang: invalid toolchain: golang1.22 is a language version but not a toolchain version \(golang1.22.x\)'

env GOTOOLCHAIN=golang1.21rc3
! golang version
stderr 'golang: downloading golang1.21rc3 '

env GOTOOLCHAIN=golang1.22rc2
! golang version
stderr 'golang: downloading golang1.22rc2 '

env GOTOOLCHAIN=golang1.66
! golang version
stderr 'golang: invalid toolchain: golang1.66 is a language version but not a toolchain version \(golang1.66.x\)'

env GOTOOLCHAIN=golang1.18beta2
! golang version
stderr 'golang: downloading golang1.18beta2 '

# golang1.X is okay for path lookups
env GOTOOLCHAIN=golang1.20+path
! golang version
stderr 'golang: cannot find "golang1.20" in PATH'

env GOTOOLCHAIN=golang1.21+path
! golang version
stderr 'golang: cannot find "golang1.21" in PATH'

env GOTOOLCHAIN=golang1.22+path
! golang version
stderr 'golang: cannot find "golang1.22" in PATH'

# When a toolchain download takes place, download 1.X.0
env GOTOOLCHAIN=auto
rm golang.mod
golang mod init m
golang mod edit -golang=1.300 -toolchain=none
! golang version
stderr 'golang: downloading golang1.300.0 '

rm golang.mod
golang mod init m
golang mod edit -golang=1.21 -toolchain=none
! golang version
stderr 'golang: downloading golang1.21.0 '

rm golang.mod
golang mod init m
golang mod edit -golang=1.22 -toolchain=none
! golang version
stderr 'golang: downloading golang1.22.0 '

rm golang.mod
golang mod init m
golang mod edit -golang=1.15 -toolchain=none
! golang version
stderr 'golang: downloading golang1.15 '
