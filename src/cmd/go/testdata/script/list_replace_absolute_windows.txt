# Test a replacement with an absolute path (so the path isn't
# cleaned by having filepath.Abs called on it). This checks
# whether the modindex logic cleans the modroot path before using
# it.

[!GOOS:windows] skip
[short] skip

golang run print_golang_mod.golang # use this program to write a golang.mod with an absolute path
cp stdout golang.mod

golang list -modfile=golang.mod all
-- print_golang_mod.golang --
//golang:build ignore
package main

import (
    "fmt"
    "os"
)

func main() {
    work := os.Getenv("WORK")
fmt.Printf(`module example.com/mod

require b.com v0.0.0

replace b.com => %s\golangpath\src/modb
`,  work)
}
-- a.golang --
package a

import _ "b.com/b"
-- modb/golang.mod --
module b.com
-- modb/b/b.golang --
package b
