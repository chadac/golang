# Create basic modules and work space.
env TESTGO_VERSION=golang1.50
mkdir m1_22_0
golang mod init -C m1_22_0
golang mod edit -C m1_22_0 -golang=1.22.0 -toolchain=golang1.99.0
mkdir m1_22_1
golang mod init -C m1_22_1
golang mod edit -C m1_22_1 -golang=1.22.1 -toolchain=golang1.99.1
mkdir m1_24_rc0
golang mod init -C m1_24_rc0
golang mod edit -C m1_24_rc0 -golang=1.24rc0 -toolchain=golang1.99.2

golang work init ./m1_22_0 ./m1_22_1
grep '^golang 1.50$' golang.work
! grep toolchain golang.work

# work sync with older modules should leave golang 1.50 in the golang.work.
golang work sync
cat golang.work
grep '^golang 1.50$' golang.work
! grep toolchain golang.work

# work sync with newer modules should update golang 1.21 -> 1.22.1 and toolchain -> golang1.22.9 in golang.work
env TESTGO_VERSION=golang1.21
env TESTGO_VERSION_SWITCH=switch
golang work edit -golang=1.21
grep '^golang 1.21$' golang.work
! grep toolchain golang.work
env GOTOOLCHAIN=local
! golang work sync
stderr '^golang: cannot load module m1_22_0 listed in golang.work file: m1_22_0'${/}'golang.mod requires golang >= 1.22.0 \(running golang 1.21; GOTOOLCHAIN=local\)$'
stderr '^golang: cannot load module m1_22_1 listed in golang.work file: m1_22_1'${/}'golang.mod requires golang >= 1.22.1 \(running golang 1.21; GOTOOLCHAIN=local\)$'
env GOTOOLCHAIN=auto
golang work sync
stderr '^golang: m1_22_1'${/}'golang.mod requires golang >= 1.22.1; switching to golang1.22.9$'
grep '^golang 1.22.1$' golang.work
! grep toolchain golang.work

# work sync with newer modules should update golang 1.22.1 -> 1.24rc1 and drop toolchain
golang work edit -use=./m1_24_rc0
golang work sync
stderr '^golang: m1_24_rc0'${/}'golang.mod requires golang >= 1.24rc0; switching to golang1.24rc1$'
cat golang.work
grep '^golang 1.24rc0$' golang.work
! grep toolchain golang.work
