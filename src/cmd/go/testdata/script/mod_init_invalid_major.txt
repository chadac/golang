env GO111MODULE=on
env GOFLAGS=-mod=mod

! golang mod init example.com/user/repo/v0
stderr '(?s)^golang: invalid module path "example.com/user/repo/v0": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v2$'

! golang mod init example.com/user/repo/v02
stderr '(?s)^golang: invalid module path "example.com/user/repo/v02": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v2$'

! golang mod init example.com/user/repo/v023
stderr '(?s)^golang: invalid module path "example.com/user/repo/v023": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v23$'

! golang mod init example.com/user/repo/v1
stderr '(?s)^golang: invalid module path "example.com/user/repo/v1": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v2$'

! golang mod init example.com/user/repo/v2.0
stderr '(?s)^golang: invalid module path "example.com/user/repo/v2.0": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v2$'

! golang mod init example.com/user/repo/v2.1.4
stderr '(?s)^golang: invalid module path "example.com/user/repo/v2.1.4": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v2$'

! golang mod init example.com/user/repo/v3.5
stderr '(?s)^golang: invalid module path "example.com/user/repo/v3.5": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v3$'

! golang mod init example.com/user/repo/v4.1.4
stderr '(?s)^golang: invalid module path "example.com/user/repo/v4.1.4": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v4$'

! golang mod init example.com/user/repo/v.2.3
stderr '(?s)^golang: invalid module path "example.com/user/repo/v.2.3": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v2$'

! golang mod init example.com/user/repo/v.5.3
stderr '(?s)^golang: invalid module path "example.com/user/repo/v.5.3": major version suffixes must be in the form of /vN and are only allowed for v2 or later(.*)golang mod init example.com/user/repo/v5$'

! golang mod init golangpkg.in/pkg
stderr '(?s)^golang: invalid module path "golangpkg.in/pkg": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/pkg.v1$'

! golang mod init golangpkg.in/user/pkg
stderr '(?s)^golang: invalid module path "golangpkg.in/user/pkg": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/user/pkg.v1$'

! golang mod init golangpkg.in/user/pkg/v0
stderr '(?s)^golang: invalid module path "golangpkg.in/user/pkg/v0": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/user/pkg.v1$'

! golang mod init golangpkg.in/user/pkg/v1
stderr '(?s)^golang: invalid module path "golangpkg.in/user/pkg/v1": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/user/pkg.v1$'

! golang mod init golangpkg.in/user/pkg/v2
stderr '(?s)^golang: invalid module path "golangpkg.in/user/pkg/v2": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/user/pkg.v2$'

! golang mod init golangpkg.in/user/pkg.v
stderr '(?s)^golang: invalid module path "golangpkg.in/user/pkg.v": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/user/pkg.v1$'

! golang mod init golangpkg.in/user/pkg.v0.1
stderr '(?s)^golang: invalid module path "golangpkg.in/user/pkg.v0.1": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/user/pkg.v1$'

! golang mod init golangpkg.in/user/pkg.v.1
stderr '(?s)^golang: invalid module path "golangpkg.in/user/pkg.v.1": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/user/pkg.v1$'

! golang mod init golangpkg.in/user/pkg.v01
stderr '(?s)^golang: invalid module path "golangpkg.in/user/pkg.v01": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/user/pkg.v1$'

! golang mod init golangpkg.in/user/pkg.v.2.3
stderr '(?s)^golang: invalid module path "golangpkg.in/user/pkg.v.2.3": module paths beginning with golangpkg.in/ must always have a major version suffix in the form of .vN(.*)golang mod init golangpkg.in/user/pkg.v2$'

# module paths with a trailing dot are rejected as invalid import paths
! golang mod init example.com/user/repo/v2.
stderr '(?s)^golang: malformed module path "example.com/user/repo/v2.": trailing dot in path element$'

! golang mod init example.com/user/repo/v2..
stderr '(?s)^golang: malformed module path "example.com/user/repo/v2..": trailing dot in path element$'

! golang mod init golangpkg.in/user/pkg.v.2.
stderr '(?s)^golang: malformed module path "golangpkg.in/user/pkg.v.2.": trailing dot in path element$'

! golang mod init golangpkg.in/user/pkg.v.2..
stderr '(?s)^golang: malformed module path "golangpkg.in/user/pkg.v.2..": trailing dot in path element$'

# module paths with spaces are also rejected
! golang mod init 'foo bar'
stderr '(?s)^golang: malformed module path "foo bar": invalid char '' ''$'

! golang mod init 'foo  bar baz'
stderr '(?s)^golang: malformed module path "foo  bar baz": invalid char '' ''$'
