# This test exercises that vendoring works properly using the workspace in the
# the work_prune test case.

golang work vendor
cmp vendor/modules.txt modules.txt.want
golang list -f '{{with .Module}}{{.Path}}@{{.Version}}{{end}}' all
cmp stdout want_versions

golang list -f '{{.Dir}}' example.com/q
stdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]q
golang list -f '{{.Dir}}' example.com/b
stdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]b
golang list -f '{{.Dir}}' example.com/w
stdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]w
golang list -f '{{.Dir}}' example.com/z
stdout $GOPATH[\\/]src[\\/]vendor[\\/]example.com[\\/]z

cmp $GOPATH/src/vendor/example.com/q/q.golang q1_1_0/q.golang

-- modules.txt.want --
## workspace
# example.com/b v1.0.0 => ./b
## explicit; golang 1.18
example.com/b
# example.com/q v1.0.0 => ./q1_0_0
## explicit; golang 1.18
# example.com/q v1.1.0 => ./q1_1_0
## golang 1.18
example.com/q
# example.com/w v1.0.0 => ./w
## golang 1.18
example.com/w
# example.com/z v1.0.0 => ./z1_0_0
## explicit; golang 1.18
# example.com/z v1.1.0 => ./z1_1_0
## golang 1.18
example.com/z
# example.com/q v1.0.5 => ./q1_0_5
# example.com/r v1.0.0 => ./r
# example.com/x v1.0.0 => ./x
# example.com/y v1.0.0 => ./y
-- want_versions --
example.com/a@
example.com/b@v1.0.0
example.com/p@
example.com/q@v1.1.0
example.com/w@v1.0.0
example.com/z@v1.1.0
-- golang.work --
golang 1.18

use (
	./a
	./p
)

replace example.com/b v1.0.0 => ./b
replace example.com/q v1.0.0 => ./q1_0_0
replace example.com/q v1.0.5 => ./q1_0_5
replace example.com/q v1.1.0 => ./q1_1_0
replace example.com/r v1.0.0 => ./r
replace example.com/w v1.0.0 => ./w
replace example.com/x v1.0.0 => ./x
replace example.com/y v1.0.0 => ./y
replace example.com/z v1.0.0 => ./z1_0_0
replace example.com/z v1.1.0 => ./z1_1_0

-- a/golang.mod --
module example.com/a

golang 1.18

require example.com/b v1.0.0
require example.com/z v1.0.0
-- a/foo.golang --
package main

import "example.com/b"

func main() {
	b.B()
}
-- b/golang.mod --
module example.com/b

golang 1.18

require example.com/q v1.1.0
-- b/b.golang --
package b

func B() {
}
-- p/golang.mod --
module example.com/p

golang 1.18

require example.com/q v1.0.0

replace example.com/q v1.0.0 => ../q1_0_0
replace example.com/q v1.1.0 => ../q1_1_0
-- p/main.golang --
package main

import "example.com/q"

func main() {
	q.PrintVersion()
}
-- q1_0_0/golang.mod --
module example.com/q

golang 1.18
-- q1_0_0/q.golang --
package q

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.0.0")
}
-- q1_0_5/golang.mod --
module example.com/q

golang 1.18

require example.com/r v1.0.0
-- q1_0_5/q.golang --
package q

import _ "example.com/r"
-- q1_1_0/golang.mod --
module example.com/q

require example.com/w v1.0.0
require example.com/z v1.1.0

golang 1.18
-- q1_1_0/q.golang --
package q

import _ "example.com/w"
import _ "example.com/z"

import "fmt"

func PrintVersion() {
	fmt.Println("version 1.1.0")
}
-- r/golang.mod --
module example.com/r

golang 1.18

require example.com/r v1.0.0
-- r/r.golang --
package r
-- w/golang.mod --
module example.com/w

golang 1.18

require example.com/x v1.0.0
-- w/w.golang --
package w
-- w/w_test.golang --
package w

import _ "example.com/x"
-- x/golang.mod --
module example.com/x

golang 1.18
-- x/x.golang --
package x
-- x/x_test.golang --
package x
import _ "example.com/y"
-- y/golang.mod --
module example.com/y

golang 1.18
-- y/y.golang --
package y
-- z1_0_0/golang.mod --
module example.com/z

golang 1.18

require example.com/q v1.0.5
-- z1_0_0/z.golang --
package z

import _ "example.com/q"
-- z1_1_0/golang.mod --
module example.com/z

golang 1.18
-- z1_1_0/z.golang --
package z
