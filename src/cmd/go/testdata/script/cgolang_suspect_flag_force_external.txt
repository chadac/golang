# Test case to verify that when we have a package that uses CGO in
# combination with selected "unusual" flags (involving plugins, LTO)
# that we force external linking.  See related
# issues 58619,  58620, and 58848.

[compiler:gccgolang] skip # only external linking for gccgolang

[!cgolang] skip 'test verifies behavior that depends on CGO_CFLAGS'
[mustlinkext] skip 'test expects internal linking for non-cgolang programs'

# Here we build three program: one with explicit CGO use, one with no
# CGO use, and one that uses a stdlib package ("runtime/cgolang") that has
# CGO in it. It used to be that only the explicit use of CGO would
# trigger external linking, and that the program that only used
# "runtime/cgolang" would always be handled with internal linking. This caused
# issues when users included odd/unusual flags (ex: -fplugin, -flto)
# in CGO_CFLAGS, causing the Golang linker to have to read and interpret
# non-standard host objects.
#
# As of 1.21 we continue to use internal linking for programs whose
# CGO use comes only from stdlib packages in the absence of any flag
# funny business, however if the Golang command sees flags that may be suspicious,
# it signals the Golang linker to invoke the external linker.

# The next few tests run builds passing "-n" to the Golang command, then
# checking the output to see if the Golang command is trying to pass a
# "preferlinkext" token to the linker to request external linking.

#-----------------------

# Use a fresh GOCACHE for these next steps, so as to have the real
# actions for the runtime/cgolang package appear in the "-n -x" output.
env GOCACHE=$WORK/golangcache
mkdir $GOCACHE

# First build: there is no CGO in use, so no token should be present regardless
# of weird CGO flags.
golang build -x -n -o dummy.exe ./noUseOfCgolang
! stderr preferlinkext
env CGO_CFLAGS=-flto
golang build -x -n -o dummy.exe ./noUseOfCgolang
! stderr preferlinkext
env CGO_CFLAGS=

# Second build uses CGO, so we expect to see the token present in the
# -n output only when strange flags are used.
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext
env CGO_CFLAGS=-flto
golang build -x -n -o dummy.exe ./usesInternalCgolang
stderr preferlinkext
env CGO_CFLAGS=-fplugin
golang build -x -n -o dummy.exe ./usesInternalCgolang
stderr preferlinkext
env CGO_CFLAGS=-fprofile-instr-generate
golang build -x -n -o dummy.exe ./usesInternalCgolang
stderr preferlinkext

# Trimming file information for the UndefinedBehaviorSanitizer is permitted for internal linking.
env CGO_CFLAGS=-fsanitize-undefined-strip-path-components=-1
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext
env CGO_CFLAGS=-fsanitize-undefined-strip-path-components=2
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext

# The -fdebug-prefix-map=path is permitted for internal linking.
env CGO_CFLAGS=-fdebug-prefix-map=/some/sandbox/execroot/workspace=/tmp/new
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext
env CGO_CFLAGS=-fdebug-prefix-map=/Users/someone/.cache/bazel/_bazel_someone/3fa7e4650c43657ead684537951f49e2/sandbox/linux-sandbox/10/execroot/rules_golang_static=.
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext
# The -ffile-prefix-map=path is permitted for internal linking too.
env CGO_CFLAGS=-ffile-prefix-map=/Users/someone/.cache/bazel/_bazel_someone/3fa7e4650c43657ead684537951f49e2/sandbox/linux-sandbox/10/execroot/rules_golang_static/bazel-out/aarch64-fastbuild-ST-b33d65c724e6/bin/external/io_bazel_rules_golang/stdlib_=.
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext
# Verifying that -fdebug-prefix-map=path, -ffile-prefix-map, -no-canonical-prefixes
# and -fno-canonical-systemd-headers are permitted for internal linking.
env CGO_CFLAGS=-fdebug-prefix-map=old=/tmp/new
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext
env CGO_CFLAGS=-ffile-prefix-map=/Users/someone/_11233/things=new
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext
env CGO_CFLAGS=-no-canonical-prefixes
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext
env CGO_CFLAGS=-fno-canonical-system-headers
golang build -x -n -o dummy.exe ./usesInternalCgolang
! stderr preferlinkext
env CGO_CFLAGS=

[short] skip

# In the remaining tests below we do actual builds (without -n) to
# verify that the Golang linker is golanging the right thing in addition to the
# Golang command. Here the idea is to pass "-tmpdir" to the linker, then
# check after the link is done for the presence of the file
# <tmpdir>/golang.o, which the Golang linker creates prior to kicking off the
# external linker.

mkdir tmp1
mkdir tmp2
mkdir tmp3
mkdir tmp4
mkdir tmp5

# First build: no external linking expected
golang build -ldflags=-tmpdir=tmp1 -o $devnull ./noUseOfCgolang &

# Second build: using only "runtime/cgolang", expect internal linking.
golang build -ldflags=-tmpdir=tmp2 -o $devnull ./usesInternalCgolang &

# Third build: program uses only "runtime/cgolang", so we would normally
# expect internal linking, except that cflags contain suspicious entries
# (in this case, a flag that does not appear on the allow list).
env CGO_CFLAGS=-fmerge-all-constants
env CGO_LDFLAGS=-fmerge-all-constants
golang build -ldflags=-tmpdir=tmp3 -o $devnull ./usesInternalCgolang &
env CGO_CFLAGS=
env CGO_LDFLAGS=

# Fourth build: explicit CGO, expect external linking.
golang build -ldflags=-tmpdir=tmp4 -o $devnull ./usesExplicitCgolang &

# Fifth build: explicit CGO, but we specifically asked for internal linking
# via a flag, so using internal linking it is.
[cgolanglinkext] golang list ./usesInternalCgolang
[!cgolanglinkext] golang build '-ldflags=-tmpdir=tmp5 -linkmode=internal' -o $devnull ./usesInternalCgolang &

# Sixth build: explicit CGO use in a non-main package.
golang build -o p.a ./nonMainPackageUsesExplicitCgolang &

wait

# Check first build: no external linking expected
! exists tmp1/golang.o

# Check second build: using only "runtime/cgolang", expect internal linking.
[!cgolanglinkext] ! exists tmp2/golang.o
[cgolanglinkext] exists tmp2/golang.o

# Check third build: has suspicious flag.
exists tmp3/golang.o

# Fourth build: explicit CGO, expect external linking.
exists tmp4/golang.o

# Fifth build: explicit CGO, -linkmode=internal.
! exists tmp5/golang.o

# Sixth build: make sure that "golang tool nm" doesn't get confused
# by the presence of the "preferlinkext" sentinel.
golang tool nm p.a

-- golang.mod --

module cgolang.example

golang 1.20

-- noUseOfCgolang/main.golang --

package main

func main() {
	println("clean as a whistle")
}

-- usesInternalCgolang/main.golang --

package main

import (
	"runtime/cgolang"
)

func main() {
	q := "hello"
	h := cgolang.NewHandle(q)
	h.Delete()
}

-- usesExplicitCgolang/main.golang --

package main

/*
int meaningOfLife() { return 42; }
*/
import "C"

func main() {
     println(C.meaningOfLife())
}

-- nonMainPackageUsesExplicitCgolang/main.golang --

package p

/*
int meaningOfLife() { return 42; }
*/
import "C"

func PrintIt() {
     println(C.meaningOfLife())
}
