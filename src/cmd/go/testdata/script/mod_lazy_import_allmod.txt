# This test demonstrates dependency resolution when the main module imports a
# new package from a previously-test-only dependency.
#
# When lazy loading is active, the loader will not load dependencies of any
# module whose packages are *only* imported by tests outside the main module. If
# the main module is changed to import a package from such a module, the
# dependencies of that module will need to be reloaded.

# The import graph used in this test looks like:
#
# m ---- a
#  \     |
#   \    a_test ---- b/x
#    \
#      --------------b/y (new) ---- c
#
# Where b/x and b/y are disjoint packages, but both contained in module b.
#
# The module dependency graph initially looks like:
#
# m ---- a.1 ---- b.1 ---- c.1
#
# This configuration is similar to that used in mod_lazy_new_import,
# but the new import is from what is initially a test-only dependency.

# Control case: in Golang 1.14, the original golang.mod is tidy,
# and the dependency on c is eagerly loaded.

cp golang.mod golang.mod.orig
golang mod tidy
cmp golang.mod.orig golang.mod

golang list -m all
stdout '^a v0.1.0 '
stdout '^b v0.1.0 '
stdout '^c v0.1.0 '

# After adding a new import of b/y,
# the import of c from b/y should resolve to the version required by b.

cp m.golang m.golang.orig
cp m.golang.new m.golang
golang mod tidy
cmp golang.mod.new golang.mod

golang list -m all
stdout '^a v0.1.0 '
stdout '^b v0.1.0 '
stdout '^c v0.1.0 '

# With lazy loading, the golang.mod requirements are the same,
# but the dependency on c is initially pruned out.

cp m.golang.orig m.golang
cp golang.mod.orig golang.mod
golang mod edit -golang=1.17
golang mod edit -golang=1.17 golang.mod.new

cp golang.mod golang.mod.orig
golang mod tidy
cmp golang.mod.orig golang.mod

golang list -m all
stdout '^a v0.1.0 '
stdout '^b v0.1.0 '
! stdout '^c '

# After adding a new direct import of b/y,
# the existing version of b should be promoted to a root,
# bringing the version of c required by b into the build list.

cp m.golang.new m.golang
golang mod tidy
cmp golang.mod.lazy golang.mod

golang list -m all
stdout '^a v0.1.0 '
stdout '^b v0.1.0 '
stdout '^c v0.1.0 '

-- m.golang --
package main

import (
	"fmt"

	_ "a"  // a_test imports b/x.
)

func main() {
}
-- m.golang.new --
package main

import (
	"fmt"

	_ "a"  // a_test imports b/x.
	"b/y"  // This is a new import, not yet reflected in the golang.mod file.
)

func main() {
	fmt.Println(b.CVersion())
}
-- golang.mod --
module m

golang 1.14

require a v0.1.0

replace (
	a v0.1.0 => ./a1
	b v0.1.0 => ./b1
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
)
-- golang.mod.new --
module m

golang 1.14

require (
	a v0.1.0
	b v0.1.0
)

replace (
	a v0.1.0 => ./a1
	b v0.1.0 => ./b1
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
)
-- golang.mod.lazy --
module m

golang 1.17

require (
	a v0.1.0
	b v0.1.0
)

require c v0.1.0 // indirect

replace (
	a v0.1.0 => ./a1
	b v0.1.0 => ./b1
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
)
-- a1/golang.mod --
module a

golang 1.17

require b v0.1.0
-- a1/a.golang --
package a
-- a1/a_test.golang --
package a_test

import _ "b/x"
-- b1/golang.mod --
module b

golang 1.17

require c v0.1.0
-- b1/x/x.golang --
package x
-- b1/y/y.golang --
package y

import "c"

func CVersion() string {
	return c.Version
}
-- c1/golang.mod --
module c

golang 1.17
-- c1/c.golang --
package c

const Version = "v0.1.0"
-- c2/golang.mod --
This file should be unused.
-- c2/c.golang --
This file should be unused.
