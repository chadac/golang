cp golang.mod golang.mod.orig

# For modules whose golang.mod file does not include a 'golang' directive,
# we assume the language and dependency semantics of Golang 1.16,
# but do not trigger “automatic vendoring” mode (-mod=vendor),
# which was added in Golang 1.14 and was not triggered
# under the same conditions in Golang 1.16 (which would instead
# default to -mod=readonly when no 'golang' directive is present).

# For Golang 1.16 modules, 'all' should prune out dependencies of tests,
# even if the 'golang' directive is missing.

golang list -mod=readonly all
stdout '^example.com/dep$'
! stdout '^example.com/testdep$'
cp stdout list-1.txt
cmp golang.mod golang.mod.orig

# We should only default to -mod=vendor if the 'golang' directive is explicit in the
# golang.mod file. Otherwise, we don't actually know whether the module was written
# against Golang 1.11 or 1.16. We would have to update the golang.mod file to clarify,
# and as of Golang 1.16 we don't update the golang.mod file by default.
#
# If we set -mod=vendor explicitly, we shouldn't apply the Golang 1.14
# consistency check, because — again — we don't know whether we're in a 1.11
# module or a bad-script-edited 1.16 module.

! golang list -mod=vendor all
! stderr '^golang: inconsistent vendoring'
stderr 'cannot find module providing package example.com/badedit: import lookup disabled by -mod=vendor'

# When we set -mod=mod, the golang version should be updated immediately,
# to the current version, converting the requirements from eager to lazy.
#
# Since we don't know which requirements are actually relevant to the main
# module, all requirements are added as roots, making the requirements untidy.

golang list -mod=mod all
! stdout '^example.com/testdep$'
cmp stdout list-1.txt
cmpenv golang.mod golang.mod.untidy

golang mod tidy
cmpenv golang.mod golang.mod.tidy

# On the other hand, if we jump straight to 'golang mod tidy',
# the requirements remain tidy from the start.

cp golang.mod.orig golang.mod
golang mod tidy
cmpenv golang.mod golang.mod.tidy


# The updated version should have been written back to golang.mod, so now the 'golang'
# directive is explicit. -mod=vendor should trigger by default, and the stronger
# Golang 1.14 consistency check should apply.
! golang list all
stderr '^golang: inconsistent vendoring'
! stderr badedit


-- golang.mod --
module example.com/m

require example.com/dep v0.1.0

replace (
	example.com/dep v0.1.0 => ./dep
	example.com/testdep v0.1.0 => ./testdep
)
-- golang.mod.untidy --
module example.com/m

golang $golangversion

require example.com/dep v0.1.0

require example.com/testdep v0.1.0 // indirect

replace (
	example.com/dep v0.1.0 => ./dep
	example.com/testdep v0.1.0 => ./testdep
)
-- golang.mod.tidy --
module example.com/m

golang $golangversion

require example.com/dep v0.1.0

replace (
	example.com/dep v0.1.0 => ./dep
	example.com/testdep v0.1.0 => ./testdep
)
-- vendor/example.com/dep/dep.golang --
package dep
import _ "example.com/badedit"
-- vendor/modules.txt --
HAHAHA this is broken.

-- m.golang --
package m

import _ "example.com/dep"

const x = 1_000

-- dep/golang.mod --
module example.com/dep

require example.com/testdep v0.1.0
-- dep/dep.golang --
package dep
-- dep/dep_test.golang --
package dep_test

import _ "example.com/testdep"

-- testdep/golang.mod --
module example.com/testdep
-- testdep/testdep.golang --
package testdep
