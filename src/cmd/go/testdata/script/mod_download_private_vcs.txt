env GO111MODULE=on

# Testing stderr for git ls-remote; turn off proxy.
[!net:github.com] skip
[!git] skip
env GOPROXY=direct

# Redirect git to a test-specific .gitconfig.
# GIT_CONFIG_GLOBAL suffices for git 2.32.0 and newer.
# For older git versions we also set $HOME.
env GIT_CONFIG_GLOBAL=$WORK${/}home${/}golangpher${/}.gitconfig
env HOME=$WORK${/}home${/}golangpher
exec git config --global --show-origin user.name
stdout 'Golang Golangpher'

! golang mod download github.com/golanglang/nonexist@latest
stderr 'Confirm the import path was entered correctly.'
stderr 'If this is a private repository, see https://golanglang.org/doc/faq#git_https for additional information.'
! stdout .

# Fetching a nonexistent commit should return an "unknown revision"
# error message.
! golang mod download github.com/golanglang/term@86186f3aba07ed0212cfb944f3398997d2d07c6b
stderr '^golang: github.com/golanglang/term@86186f3aba07ed0212cfb944f3398997d2d07c6b: invalid version: unknown revision 86186f3aba07ed0212cfb944f3398997d2d07c6b$'
! stdout .

! golang mod download github.com/golanglang/nonexist@master
stderr '^Confirm the import path was entered correctly.$'
stderr '^If this is a private repository, see https://golanglang.org/doc/faq#git_https for additional information.$'
! stderr 'unknown revision'
! stdout .

[!exec:false] stop

# Test that Git clone errors will be shown to the user instead of a generic
# "unknown revision" error. To do this we want to force git ls-remote to return
# an error we don't already have special handling for. See golanglang/golang#42751.
exec git config --global url.git@github.com.insteadOf https://github.com/
env GIT_SSH_COMMAND=false
! golang install github.com/golanglang/nonexist@master
stderr 'fatal: Could not read from remote repository.'
! stderr 'unknown revision'
! stdout .

-- $WORK/home/golangpher/.gitconfig --
[user]
	name = Golang Golangpher
	email = golangpher@golanglang.org
