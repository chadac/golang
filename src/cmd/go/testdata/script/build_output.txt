[compiler:gccgolang] skip 'gccgolang has no standard packages'
[short] skip

[!GOOS:windows] env NONEXE='.exe'
[GOOS:windows] env NONEXE=''

env GOBIN=$WORK/tmp/bin
golang install m/isarchive &

golang build x.golang
exists -exec x$GOEXE
rm x$GOEXE
! exists x$NONEXE

golang build -o myprog x.golang
! exists x
! exists x.exe
exists -exec myprog
! exists myprogr.exe

! exists bin
golang build -o bin/x x.golang
exists -exec bin/x
rm bin

! exists bin
golang build -o bin/ x.golang
exists -exec bin/x$GOEXE
rm bin

[GOOS:windows] ! exists bin
[GOOS:windows] golang build -o bin\x x.golang
[GOOS:windows] exists -exec bin\x
[GOOS:windows] rm bin

[GOOS:windows] ! exists bin
[GOOS:windows] golang build -o bin\ x.golang
[GOOS:windows] exists -exec bin\x.exe
[GOOS:windows] rm bin

! exists bin
mkdir bin
golang build -o bin x.golang
exists -exec bin/x$GOEXE
rm bin

golang build p.golang
! exists p
! exists p.a
! exists p.o
! exists p.exe

wait # for isarchive

golang build -o p.a p.golang
exists p.a
exec $GOBIN/isarchive p.a

golang build cmd/golangfmt
exists -exec golangfmt$GOEXE
rm golangfmt$GOEXE
! exists golangfmt$NONEXE

golang build -o mygolangfmt cmd/golangfmt
exists -exec mygolangfmt
! exists mygolangfmt.exe
! exists golangfmt
! exists golangfmt.exe

golang build sync/atomic
! exists atomic
! exists atomic.exe

golang build -o myatomic.a sync/atomic
exists myatomic.a
exec $GOBIN/isarchive myatomic.a
! exists atomic
! exists atomic.a
! exists atomic.exe

! golang build -o whatever cmd/golangfmt sync/atomic
stderr 'multiple packages'

-- golang.mod --
module m

golang 1.16
-- x.golang --
package main

func main() {}
-- p.golang --
package p
-- isarchive/isarchive.golang --
package main

import (
	"bytes"
	"fmt"
	"io"
	"os"
)

func main() {
	f, err := os.Open(os.Args[1])
	if err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
	buf := make([]byte, 100)
	io.ReadFull(f, buf)
	f.Close()
	if !bytes.HasPrefix(buf, []byte("!<arch>\n")) {
		fmt.Fprintf(os.Stderr, "file %s exists but is not an archive\n", os.Args[1])
		os.Exit(1)
	}
}
