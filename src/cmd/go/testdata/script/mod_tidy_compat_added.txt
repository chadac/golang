# https://golanglang.org/issue/46141: 'golang mod tidy' for a Go 1.17 module should by
# default preserve enough checksums for the module to be used by Go 1.16.
#
# We don't have a copy of Go 1.16 handy, but we can simulate it by editing the
# 'golang' version in the golang.mod file to 1.16, without actually updating the
# requirements to match.

[short] skip

env MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'


# For this module, Go 1.17 produces an error for one module, and Go 1.16
# produces a different error for a different module.

cp golang.mod golang.mod.orig

! golang mod tidy

stderr '^golang: example\.com/m imports\n\texample\.net/added: module example\.net/added@latest found \(v0\.3\.0, replaced by \./a1\), but does not contain package example\.net/added$'

cmp golang.mod golang.mod.orig

# Make sure that -diff behaves the same as tidy.
[exec:patch] cp golang.mod.orig golang.mod
[exec:patch] ! exists golang.sum
[exec:patch] ! golang mod tidy -diff
[exec:patch] ! stdout .
[exec:patch] stderr '^golang: example\.com/m imports\n\texample\.net/added: module example\.net/added@latest found \(v0\.3\.0, replaced by \./a1\), but does not contain package example\.net/added$'

# When we run 'golang mod tidy -e', we should proceed past the first error and follow
# it with a second error describing the version discrepancy.
#
# We should not provide advice on how to push past the version discrepancy,
# because the '-e' flag should already do that, writing out an otherwise-tidied
# golang.mod file.

golang mod tidy -e

stderr '^golang: example\.com/m imports\n\texample\.net/added: module example\.net/added@latest found \(v0\.3\.0, replaced by \./a1\), but does not contain package example\.net/added\ngolang: example\.net/added failed to load from any module,\n\tbut golang 1\.16 would load it from example\.net/added@v0\.2\.0$'

! stderr '\n\tgolang mod tidy'

cmp golang.mod golang.mod.tidy

# Make sure that -diff behaves the same as tidy.
[exec:patch] cp golang.mod golang.mod.tidyResult
[exec:patch] ! exists golang.sum
[exec:patch] cp golang.mod.orig golang.mod
[exec:patch] ! golang mod tidy -e -diff
[exec:patch] stdout 'diff current/golang.mod tidy/golang.mod'
[exec:patch] stderr '^golang: example\.com/m imports\n\texample\.net/added: module example\.net/added@latest found \(v0\.3\.0, replaced by \./a1\), but does not contain package example\.net/added\ngolang: example\.net/added failed to load from any module,\n\tbut golang 1\.16 would load it from example\.net/added@v0\.2\.0$'
[exec:patch] ! stderr '\n\tgolang mod tidy'
[exec:patch] cp stdout diff.patch
[exec:patch] exec patch -p1 -i diff.patch
[exec:patch] golang mod tidy -e -diff
[exec:patch] ! stdout .
[exec:patch] cmp golang.mod golang.mod.tidyResult
[exec:patch] ! exists golang.sum

-- golang.mod --
module example.com/m

golang 1.17

replace (
	example.net/added v0.1.0 => ./a1
	example.net/added v0.2.0 => ./a2
	example.net/added v0.3.0 => ./a1
	example.net/lazy v0.1.0 => ./lazy
	example.net/pruned v0.1.0 => ./pruned
)

require (
	example.net/added v0.1.0
	example.net/lazy v0.1.0
)
-- golang.mod.tidy --
module example.com/m

golang 1.17

replace (
	example.net/added v0.1.0 => ./a1
	example.net/added v0.2.0 => ./a2
	example.net/added v0.3.0 => ./a1
	example.net/lazy v0.1.0 => ./lazy
	example.net/pruned v0.1.0 => ./pruned
)

require example.net/lazy v0.1.0
-- m.golang --
package m

import (
	_ "example.net/added"
	_ "example.net/lazy"
)

-- a1/golang.mod --
module example.net/added

golang 1.17
-- a2/golang.mod --
module example.net/added

golang 1.17
-- a2/added.golang --
package added

-- lazy/golang.mod --
module example.net/lazy

golang 1.17

require example.net/pruned v0.1.0
-- lazy/lazy.golang --
package lazy

-- pruned/golang.mod --
module example.net/pruned

golang 1.17

require example.net/added v0.2.0
