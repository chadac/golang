[short] skip 'runs golang build'

# First run: executable for bar is not cached.
# Make sure it's not called a.out
golang tool bar
stdout 'my name is: bar'$GOEXE
! stdout 'a.out'

# Second run: executable is cached. Make sure it
# has the right name.
golang tool bar
stdout 'my name is: bar'$GOEXE
! stdout 'a.out'

# Third run: with arguments
# https://golang.dev/issue/70509
golang tool bar --baz
stdout 'my name is: bar'$GOEXE
! stdout 'a.out'

# Test tool package paths that end in v2
# to ensure we use the second to last component.

# Don't use v2 as the short name of the tool.
! golang tool v2
stderr 'golang: no such tool "v2"'

# Use the second to last component as the short
# name of the tool.
golang tool foo
stdout 'my name is: foo'$GOEXE

# golang run should use the same name for the tool
# We need to use a fresh cache, or we'd end up with an executable cache hit
# from when we ran built the tool to run golang tool above, and we'd just
# reuse the name from the test case above.
env GOCACHE=$WORK/cache2
golang run example.com/foo/v2
stdout 'my name is: foo'$GOEXE

-- golang.mod --
module example.com/foo

golang 1.24

tool example.com/foo/bar
tool example.com/foo/v2

require example.com/foo/v2 v2.0.0

replace example.com/foo/v2 => ./v2
-- bar/bar.golang --
package main

import (
	"fmt"
	"os"
	"path/filepath"
)

func main() {
	fmt.Println("my name is:", filepath.Base(os.Args[0]))
}
-- v2/golang.mod --
module example.com/foo/v2

golang 1.24
-- v2/main.golang --
package main

import (
	"fmt"
	"os"
	"path/filepath"
)

func main() {
	fmt.Println("my name is:", filepath.Base(os.Args[0]))
}
