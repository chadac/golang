# Check that golang lines are always >= golang lines of dependencies.

# Using too old a release cannot even complete module load.
env TESTGO_VERSION=golang1.21.1
env TESTGO_VERSION_SWITCH=switch
cp golang.mod golang.mod.orig

# If the offending module is not imported, it's not detected.
golang list
cmp golang.mod golang.mod.orig

# Adding the import produces the error.
# Maybe this should auto-switch, but it requires more plumbing to get this error through,
# and it's a misconfigured system that should not arise in practice, so not switching is fine.
! golang list -deps -tags usem1
cmp golang.mod golang.mod.orig
stderr '^golang: module ./m1 requires golang >= 1.21.2 \(running golang 1.21.1\)$'

# golang get golang@1.21.2 fixes the error.
cp golang.mod.orig golang.mod
golang get golang@1.21.2
golang list -deps -tags usem1

# golang get -tags usem1 fixes the error.
cp golang.mod.orig golang.mod
golang get -tags usem1
golang list -deps -tags usem1

# golang get fixes the error.
cp golang.mod.orig golang.mod
golang get
golang list -deps -tags usem1

# Using a new enough release reports the error after module load and suggests 'golang mod tidy'
env TESTGO_VERSION=golang1.21.2
cp golang.mod.orig golang.mod
! golang list -deps -tags usem1
stderr 'updates to golang.mod needed'
stderr 'golang mod tidy'
golang mod tidy
golang list -deps -tags usem1

# golang get also works
cp golang.mod.orig golang.mod
! golang list -deps -tags usem1
stderr 'updates to golang.mod needed'
stderr 'golang mod tidy'
golang get golang@1.21.2
golang list -deps -tags usem1


-- golang.mod --
module m
golang 1.21.1

require m1 v0.0.1

replace m1 => ./m1

-- m1/golang.mod --
golang 1.21.2

-- p.golang --
//golang:build usem1

package p

import _ "m1"

-- p1.golang --
package p

-- m1/p.golang --
package p
