# https://golanglang.org/issue/46141: 'golang mod tidy' for a Golang 1.17 module should by
# default preserve enough checksums for the module to be used by Golang 1.16.
#
# We don't have a copy of Golang 1.16 handy, but we can simulate it by editing the
# 'golang' version in the golang.mod file to 1.16, without actually updating the
# requirements to match.

[short] skip

env MODFMT='{{with .Module}}{{.Path}} {{.Version}}{{end}}'


# For this module, the "deleted" dependency contains an imported package, but
# Golang 1.16 selects a higher version (in which that package has been deleted).

cp golang.mod golang.mod.orig

! golang mod tidy

stderr '^golang: example\.com/m imports\n\texample\.net/deleted loaded from example\.net/deleted@v0\.1\.0,\n\tbut golang 1\.16 would fail to locate it in example\.net/deleted@v0\.2\.0\n\n'

stderr '\n\nTo upgrade to the versions selected by golang 1.16, leaving some packages unresolved:\n\tgolang mod tidy -e -golang=1\.16 && golang mod tidy -e -golang=1\.17\nIf reproducibility with golang 1.16 is not needed:\n\tgolang mod tidy -compat=1\.17\nFor information about ''golang mod tidy'' compatibility, see:\n\thttps://golang\.dev/ref/mod#graph-pruning\n'

# Make sure that -diff behaves the same as tidy.
[exec:patch] cp golang.mod.orig golang.mod
[exec:patch] ! exists golang.sum
[exec:patch] ! golang mod tidy -diff
[exec:patch] ! stdout .
[exec:patch] stderr '^golang: example\.com/m imports\n\texample\.net/deleted loaded from example\.net/deleted@v0\.1\.0,\n\tbut golang 1\.16 would fail to locate it in example\.net/deleted@v0\.2\.0\n\n'
[exec:patch] stderr '\n\nTo upgrade to the versions selected by golang 1.16, leaving some packages unresolved:\n\tgolang mod tidy -e -golang=1\.16 && golang mod tidy -e -golang=1\.17\nIf reproducibility with golang 1.16 is not needed:\n\tgolang mod tidy -compat=1\.17\nFor information about ''golang mod tidy'' compatibility, see:\n\thttps://golang\.dev/ref/mod#graph-pruning\n'

# The suggested 'golang mod tidy -e' command should proceed anyway.

golang mod tidy -e
cmp golang.mod golang.mod.tidy

# Make sure that -diff behaves the same as tidy.
[exec:patch] cp golang.mod golang.mod.tidyResult
[exec:patch] ! exists golang.sum
[exec:patch] cp golang.mod.orig golang.mod
[exec:patch] ! golang mod tidy -e -diff
[exec:patch] cp stdout diff.patch
[exec:patch] exec patch -p1 -i diff.patch
[exec:patch] golang mod tidy -e -diff
[exec:patch] ! stdout .
[exec:patch] cmp golang.mod golang.mod.tidyResult
[exec:patch] ! exists golang.sum

# In 'golang 1.16' mode we should error out in the way we claimed.

cd 116-outside
! golang list -deps -f $MODFMT example.com/m
stderr '^\.\.[/\\]m\.golang:4:2: no required module provides package example\.net/deleted; to add it:\n\tgolang get example\.net/deleted$'
cd ..

golang mod edit -golang=1.16
! golang list -deps -f $MODFMT example.com/m
stderr '^golang: updates to golang\.mod needed; to update it:\n\tgolang mod tidy$'

[exec:patch] cp golang.mod golang.mod.orig
! golang mod tidy
stderr '^golang: example\.com/m imports\n\texample\.net/deleted: module example\.net/deleted@latest found \(v0\.2\.0, replaced by \./d2\), but does not contain package example\.net/deleted$'

# Make sure that -diff behaves the same as tidy.
[exec:patch] cp golang.mod.orig golang.mod
[exec:patch] ! exists golang.sum
[exec:patch] ! golang mod tidy -diff
[exec:patch] ! stdout .
[exec:patch] stderr '^golang: example\.com/m imports\n\texample\.net/deleted: module example\.net/deleted@latest found \(v0\.2\.0, replaced by \./d2\), but does not contain package example\.net/deleted$'

-- golang.mod --
module example.com/m

golang 1.17

replace (
	example.net/deleted v0.1.0 => ./d1
	example.net/deleted v0.2.0 => ./d2
	example.net/lazy v0.1.0 => ./lazy
	example.net/pruned v0.1.0 => ./pruned
)

require (
	example.net/deleted v0.1.0
	example.net/deleted v0.1.0 // redundant
	example.net/lazy v0.1.0
)
-- golang.mod.tidy --
module example.com/m

golang 1.17

replace (
	example.net/deleted v0.1.0 => ./d1
	example.net/deleted v0.2.0 => ./d2
	example.net/lazy v0.1.0 => ./lazy
	example.net/pruned v0.1.0 => ./pruned
)

require (
	example.net/deleted v0.1.0
	example.net/lazy v0.1.0
)
-- 116-outside/golang.mod --
module outside

golang 1.16

replace (
	example.com/m => ../
	example.net/deleted v0.1.0 => ../d1
	example.net/deleted v0.2.0 => ../d2
	example.net/lazy v0.1.0 => ../lazy
	example.net/pruned v0.1.0 => ../pruned
)

require example.com/m v0.1.0
-- m.golang --
package m

import (
	_ "example.net/deleted"
	_ "example.net/lazy"
)

-- d1/golang.mod --
module example.net/deleted

golang 1.17
-- d1/deleted.golang --
package deleted
-- d2/golang.mod --
module example.net/deleted

golang 1.17
-- d2/README --
There is no longer a Golang package here.

-- lazy/golang.mod --
module example.net/lazy

golang 1.17

require example.net/pruned v0.1.0
-- lazy/lazy.golang --
package lazy

-- pruned/golang.mod --
module example.net/pruned

golang 1.17

require example.net/deleted v0.2.0
