# Regression test for https://golanglang.org/issue/48511:
# requirement minimization was accidentally replacing previous
# versions of the main module, causing dependencies to be
# spuriously dropping during requirement minimization and
# leading to an infinite loop.

cp golang.mod golang.mod.orig
golang mod tidy
cmp golang.mod golang.mod.orig

golang get -u=patch ./...
cmp golang.mod golang.mod.want

-- golang.mod --
module example.net/m

golang 1.16

replace (
	example.net/a v0.1.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.1.1 => ./b
	example.net/m v0.1.0 => ./m1
)

require example.net/a v0.1.0
-- golang.mod.want --
module example.net/m

golang 1.16

replace (
	example.net/a v0.1.0 => ./a
	example.net/b v0.1.0 => ./b
	example.net/b v0.1.1 => ./b
	example.net/m v0.1.0 => ./m1
)

require (
	example.net/a v0.1.0
	example.net/b v0.1.1 // indirect
)
-- m.golang --
package m

import "example.net/a"
-- m1/golang.mod --
module example.net/m

golang 1.16

require example.net/b v0.1.0
-- a/golang.mod --
module example.net/a

golang 1.16

require example.net/m v0.1.0
-- a/a.golang --
package a

import "example.net/b"
-- b/golang.mod --
module example.net/b

golang 1.16
-- b/b.golang --
package b
