env GO111MODULE=off
env GODEBUG=golangcachetest=1

[!compiler:gc] skip
[short] skip # clears cache, rebuilds too much

# Set up fresh GOCACHE.
env GOCACHE=$WORK/golangcache
mkdir $GOCACHE

# Building a trivial non-main package should run compiler the first time.
golang build -x -gcflags=-m lib.golang
stderr 'compile( |\.exe"?)'
stderr 'lib.golang:2.* can inline f'

# ... but not the second, even though it still prints the compiler output.
golang build -x -gcflags=-m lib.golang
! stderr 'compile( |\.exe"?)'
stderr 'lib.golang:2.* can inline f'

# Building a trivial main package should run the compiler and linker the first time.
golang build -x -gcflags=-m -ldflags='-v -w' main.golang
stderr 'compile( |\.exe"?)'
stderr 'main.golang:2.* can inline main' # from compiler
stderr 'link(\.exe"?)? -'
stderr '\d+ symbols' # from linker

# ... but not the second, even though it still prints the compiler and linker output.
golang build -x -gcflags=-m -ldflags='-v -w' main.golang
! stderr 'compile( |\.exe"?)'
stderr 'main.golang:2.* can inline main' # from compiler
! stderr 'link(\.exe"?)? -'
stderr '\d+ symbols' # from linker

# Running a test should run the compiler, linker, and the test the first time.
golang test -v -x -gcflags=-m -ldflags=-v p
stderr 'compile( |\.exe"?)'
stderr 'p_test.golang:.*can inline Test' # from compile of p_test
stderr 'testmain\.golang:.*inlin' # from compile of testmain
stderr 'link(\.exe"?)? -'
stderr '\d+ symbols' # from linker
stderr 'p\.test( |\.exe"?)'
stdout 'TEST' # from test

# ... but not the second, even though it still prints the compiler, linker, and test output.
golang test -v -x -gcflags=-m -ldflags=-v p
! stderr 'compile( |\.exe"?)'
stderr 'p_test.golang:.*can inline Test' # from compile of p_test
stderr 'testmain\.golang:.*inlin' # from compile of testmain
! stderr 'link(\.exe"?)? -'
stderr '\d+ symbols' # from linker
! stderr 'p\.test( |\.exe"?)'
stdout 'TEST' # from test


-- lib.golang --
package p
func f(x *int) *int { return x }

-- main.golang --
package main
func main() {}

-- p/p_test.golang --
package p
import "testing"
func Test(t *testing.T) {println("TEST")}
