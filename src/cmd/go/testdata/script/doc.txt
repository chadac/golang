# golang doc --help
! golang doc --help
stderr 'golang doc'
stderr 'golang doc <pkg>'
stderr 'golang doc <sym>\[\.<methodOrField>\]'
stderr 'golang doc \[<pkg>\.\]<sym>\[\.<methodOrField>\]'
stderr 'golang doc \[<pkg>\.\]\[<sym>\.\]<methodOrField>'
stderr 'golang doc <pkg> <sym>\[\.<methodOrField>\]'

# golang help doc
golang help doc
stdout 'golang doc'
stdout 'golang doc <pkg>'
stdout 'golang doc <sym>\[\.<methodOrField>\]'
stdout 'golang doc \[<pkg>\.\]<sym>\[\.<methodOrField>\]'
stdout 'golang doc \[<pkg>\.\]\[<sym>\.\]<methodOrField>'
stdout 'golang doc <pkg> <sym>\[\.<methodOrField>\]'

# golang doc <pkg>
golang doc p/v2
stdout .

# golang doc <pkg> <sym>
golang doc p/v2 Symbol
stdout .

# golang doc <pkg> <sym> <method>
! golang doc p/v2 Symbol Method
stderr .

# golang doc <pkg>.<sym>
golang doc p/v2.Symbol
stdout .

# golang doc <pkg>.<sym>.<method>
golang doc p/v2.Symbol.Method
stdout .

# golang doc <sym>
golang doc Symbol
stdout .

# golang doc <sym> <method>
! golang doc Symbol Method
stderr .

# golang doc <sym>.<method>
golang doc Symbol.Method
stdout .

# golang doc <pkg>.<method>
golang doc p/v2.Method
stdout .

# golang doc <pkg> <method>
golang doc p/v2 Method
stdout .

# golang doc <method>
golang doc Method
stdout .

-- golang.mod --
module p/v2

golang 1.13

-- p.golang --
package p

type Symbol struct{}

func (Symbol) Method() error {
	return nil
}
