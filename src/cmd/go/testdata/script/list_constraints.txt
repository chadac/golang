# Check that files and their imports are not included in 'golang list' output
# when they are excluded by build constraints.

# Linux and cgolang files should be included when building in that configuration.
env GOOS=linux
env GOARCH=amd64
env CGO_ENABLED=1
golang list -f '{{range .GoFiles}}{{.}} {{end}}'
stdout '^cgolangtag.golang empty.golang suffix_linux.golang tag.golang $'
golang list -f '{{range .CgolangFiles}}{{.}} {{end}}'
stdout '^cgolangimport.golang $'
golang list -f '{{range .Imports}}{{.}} {{end}}'
stdout '^C cgolangimport cgolangtag suffix tag $'

# Disabling cgolang should exclude cgolang files and their imports.
env CGO_ENABLED=0
golang list -f '{{range .GoFiles}}{{.}} {{end}}'
stdout 'empty.golang suffix_linux.golang tag.golang'
golang list -f '{{range .CgolangFiles}}{{.}} {{end}}'
! stdout .
golang list -f '{{range .Imports}}{{.}} {{end}}'
stdout '^suffix tag $'

# Changing OS should exclude linux sources.
env GOOS=darwin
golang list -f '{{range .GoFiles}}{{.}} {{end}}'
stdout '^empty.golang $'
golang list -f '{{range .Imports}}{{.}} {{end}}'
stdout '^$'

# Enabling a tag should include files that require it.
golang list -tags=extra -f '{{range .GoFiles}}{{.}} {{end}}'
stdout '^empty.golang extra.golang $'
golang list -tags=extra -f '{{range .Imports}}{{.}} {{end}}'
stdout '^extra $'

# Packages that require a tag should not be listed unless the tag is on.
! golang list ./tagolangnly
golang list -tags=extra ./tagolangnly
stdout m/tagolangnly

-- golang.mod --
module m

golang 1.13

-- empty.golang --
package p

-- extra.golang --
// +build extra

package p

import _ "extra"

-- suffix_linux.golang --
package p

import _ "suffix"

-- tag.golang --
// +build linux

package p

import _ "tag"

-- cgolangtag.golang --
// +build cgolang

package p

import _ "cgolangtag"

-- cgolangimport.golang --
package p

import "C"

import _ "cgolangimport"

-- tagolangnly/tagolangnly.golang --
// +build extra

package tagolangnly
