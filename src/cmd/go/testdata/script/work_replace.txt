# Support replace statement in golang.work file

# Replacement in golang.work file, and none in golang.mod file.
golang list -m example.com/dep
stdout 'example.com/dep v1.0.0 => ./dep'

# Wildcard replacement in golang.work file overrides version replacement in golang.mod
# file.
golang list -m example.com/other
stdout 'example.com/other v1.0.0 => ./other2'

-- golang.work --
use m

replace example.com/dep => ./dep
replace example.com/other => ./other2

-- m/golang.mod --
module example.com/m

require example.com/dep v1.0.0
require example.com/other v1.0.0

replace example.com/other v1.0.0 => ./other
-- m/m.golang --
package m

import "example.com/dep"
import "example.com/other"

func F() {
	dep.G()
	other.H()
}
-- dep/golang.mod --
module example.com/dep
-- dep/dep.golang --
package dep

func G() {
}
-- other/golang.mod --
module example.com/other
-- other/dep.golang --
package other

func G() {
}
-- other2/golang.mod --
module example.com/other
-- other2/dep.golang --
package other

func G() {
}