[short] skip

golang test -c -o mainpanic.exe ./mainpanic &
golang test -c -o mainexit0.exe ./mainexit0 &
golang test -c -o testpanic.exe ./testpanic &
golang test -c -o testbgpanic.exe ./testbgpanic &
wait

# Test binaries that panic in TestMain should be marked as failing.

! golang test -json ./mainpanic
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! golang tool test2json ./mainpanic.exe
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

# Test binaries that exit with status 0 should be marked as passing.

golang test -json ./mainexit0
stdout '"Action":"pass"'
! stdout '"Action":"fail"'

golang tool test2json ./mainexit0.exe
stdout '"Action":"pass"'
! stdout '"Action":"fail"'

# Test functions that panic should never be marked as passing
# (https://golanglang.org/issue/40132).

! golang test -json ./testpanic
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! golang tool test2json ./testpanic.exe -test.v
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! golang tool test2json ./testpanic.exe
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

# Tests that panic in a background golangroutine should be marked as failing.

! golang test -json ./testbgpanic
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! golang tool test2json ./testbgpanic.exe -test.v
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

! golang tool test2json ./testbgpanic.exe
stdout '"Action":"fail"'
! stdout '"Action":"pass"'

-- golang.mod --
module m
golang 1.14
-- mainpanic/mainpanic_test.golang --
package mainpanic_test

import "testing"

func TestMain(m *testing.M) {
	panic("haha no")
}
-- mainexit0/mainexit0_test.golang --
package mainexit0_test

import (
	"fmt"
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	fmt.Println("nothing to do")
	os.Exit(0)
}
-- testpanic/testpanic_test.golang --
package testpanic_test

import "testing"

func TestPanic(*testing.T) {
	panic("haha no")
}
-- testbgpanic/testbgpanic_test.golang --
package testbgpanic_test

import "testing"

func TestPanicInBackground(*testing.T) {
	c := make(chan struct{})
	golang func() {
		panic("haha no")
		close(c)
	}()
	<-c
}
