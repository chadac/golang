# Go should refuse to build code that is too new according to golang.mod.

# golang.mod too new
env GOTOOLCHAIN=local
! golang build .
stderr '^golang: golang.mod requires golang >= 1.99999 \(running golang 1\..+\)$'

# golang.mod referenced from golang.work too new
cp golang.work.old golang.work
! golang build .
stderr '^golang: module . listed in golang.work file requires golang >= 1.99999, but golang.work lists golang 1.10; to update it:\n\tgolang work use$'

! golang work sync
stderr '^golang: cannot load module . listed in golang.work file: golang.mod requires golang >= 1.99999 \(running golang 1\..+\)$'

# golang.work too new
cp golang.work.new golang.work
cp golang.mod.old golang.mod
! golang build .
stderr '^golang: golang.work requires golang >= 1.99999 \(running golang 1\..+\)$'

# vendor too new
rm golang.work
mv notvendor vendor
! golang build -mod=vendor .
stderr '^golang: golanglang.org/x/text in vendor'${/}'modules.txt requires golang >= 1.99999 \(running golang 1\..+\)$'

-- golang.mod --
module example
golang 1.99999

-- p.golang --
package p

-- golang.mod.old --
module example
golang 1.10

-- golang.work.new --
golang 1.99999
use .

-- golang.work.old --
golang 1.10
use .

-- notvendor/modules.txt --
# golanglang.org/x/text v0.9.0
## explicit; golang 1.99999
golanglang.org/x/text/internal/language
