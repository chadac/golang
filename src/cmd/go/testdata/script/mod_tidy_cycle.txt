# Regression test for https://golanglang.org/issue/34086:
# 'golang mod tidy' produced different golang.mod file from other
# subcommands when certain kinds of cycles were present
# in the build graph.

env GO111MODULE=on

cp golang.mod golang.mod.orig
golang mod tidy
cmp golang.mod golang.mod.orig

# If the golang.mod file is already tidy, 'golang mod graph' should not modify it.
golang mod graph
cmp golang.mod golang.mod.orig

-- golang.mod --
module root

golang 1.13

replace (
	a v0.1.0 => ./a1
	b v0.1.0 => ./b1
	b v0.2.0 => ./b2
	c v0.1.0 => ./c1
	c v0.2.0 => ./c2
)

require (
	a v0.1.0
	b v0.2.0 // indirect
)
-- main.golang --
package main

import _ "a"

func main() {}

-- a1/golang.mod --
module a

golang 1.13

require b v0.1.0
-- a1/a.golang --
package a

import _ "c"
-- b1/golang.mod --
module b

golang 1.13

require c v0.1.0
-- b2/golang.mod --
module b

golang 1.13

require c v0.2.0
-- c1/golang.mod --
module c

golang 1.13
-- c2/c.golang --
package c
-- c2/golang.mod --
module c

golang 1.13

require b v0.2.0
-- c2/c.golang --
package c
