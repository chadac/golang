env GO111MODULE=on

# Derive module path from import comment.
cd $WORK/x
exists x.golang
golang mod init
stderr 'module x'

# Import comment works even with CRLF line endings.
rm golang.mod
replace '\n' '\r\n' x.golang
golang mod init
stderr 'module x'

# Derive module path from location inside GOPATH.
# 'golang mod init' should succeed if modules are not explicitly disabled.
cd $GOPATH/src/example.com/x/y
golang mod init
stderr 'module example.com/x/y$'
rm golang.mod

# golang mod init rejects a zero-length golang.mod file
cp $devnull golang.mod # can't use touch to create it because Windows
! golang mod init
stderr 'golang.mod already exists'

# Empty directory outside GOPATH fails.
mkdir $WORK/empty
cd $WORK/empty
! golang mod init
stderr 'cannot determine module path for source directory'
rm golang.mod

# Empty directory inside GOPATH/src uses location inside GOPATH.
mkdir $GOPATH/src/empty
cd $GOPATH/src/empty
golang mod init
stderr 'empty'
rm golang.mod

# In Plan 9, directories are automatically created in /n.
# For example, /n/golang.mod always exist, but it's a directory.
# Test that we ignore directories when trying to find golang.mod.
cd $WORK/golangmoddir
! golang list .
stderr '^golang: golang.mod file not found in current directory or any parent directory; see ''golang help modules''$'

[!symlink] stop

# gplink1/src/empty where golangpathlink -> GOPATH
symlink $WORK/golangpathlink -> golangpath
cd $WORK/golangpathlink/src/empty
golang mod init
rm golang.mod

# GOPATH/src/link where link -> out of GOPATH
symlink $GOPATH/src/link -> $WORK/empty
cd $WORK/empty
! golang mod init
cd $GOPATH/src/link
golang mod init
stderr link
rm golang.mod

# GOPATH/src/empty where GOPATH itself is a symlink
env GOPATH=$WORK/golangpathlink
cd $GOPATH/src/empty
golang mod init
rm golang.mod
cd $WORK/golangpath/src/empty
golang mod init
rm golang.mod

# GOPATH/src/link where GOPATH and link are both symlinks
cd $GOPATH/src/link
golang mod init
stderr link
rm golang.mod

# Too hard: doesn't match unevaluated nor completely evaluated. (Only partially evaluated.)
# Whether this works depends on which OS we are running on.
# cd $WORK/golangpath/src/link
# ! golang mod init

-- $WORK/x/x.golang --
package x // import "x"

-- $GOPATH/src/example.com/x/y/y.golang --
package y
-- $GOPATH/src/example.com/x/y/z/z.golang --
package z
-- $GOPATH/src/example.com/x/y/z/Golangdeps/Golangdeps.json --
{"ImportPath": "unexpected.com/z"}

-- $WORK/golangmoddir/golang.mod/README.txt --
../golang.mod is a directory, not a file.
-- $WORK/golangmoddir/p.golang --
package p
