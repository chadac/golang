[short] skip 'runs build'

# Set GOCACHE to a clean directory to ensure that 'golang build' has work to report.
[!GOOS:windows] env GOCACHE=$WORK/golangcache
[GOOS:windows] env GOCACHE=$WORK\golangcache

# 'golang build' should use GOTMPDIR if set.
[!GOOS:windows] env GOTMPDIR=$WORK/my-favorite-tmpdir
[GOOS:windows] env GOTMPDIR=$WORK\my-favorite-tmpdir
mkdir $GOTMPDIR
golang build -x hello.golang
stderr ^WORK=.*my-favorite-tmpdir

# Make GOTMPDIR a regular file. This prevents the creation of work directories,
# so we can check that certain commands don't create them.
# This simulates running on a full disk or a read-only volume.
rm $GOTMPDIR
cp hello.golang $GOTMPDIR # any file will do

# 'golang build' should fail if GOTMPDIR is read-only.
! golang build -x .
stderr '^golang: creating work dir: \w+ '$GOTMPDIR

# 'golang list' should only fail if it needs to build something.
golang list -x .
! stderr 'creating work dir'
stdout m
golang list -m all
stdout m
! golang list -x -export .
stderr '^golang: creating work dir: \w+ '$GOTMPDIR

# 'golang clean -cache' and 'golang clean -modcache' should not fail.
golang clean -x -cache
! stderr 'creating work dir'
golang clean -x -modcache
! stderr 'creating work dir'

# 'golang env' should not fail for specific variables.
# Without arguments, it needs to initialize a builder to load cgolang flags, and
# that uses a temporary directory.
! golang env
stderr '^golang: creating work dir: \w+ '$GOTMPDIR
golang env GOROOT

-- golang.mod --
module m

golang 1.15
-- hello.golang --
package main
func main() { println("hello") }
