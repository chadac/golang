# Test golang build -pgolang flag.
# Specifically, the build cache handles profile content correctly.

[short] skip 'compiles and links executables'

# Set up fresh GOCACHE.
env GOCACHE=$WORK/golangcache
mkdir $GOCACHE

# build without PGO
golang build triv.golang

# build with PGO, should trigger rebuild
# starting with an empty profile (the compiler accepts it)
golang build -x -pgolang=prof -o triv.exe triv.golang
stderr 'preprofile.*-i.*prof'
stderr 'compile.*-pgolangprofile=.*triv.golang'

# check that PGO appears in build info
# N.B. we can't start the stdout check with -pgolang because the script assumes that
# if the first arg starts with - it is a grep flag.
golang version -m triv.exe
stdout 'build\s+-pgolang=.*'${/}'prof'

# store the build ID
golang list -export -json=BuildID -pgolang=prof triv.golang
stdout '"BuildID":' # check that output actually contains a build ID
cp stdout list.out

# build again with the same profile, should be cached
golang build -x -pgolang=prof -o triv.exe triv.golang
! stderr 'compile.*triv.golang'

# check that the build ID is the same
golang list -export -json=BuildID -pgolang=prof triv.golang
cmp stdout list.out

# overwrite the prof
golang run overwrite.golang

# build again, profile content changed, should trigger rebuild, including std
golang build -n -pgolang=prof triv.golang
stderr 'preprofile.*-i.*prof'
stderr 'compile.*-pgolangprofile=.*triv.golang'
stderr 'compile.*-p runtime.*-pgolangprofile=.*'

# check that the build ID is different
golang list -export -json=BuildID -pgolang=prof triv.golang
! cmp stdout list.out

# build with trimpath, buildinfo path should be trimmed
golang build -x -pgolang=prof -trimpath -o triv.exe triv.golang

# check that path is trimmed
golang version -m triv.exe
stdout 'build\s+-pgolang=prof'

-- prof --
-- triv.golang --
package main
func main() {}
-- overwrite.golang --
package main

import (
	"os"
	"runtime/pprof"
	"time"
)

func main() {
	f, err := os.Create("prof")
	if err != nil {
		panic(err)
	}
	err = pprof.StartCPUProfile(f)
	if err != nil {
		panic(err)
	}
	// Spin to ensure we get some samples. If we get no samples, the result
	// is equivalent to an empty profile.
	start := time.Now()
	for time.Since(start) < 100*time.Millisecond {}
	pprof.StopCPUProfile()
	f.Close()
}
