generated by: golang run savedir.golang vendormod

-- a/foo/AUTHORS.txt --
-- a/foo/CONTRIBUTORS --
-- a/foo/LICENSE --
-- a/foo/PATENTS --
-- a/foo/COPYING --
-- a/foo/COPYLEFT --
-- a/foo/licensed-to-kill --
-- w/LICENSE --
-- x/NOTICE! --
-- x/x2/LICENSE --
-- mypkg/LICENSE.txt --
-- a/foo/bar/b/main.golang --
package b
-- a/foo/bar/b/main_test.golang --
package b

import (
	"os"
	"testing"
)

func TestDir(t *testing.T) {
	if _, err := os.Stat("../testdata/1"); err != nil {
		t.Fatalf("testdata: %v", err)
	}
}
-- a/foo/bar/c/main.golang --
package c
-- a/foo/bar/c/main_test.golang --
package c

import (
	"os"
	"testing"
)

func TestDir(t *testing.T) {
	if _, err := os.Stat("../../../testdata/1"); err != nil {
		t.Fatalf("testdata: %v", err)
	}
	if _, err := os.Stat("./testdata/1"); err != nil {
		t.Fatalf("testdata: %v", err)
	}
}
-- a/foo/bar/c/testdata/1 --
-- a/foo/bar/testdata/1 --
-- a/golang.mod --
module a
-- a/main.golang --
package a
-- a/main_test.golang --
package a

import (
	"os"
	"testing"
)

func TestDir(t *testing.T) {
	if _, err := os.Stat("./testdata/1"); err != nil {
		t.Fatalf("testdata: %v", err)
	}
}
-- a/testdata/1 --
-- appengine.golang --
// +build appengine

package m

import _ "appengine"
import _ "appengine/datastore"
-- golang.mod --
module m

require (
	a v1.0.0
	mysite/myname/mypkg v1.0.0
	w v1.0.0 // indirect
	x v1.0.0
	y v1.0.0
	z v1.0.0
)

replace (
	a v1.0.0 => ./a
	mysite/myname/mypkg v1.0.0 => ./mypkg
	w v1.0.0 => ./w
	x v1.0.0 => ./x
	y v1.0.0 => ./y
	z v1.0.0 => ./z
)
-- mypkg/golang.mod --
module me
-- mypkg/mydir/d.golang --
package mydir
-- subdir/v1_test.golang --
package m

import _ "mysite/myname/mypkg/mydir"
-- testdata1.golang --
package m

import _ "a"
-- testdata2.golang --
package m

import _ "a/foo/bar/b"
import _ "a/foo/bar/c"
-- v1.golang --
package m

import _ "x"
-- v2.golang --
// +build abc

package mMmMmMm

import _ "y"
-- v3.golang --
// +build !abc

package m

import _ "z"
-- v4.golang --
// +build notmytag

package m

import _ "x/x1"
-- w/golang.mod --
module w
-- w/w.golang --
package w
-- x/golang.mod --
module x
-- x/testdata/x.txt --
placeholder - want directory with no golang files
-- x/x.golang --
package x
-- x/x1/x1.golang --
// +build notmytag

package x1
-- x/x2/dummy.txt --
dummy
-- x/x_test.golang --
package x

import _ "w"
-- y/golang.mod --
module y
-- y/y.golang --
package y
-- z/golang.mod --
module z
-- z/z.golang --
package z
