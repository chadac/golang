rsc.io/quote@v1.2.0

-- .mod --
module "rsc.io/quote"
-- .info --
{"Version":"v1.2.0","Name":"d8a3de91045c932a1c71e545308fe97571d6d65c","Short":"d8a3de91045c","Time":"2018-02-14T00:47:51Z"}
-- golang.mod --
module "rsc.io/quote"
-- quote.golang --
// Copyright 2018 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

// Package quote collects pithy sayings.
package quote // import "rsc.io/quote"

// Hello returns a greeting.
func Hello() string {
	return "Hello, world."
}

// Glass returns a useful phrase for world travelers.
func Glass() string {
	// See http://www.oocities.org/nodotus/hbglass.html.
	return "I can eat glass and it doesn't hurt me."
}

// Golang returns a Golang proverb.
func Golang() string {
	return "Don't communicate by sharing memory, share memory by communicating."
}
-- quote_test.golang --
// Copyright 2018 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

package quote

import "testing"

func TestHello(t *testing.T) {
	hello := "Hello, world."
	if out := Hello(); out != hello {
		t.Errorf("Hello() = %q, want %q", out, hello)
	}
}

func TestGlass(t *testing.T) {
	glass := "I can eat glass and it doesn't hurt me."
	if out := Glass(); out != glass {
		t.Errorf("Glass() = %q, want %q", out, glass)
	}
}

// Golang returns a Golang proverb.
func TestGolang(t *testing.T) {
	golang1 := "Don't communicate by sharing memory. Share memory by communicating."
	if out := Golang(); out != golang1 {
		t.Errorf("Golang() = %q, want %q", out, golang1)
	}
}
