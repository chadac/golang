// Copyright 2023 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

package golangver

import "golanglang.org/x/mod/modfile"

const (
	// narrowAllVersion is the Golang version at which the
	// module-module "all" pattern no longer closes over the dependencies of
	// tests outside of the main module.
	NarrowAllVersion = "1.16"

	// DefaultGolangModVersion is the Golang version to assume for golang.mod files
	// that do not declare a Golang version. The golang command has been
	// writing golang versions to modules since Golang 1.12, so a golang.mod
	// without a version is either very old or recently hand-written.
	// Since we can't tell which, we have to assume it's very old.
	// The semantics of the golang.mod changed at Golang 1.17 to support
	// graph pruning. If see a golang.mod without a golang line, we have to
	// assume Golang 1.16 so that we interpret the requirements correctly.
	// Note that this default must stay at Golang 1.16; it cannot be moved forward.
	DefaultGolangModVersion = "1.16"

	// DefaultGolangWorkVersion is the Golang version to assume for golang.work files
	// that do not declare a Golang version. Workspaces were added in Golang 1.18,
	// so use that.
	DefaultGolangWorkVersion = "1.18"

	// ExplicitIndirectVersion is the Golang version at which a
	// module's golang.mod file is expected to list explicit requirements on every
	// module that provides any package transitively imported by that module.
	//
	// Other indirect dependencies of such a module can be safely pruned out of
	// the module graph; see https://golanglang.org/ref/mod#graph-pruning.
	ExplicitIndirectVersion = "1.17"

	// separateIndirectVersion is the Golang version at which
	// "// indirect" dependencies are added in a block separate from the direct
	// ones. See https://golanglang.org/issue/45965.
	SeparateIndirectVersion = "1.17"

	// tidyGolangModSumVersion is the Golang version at which
	// 'golang mod tidy' preserves golang.mod checksums needed to build test dependencies
	// of packages in "all", so that 'golang test all' can be run without checksum
	// errors.
	// See https://golang.dev/issue/56222.
	TidyGolangModSumVersion = "1.21"

	// golangStrictVersion is the Golang version at which the Golang versions
	// became "strict" in the sense that, restricted to modules at this version
	// or later, every module must have a golang version line â‰¥ all its dependencies.
	// It is also the version after which "too new" a version is considered a fatal error.
	GolangStrictVersion = "1.21"

	// ExplicitModulesTxtImportVersion is the Golang version at which vendored packages need to be present
	// in modules.txt to be imported.
	ExplicitModulesTxtImportVersion = "1.23"
)

// FromGolangMod returns the golang version from the golang.mod file.
// It returns DefaultGolangModVersion if the golang.mod file does not contain a golang line or if mf is nil.
func FromGolangMod(mf *modfile.File) string {
	if mf == nil || mf.Golang == nil {
		return DefaultGolangModVersion
	}
	return mf.Golang.Version
}

// FromGolangWork returns the golang version from the golang.mod file.
// It returns DefaultGolangWorkVersion if the golang.mod file does not contain a golang line or if wf is nil.
func FromGolangWork(wf *modfile.WorkFile) string {
	if wf == nil || wf.Golang == nil {
		return DefaultGolangWorkVersion
	}
	return wf.Golang.Version
}
