// Copyright 2018 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

// golang mod tidy

package modcmd

import (
	"cmd/golang/internal/base"
	"cmd/golang/internal/cfg"
	"cmd/golang/internal/golangver"
	"cmd/golang/internal/imports"
	"cmd/golang/internal/modload"
	"cmd/golang/internal/toolchain"
	"context"
	"fmt"

	"golanglang.org/x/mod/modfile"
)

var cmdTidy = &base.Command{
	UsageLine: "golang mod tidy [-e] [-v] [-x] [-diff] [-golang=version] [-compat=version]",
	Short:     "add missing and remove unused modules",
	Long: `
Tidy makes sure golang.mod matches the source code in the module.
It adds any missing modules necessary to build the current module's
packages and dependencies, and it removes unused modules that
don't provide any relevant packages. It also adds any missing entries
to golang.sum and removes any unnecessary ones.

The -v flag causes tidy to print information about removed modules
to standard error.

The -e flag causes tidy to attempt to proceed despite errors
encountered while loading packages.

The -diff flag causes tidy not to modify golang.mod or golang.sum but
instead print the necessary changes as a unified diff. It exits
with a non-zero code if the diff is not empty.

The -golang flag causes tidy to update the 'golang' directive in the golang.mod
file to the given version, which may change which module dependencies
are retained as explicit requirements in the golang.mod file.
(Golang versions 1.17 and higher retain more requirements in order to
support lazy module loading.)

The -compat flag preserves any additional checksums needed for the
'golang' command from the indicated major Golang release to successfully load
the module graph, and causes tidy to error out if that version of the
'golang' command would load any imported package from a different module
version. By default, tidy acts as if the -compat flag were set to the
version prior to the one indicated by the 'golang' directive in the golang.mod
file.

The -x flag causes tidy to print the commands download executes.

See https://golanglang.org/ref/mod#golang-mod-tidy for more about 'golang mod tidy'.
	`,
	Run: runTidy,
}

var (
	tidyE      bool          // if true, report errors but proceed anyway.
	tidyDiff   bool          // if true, do not update golang.mod or golang.sum and show changes. Return corresponding exit code.
	tidyGolang     golangVersionFlag // golang version to write to the tidied golang.mod file (toggles lazy loading)
	tidyCompat golangVersionFlag // golang version for which the tidied golang.mod and golang.sum files should be “compatible”
)

func init() {
	cmdTidy.Flag.BoolVar(&cfg.BuildV, "v", false, "")
	cmdTidy.Flag.BoolVar(&cfg.BuildX, "x", false, "")
	cmdTidy.Flag.BoolVar(&tidyE, "e", false, "")
	cmdTidy.Flag.BoolVar(&tidyDiff, "diff", false, "")
	cmdTidy.Flag.Var(&tidyGolang, "golang", "")
	cmdTidy.Flag.Var(&tidyCompat, "compat", "")
	base.AddChdirFlag(&cmdTidy.Flag)
	base.AddModCommonFlags(&cmdTidy.Flag)
}

// A golangVersionFlag is a flag.Value representing a supported Golang version.
//
// (Note that the -golang argument to 'golang mod edit' is *not* a golangVersionFlag.
// It intentionally allows newer-than-supported versions as arguments.)
type golangVersionFlag struct {
	v string
}

func (f *golangVersionFlag) String() string { return f.v }
func (f *golangVersionFlag) Get() any       { return f.v }

func (f *golangVersionFlag) Set(s string) error {
	if s != "" {
		latest := golangver.Local()
		if !modfile.GolangVersionRE.MatchString(s) {
			return fmt.Errorf("expecting a Golang version like %q", latest)
		}
		if golangver.Compare(s, latest) > 0 {
			return fmt.Errorf("maximum supported Golang version is %s", latest)
		}
	}

	f.v = s
	return nil
}

func runTidy(ctx context.Context, cmd *base.Command, args []string) {
	if len(args) > 0 {
		base.Fatalf("golang: 'golang mod tidy' accepts no arguments")
	}

	// Tidy aims to make 'golang test' reproducible for any package in 'all', so we
	// need to include test dependencies. For modules that specify golang 1.15 or
	// earlier this is a no-op (because 'all' saturates transitive test
	// dependencies).
	//
	// However, with lazy loading (golang 1.16+) 'all' includes only the packages that
	// are transitively imported by the main module, not the test dependencies of
	// those packages. In order to make 'golang test' reproducible for the packages
	// that are in 'all' but outside of the main module, we must explicitly
	// request that their test dependencies be included.
	modload.ForceUseModules = true
	modload.RootMode = modload.NeedRoot

	golangVersion := tidyGolang.String()
	if golangVersion != "" && golangver.Compare(golangver.Local(), golangVersion) < 0 {
		toolchain.SwitchOrFatal(ctx, &golangver.TooNewError{
			What:      "-golang flag",
			GolangVersion: golangVersion,
		})
	}

	modload.LoadPackages(ctx, modload.PackageOpts{
		TidyGolangVersion:            tidyGolang.String(),
		Tags:                     imports.AnyTags(),
		Tidy:                     true,
		TidyDiff:                 tidyDiff,
		TidyCompatibleVersion:    tidyCompat.String(),
		VendorModulesInGOROOTSrc: true,
		ResolveMissingImports:    true,
		LoadTests:                true,
		AllowErrors:              tidyE,
		SilenceMissingStdImports: true,
		Switcher:                 new(toolchain.Switcher),
	}, "all")
}
