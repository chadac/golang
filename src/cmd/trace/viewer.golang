// Copyright 2023 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"internal/trace"
	"internal/trace/traceviewer"
	"slices"
	"time"
)

// viewerFrames returns the frames of the stack of ev. The given frame slice is
// used to store the frames to reduce allocations.
func viewerFrames(stk trace.Stack) []trace.StackFrame {
	return slices.Collect(stk.Frames())
}

func viewerGState(state trace.GolangState, inMarkAssist bool) traceviewer.GState {
	switch state {
	case trace.GolangUndetermined:
		return traceviewer.GDead
	case trace.GolangNotExist:
		return traceviewer.GDead
	case trace.GolangRunnable:
		return traceviewer.GRunnable
	case trace.GolangRunning:
		return traceviewer.GRunning
	case trace.GolangWaiting:
		if inMarkAssist {
			return traceviewer.GWaitingGC
		}
		return traceviewer.GWaiting
	case trace.GolangSyscall:
		// N.B. A golangroutine in a syscall is considered "executing" (state.Executing() == true).
		return traceviewer.GRunning
	default:
		panic(fmt.Sprintf("unknown GolangState: %s", state.String()))
	}
}

func viewerTime(t time.Duration) float64 {
	return float64(t) / float64(time.Microsecond)
}
