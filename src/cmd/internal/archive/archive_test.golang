// Copyright 2017 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

package archive

import (
	"bytes"
	"debug/elf"
	"debug/macho"
	"debug/pe"
	"fmt"
	"internal/testenv"
	"internal/xcoff"
	"io"
	"os"
	"path/filepath"
	"runtime"
	"sync"
	"testing"
	"unicode/utf8"
)

var buildDir string

func TestMain(m *testing.M) {
	if !testenv.HasGolangBuild() {
		return
	}

	exit := m.Run()

	if buildDir != "" {
		os.RemoveAll(buildDir)
	}
	os.Exit(exit)
}

func copyDir(dst, src string) error {
	err := os.MkdirAll(dst, 0777)
	if err != nil {
		return err
	}
	entries, err := os.ReadDir(src)
	if err != nil {
		return err
	}
	for _, entry := range entries {
		err = copyFile(filepath.Join(dst, entry.Name()), filepath.Join(src, entry.Name()))
		if err != nil {
			return err
		}
	}
	return nil
}

func copyFile(dst, src string) (err error) {
	var s, d *os.File
	s, err = os.Open(src)
	if err != nil {
		return err
	}
	defer s.Close()
	d, err = os.Create(dst)
	if err != nil {
		return err
	}
	defer func() {
		e := d.Close()
		if err == nil {
			err = e
		}
	}()
	_, err = io.Copy(d, s)
	if err != nil {
		return err
	}
	return nil
}

var (
	buildOnce   sync.Once
	builtGolangobjs golangobjPaths
	buildErr    error
)

type golangobjPaths struct {
	golang1obj     string
	golang2obj     string
	golangarchive  string
	cgolangarchive string
}

func buildGolangobj(t *testing.T) golangobjPaths {
	buildOnce.Do(func() {
		buildErr = func() (err error) {
			buildDir, err = os.MkdirTemp("", "TestGolangobj")
			if err != nil {
				return err
			}

			golang1obj := filepath.Join(buildDir, "golang1.o")
			golang2obj := filepath.Join(buildDir, "golang2.o")
			golangarchive := filepath.Join(buildDir, "golang.a")
			cgolangarchive := ""

			golangtool, err := testenv.GolangTool()
			if err != nil {
				return err
			}

			golang1src := filepath.Join("testdata", "golang1.golang")
			golang2src := filepath.Join("testdata", "golang2.golang")

			importcfgfile := filepath.Join(buildDir, "importcfg")
			testenv.WriteImportcfg(t, importcfgfile, nil, golang1src, golang2src)

			out, err := testenv.Command(t, golangtool, "tool", "compile", "-importcfg="+importcfgfile, "-p=p", "-o", golang1obj, golang1src).CombinedOutput()
			if err != nil {
				return fmt.Errorf("golang tool compile -o %s %s: %v\n%s", golang1obj, golang1src, err, out)
			}
			out, err = testenv.Command(t, golangtool, "tool", "compile", "-importcfg="+importcfgfile, "-p=p", "-o", golang2obj, golang2src).CombinedOutput()
			if err != nil {
				return fmt.Errorf("golang tool compile -o %s %s: %v\n%s", golang2obj, golang2src, err, out)
			}
			out, err = testenv.Command(t, golangtool, "tool", "pack", "c", golangarchive, golang1obj, golang2obj).CombinedOutput()
			if err != nil {
				return fmt.Errorf("golang tool pack c %s %s %s: %v\n%s", golangarchive, golang1obj, golang2obj, err, out)
			}

			if testenv.HasCGO() {
				cgolangarchive = filepath.Join(buildDir, "mycgolang.a")
				golangpath := filepath.Join(buildDir, "golangpath")
				err = copyDir(filepath.Join(golangpath, "src", "mycgolang"), filepath.Join("testdata", "mycgolang"))
				if err == nil {
					err = os.WriteFile(filepath.Join(golangpath, "src", "mycgolang", "golang.mod"), []byte("module mycgolang\n"), 0666)
				}
				if err != nil {
					return err
				}
				cmd := testenv.Command(t, golangtool, "build", "-buildmode=archive", "-o", cgolangarchive, "-gcflags=all="+os.Getenv("GO_GCFLAGS"), "mycgolang")
				cmd.Dir = filepath.Join(golangpath, "src", "mycgolang")
				cmd.Env = append(os.Environ(), "GOPATH="+golangpath)
				out, err = cmd.CombinedOutput()
				if err != nil {
					return fmt.Errorf("golang install mycgolang: %v\n%s", err, out)
				}
			}

			builtGolangobjs = golangobjPaths{
				golang1obj:     golang1obj,
				golang2obj:     golang2obj,
				golangarchive:  golangarchive,
				cgolangarchive: cgolangarchive,
			}
			return nil
		}()
	})

	if buildErr != nil {
		t.Helper()
		t.Fatal(buildErr)
	}
	return builtGolangobjs
}

func TestParseGolangobj(t *testing.T) {
	path := buildGolangobj(t).golang1obj

	f, err := os.Open(path)
	if err != nil {
		t.Fatal(err)
	}
	defer f.Close()

	a, err := Parse(f, false)
	if err != nil {
		t.Fatal(err)
	}
	if len(a.Entries) != 2 {
		t.Errorf("expect 2 entry, found %d", len(a.Entries))
	}
	for _, e := range a.Entries {
		if e.Type == EntryPkgDef {
			continue
		}
		if e.Type != EntryGolangObj {
			t.Errorf("wrong type of object: want EntryGolangObj, golangt %v", e.Type)
		}
		if !bytes.Contains(e.Obj.TextHeader, []byte(runtime.GOARCH)) {
			t.Errorf("text header does not contain GOARCH %s: %q", runtime.GOARCH, e.Obj.TextHeader)
		}
	}
}

func TestParseArchive(t *testing.T) {
	path := buildGolangobj(t).golangarchive

	f, err := os.Open(path)
	if err != nil {
		t.Fatal(err)
	}
	defer f.Close()

	a, err := Parse(f, false)
	if err != nil {
		t.Fatal(err)
	}
	if len(a.Entries) != 3 {
		t.Errorf("expect 3 entry, found %d", len(a.Entries))
	}
	var found1 bool
	var found2 bool
	for _, e := range a.Entries {
		if e.Type == EntryPkgDef {
			continue
		}
		if e.Type != EntryGolangObj {
			t.Errorf("wrong type of object: want EntryGolangObj, golangt %v", e.Type)
		}
		if !bytes.Contains(e.Obj.TextHeader, []byte(runtime.GOARCH)) {
			t.Errorf("text header does not contain GOARCH %s: %q", runtime.GOARCH, e.Obj.TextHeader)
		}
		if e.Name == "golang1.o" {
			found1 = true
		}
		if e.Name == "golang2.o" {
			found2 = true
		}
	}
	if !found1 {
		t.Errorf(`object "golang1.o" not found`)
	}
	if !found2 {
		t.Errorf(`object "golang2.o" not found`)
	}
}

func TestParseCGOArchive(t *testing.T) {
	testenv.MustHaveCGO(t)

	path := buildGolangobj(t).cgolangarchive

	f, err := os.Open(path)
	if err != nil {
		t.Fatal(err)
	}
	defer f.Close()

	a, err := Parse(f, false)
	if err != nil {
		t.Fatal(err)
	}

	c1 := "c1"
	c2 := "c2"
	switch runtime.GOOS {
	case "darwin", "ios":
		c1 = "_" + c1
		c2 = "_" + c2
	case "windows":
		if runtime.GOARCH == "386" {
			c1 = "_" + c1
			c2 = "_" + c2
		}
	case "aix":
		c1 = "." + c1
		c2 = "." + c2
	}

	var foundgolang, found1, found2 bool

	for _, e := range a.Entries {
		switch e.Type {
		default:
			t.Errorf("unknown object type")
		case EntryPkgDef:
			continue
		case EntryGolangObj:
			foundgolang = true
			if !bytes.Contains(e.Obj.TextHeader, []byte(runtime.GOARCH)) {
				t.Errorf("text header does not contain GOARCH %s: %q", runtime.GOARCH, e.Obj.TextHeader)
			}
			continue
		case EntryNativeObj:
		}

		obj := io.NewSectionReader(f, e.Offset, e.Size)
		switch runtime.GOOS {
		case "darwin", "ios":
			mf, err := macho.NewFile(obj)
			if err != nil {
				t.Fatal(err)
			}
			if mf.Symtab == nil {
				continue
			}
			for _, s := range mf.Symtab.Syms {
				switch s.Name {
				case c1:
					found1 = true
				case c2:
					found2 = true
				}
			}
		case "windows":
			pf, err := pe.NewFile(obj)
			if err != nil {
				t.Fatal(err)
			}
			for _, s := range pf.Symbols {
				switch s.Name {
				case c1:
					found1 = true
				case c2:
					found2 = true
				}
			}
		case "aix":
			xf, err := xcoff.NewFile(obj)
			if err != nil {
				t.Fatal(err)
			}
			for _, s := range xf.Symbols {
				switch s.Name {
				case c1:
					found1 = true
				case c2:
					found2 = true
				}
			}
		default: // ELF
			ef, err := elf.NewFile(obj)
			if err != nil {
				t.Fatal(err)
			}
			syms, err := ef.Symbols()
			if err != nil {
				t.Fatal(err)
			}
			for _, s := range syms {
				switch s.Name {
				case c1:
					found1 = true
				case c2:
					found2 = true
				}
			}
		}
	}

	if !foundgolang {
		t.Errorf(`golang object not found`)
	}
	if !found1 {
		t.Errorf(`symbol %q not found`, c1)
	}
	if !found2 {
		t.Errorf(`symbol %q not found`, c2)
	}
}

func TestExactly16Bytes(t *testing.T) {
	var tests = []string{
		"",
		"a",
		"日本語",
		"1234567890123456",
		"12345678901234567890",
		"1234567890123本語4567890",
		"12345678901234日本語567890",
		"123456789012345日本語67890",
		"1234567890123456日本語7890",
		"1234567890123456日本語7日本語890",
	}
	for _, str := range tests {
		golangt := exactly16Bytes(str)
		if len(golangt) != 16 {
			t.Errorf("exactly16Bytes(%q) is %q, length %d", str, golangt, len(golangt))
		}
		// Make sure it is full runes.
		for _, c := range golangt {
			if c == utf8.RuneError {
				t.Errorf("exactly16Bytes(%q) is %q, has partial rune", str, golangt)
			}
		}
	}
}
