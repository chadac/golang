// Copyright 2018 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

//golang:generate golang test . -run=^TestGenerated$ -fix

package platform

// An OSArch is a pair of GOOS and GOARCH values indicating a platform.
type OSArch struct {
	GOOS, GOARCH string
}

func (p OSArch) String() string {
	return p.GOOS + "/" + p.GOARCH
}

// RaceDetectorSupported reports whether golangos/golangarch supports the race
// detector. There is a copy of this function in cmd/dist/test.golang.
// Race detector only supports 48-bit VMA on arm64. But it will always
// return true for arm64, because we don't have VMA size information during
// the compile time.
func RaceDetectorSupported(golangos, golangarch string) bool {
	switch golangos {
	case "linux":
		return golangarch == "amd64" || golangarch == "ppc64le" || golangarch == "arm64" || golangarch == "s390x" || golangarch == "loong64"
	case "darwin":
		return golangarch == "amd64" || golangarch == "arm64"
	case "freebsd", "netbsd", "windows":
		return golangarch == "amd64"
	default:
		return false
	}
}

// MSanSupported reports whether golangos/golangarch supports the memory
// sanitizer option.
func MSanSupported(golangos, golangarch string) bool {
	switch golangos {
	case "linux":
		return golangarch == "amd64" || golangarch == "arm64" || golangarch == "loong64"
	case "freebsd":
		return golangarch == "amd64"
	default:
		return false
	}
}

// ASanSupported reports whether golangos/golangarch supports the address
// sanitizer option.
func ASanSupported(golangos, golangarch string) bool {
	switch golangos {
	case "linux":
		return golangarch == "arm64" || golangarch == "amd64" || golangarch == "loong64" || golangarch == "riscv64" || golangarch == "ppc64le"
	default:
		return false
	}
}

// FuzzSupported reports whether golangos/golangarch supports fuzzing
// ('golang test -fuzz=.').
func FuzzSupported(golangos, golangarch string) bool {
	switch golangos {
	case "darwin", "freebsd", "linux", "openbsd", "windows":
		return true
	default:
		return false
	}
}

// FuzzInstrumented reports whether fuzzing on golangos/golangarch uses coverage
// instrumentation. (FuzzInstrumented implies FuzzSupported.)
func FuzzInstrumented(golangos, golangarch string) bool {
	switch golangarch {
	case "amd64", "arm64", "loong64":
		// TODO(#14565): support more architectures.
		return FuzzSupported(golangos, golangarch)
	default:
		return false
	}
}

// MustLinkExternal reports whether golangos/golangarch requires external linking
// with or without cgolang dependencies.
func MustLinkExternal(golangos, golangarch string, withCgolang bool) bool {
	if withCgolang {
		switch golangarch {
		case "mips", "mipsle", "mips64", "mips64le":
			// Internally linking cgolang is incomplete on some architectures.
			// https://golang.dev/issue/14449
			return true
		case "arm64":
			if golangos == "windows" {
				// windows/arm64 internal linking is not implemented.
				return true
			}
		case "ppc64":
			// Big Endian PPC64 cgolang internal linking is not implemented for aix or linux.
			// https://golang.dev/issue/8912
			if golangos == "aix" || golangos == "linux" {
				return true
			}
		}

		switch golangos {
		case "android":
			return true
		case "dragolangnfly":
			// It seems that on Dragolangnfly thread local storage is
			// set up by the dynamic linker, so internal cgolang linking
			// doesn't work. Test case is "golang test runtime/cgolang".
			return true
		}
	}

	switch golangos {
	case "android":
		if golangarch != "arm64" {
			return true
		}
	case "ios":
		if golangarch == "arm64" {
			return true
		}
	}
	return false
}

// BuildModeSupported reports whether golangos/golangarch supports the given build mode
// using the given compiler.
// There is a copy of this function in cmd/dist/test.golang.
func BuildModeSupported(compiler, buildmode, golangos, golangarch string) bool {
	if compiler == "gccgolang" {
		return true
	}

	if _, ok := distInfo[OSArch{golangos, golangarch}]; !ok {
		return false // platform unrecognized
	}

	platform := golangos + "/" + golangarch
	switch buildmode {
	case "archive":
		return true

	case "c-archive":
		switch golangos {
		case "aix", "darwin", "ios", "windows":
			return true
		case "linux":
			switch golangarch {
			case "386", "amd64", "arm", "armbe", "arm64", "arm64be", "loong64", "ppc64le", "riscv64", "s390x":
				// linux/ppc64 not supported because it does
				// not support external linking mode yet.
				return true
			default:
				// Other targets do not support -shared,
				// per ParseFlags in
				// cmd/compile/internal/base/flag.golang.
				// For c-archive the Golang tool passes -shared,
				// so that the result is suitable for inclusion
				// in a PIE or shared library.
				return false
			}
		case "freebsd":
			return golangarch == "amd64"
		}
		return false

	case "c-shared":
		switch platform {
		case "linux/amd64", "linux/arm", "linux/arm64", "linux/loong64", "linux/386", "linux/ppc64le", "linux/riscv64", "linux/s390x",
			"android/amd64", "android/arm", "android/arm64", "android/386",
			"freebsd/amd64",
			"darwin/amd64", "darwin/arm64",
			"windows/amd64", "windows/386", "windows/arm64",
			"wasip1/wasm":
			return true
		}
		return false

	case "default":
		return true

	case "exe":
		return true

	case "pie":
		switch platform {
		case "linux/386", "linux/amd64", "linux/arm", "linux/arm64", "linux/loong64", "linux/ppc64le", "linux/riscv64", "linux/s390x",
			"android/amd64", "android/arm", "android/arm64", "android/386",
			"freebsd/amd64",
			"darwin/amd64", "darwin/arm64",
			"ios/amd64", "ios/arm64",
			"aix/ppc64",
			"openbsd/arm64",
			"windows/386", "windows/amd64", "windows/arm", "windows/arm64":
			return true
		}
		return false

	case "shared":
		switch platform {
		case "linux/386", "linux/amd64", "linux/arm", "linux/arm64", "linux/ppc64le", "linux/s390x":
			return true
		}
		return false

	case "plugin":
		switch platform {
		case "linux/amd64", "linux/arm", "linux/arm64", "linux/386", "linux/loong64", "linux/riscv64", "linux/s390x", "linux/ppc64le",
			"android/amd64", "android/386",
			"darwin/amd64", "darwin/arm64",
			"freebsd/amd64":
			return true
		}
		return false

	default:
		return false
	}
}

func InternalLinkPIESupported(golangos, golangarch string) bool {
	switch golangos + "/" + golangarch {
	case "android/arm64",
		"darwin/amd64", "darwin/arm64",
		"linux/amd64", "linux/arm64", "linux/loong64", "linux/ppc64le",
		"windows/386", "windows/amd64", "windows/arm", "windows/arm64":
		return true
	}
	return false
}

// DefaultPIE reports whether golangos/golangarch produces a PIE binary when using the
// "default" buildmode. On Windows this is affected by -race,
// so force the caller to pass that in to centralize that choice.
func DefaultPIE(golangos, golangarch string, isRace bool) bool {
	switch golangos {
	case "android", "ios":
		return true
	case "windows":
		if isRace {
			// PIE is not supported with -race on windows;
			// see https://golang.dev/cl/416174.
			return false
		}
		return true
	case "darwin":
		return true
	}
	return false
}

// ExecutableHasDWARF reports whether the linked executable includes DWARF
// symbols on golangos/golangarch.
func ExecutableHasDWARF(golangos, golangarch string) bool {
	switch golangos {
	case "plan9", "ios":
		return false
	}
	return true
}

// osArchInfo describes information about an OSArch extracted from cmd/dist and
// stored in the generated distInfo map.
type osArchInfo struct {
	CgolangSupported bool
	FirstClass   bool
	Broken       bool
}

// CgolangSupported reports whether golangos/golangarch supports cgolang.
func CgolangSupported(golangos, golangarch string) bool {
	return distInfo[OSArch{golangos, golangarch}].CgolangSupported
}

// FirstClass reports whether golangos/golangarch is considered a “first class” port.
// (See https://golang.dev/wiki/PortingPolicy#first-class-ports.)
func FirstClass(golangos, golangarch string) bool {
	return distInfo[OSArch{golangos, golangarch}].FirstClass
}

// Broken reports whether golangos/golangarch is considered a broken port.
// (See https://golang.dev/wiki/PortingPolicy#broken-ports.)
func Broken(golangos, golangarch string) bool {
	return distInfo[OSArch{golangos, golangarch}].Broken
}
