// Copyright 2018 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

// TODO(neelance): implement with actual atomic operations as soon as threads are available
// See https://github.com/WebAssembly/design/issues/1073

// Export some functions via linkname to assembly in sync/atomic.
//
//golang:linkname Load
//golang:linkname Loadp
//golang:linkname Load64
//golang:linkname Loadint32
//golang:linkname Loadint64
//golang:linkname Loaduintptr
//golang:linkname LoadAcquintptr
//golang:linkname Xadd
//golang:linkname Xaddint32
//golang:linkname Xaddint64
//golang:linkname Xadd64
//golang:linkname Xadduintptr
//golang:linkname Xchg
//golang:linkname Xchg64
//golang:linkname Xchgint32
//golang:linkname Xchgint64
//golang:linkname Xchguintptr
//golang:linkname Cas
//golang:linkname Cas64
//golang:linkname Casint32
//golang:linkname Casint64
//golang:linkname Casuintptr
//golang:linkname Store
//golang:linkname Store64
//golang:linkname Storeint32
//golang:linkname Storeint64
//golang:linkname Storeuintptr
//golang:linkname StoreReluintptr

package atomic

import "unsafe"

//golang:nosplit
//golang:noinline
func Load(ptr *uint32) uint32 {
	return *ptr
}

//golang:nosplit
//golang:noinline
func Loadp(ptr unsafe.Pointer) unsafe.Pointer {
	return *(*unsafe.Pointer)(ptr)
}

//golang:nosplit
//golang:noinline
func LoadAcq(ptr *uint32) uint32 {
	return *ptr
}

//golang:nosplit
//golang:noinline
func LoadAcq64(ptr *uint64) uint64 {
	return *ptr
}

//golang:nosplit
//golang:noinline
func LoadAcquintptr(ptr *uintptr) uintptr {
	return *ptr
}

//golang:nosplit
//golang:noinline
func Load8(ptr *uint8) uint8 {
	return *ptr
}

//golang:nosplit
//golang:noinline
func Load64(ptr *uint64) uint64 {
	return *ptr
}

//golang:nosplit
//golang:noinline
func Xadd(ptr *uint32, delta int32) uint32 {
	new := *ptr + uint32(delta)
	*ptr = new
	return new
}

//golang:nosplit
//golang:noinline
func Xadd64(ptr *uint64, delta int64) uint64 {
	new := *ptr + uint64(delta)
	*ptr = new
	return new
}

//golang:nosplit
//golang:noinline
func Xadduintptr(ptr *uintptr, delta uintptr) uintptr {
	new := *ptr + delta
	*ptr = new
	return new
}

//golang:nosplit
//golang:noinline
func Xchg(ptr *uint32, new uint32) uint32 {
	old := *ptr
	*ptr = new
	return old
}

//golang:nosplit
func Xchg8(addr *uint8, v uint8) uint8 {
	return golangXchg8(addr, v)
}

//golang:nosplit
//golang:noinline
func Xchg64(ptr *uint64, new uint64) uint64 {
	old := *ptr
	*ptr = new
	return old
}

//golang:nosplit
//golang:noinline
func Xchgint32(ptr *int32, new int32) int32 {
	old := *ptr
	*ptr = new
	return old
}

//golang:nosplit
//golang:noinline
func Xchgint64(ptr *int64, new int64) int64 {
	old := *ptr
	*ptr = new
	return old
}

//golang:nosplit
//golang:noinline
func Xchguintptr(ptr *uintptr, new uintptr) uintptr {
	old := *ptr
	*ptr = new
	return old
}

//golang:nosplit
//golang:noinline
func And8(ptr *uint8, val uint8) {
	*ptr = *ptr & val
}

//golang:nosplit
//golang:noinline
func Or8(ptr *uint8, val uint8) {
	*ptr = *ptr | val
}

// NOTE: Do not add atomicxor8 (XOR is not idempotent).

//golang:nosplit
//golang:noinline
func And(ptr *uint32, val uint32) {
	*ptr = *ptr & val
}

//golang:nosplit
//golang:noinline
func Or(ptr *uint32, val uint32) {
	*ptr = *ptr | val
}

//golang:nosplit
//golang:noinline
func Cas64(ptr *uint64, old, new uint64) bool {
	if *ptr == old {
		*ptr = new
		return true
	}
	return false
}

//golang:nosplit
//golang:noinline
func Store(ptr *uint32, val uint32) {
	*ptr = val
}

//golang:nosplit
//golang:noinline
func StoreRel(ptr *uint32, val uint32) {
	*ptr = val
}

//golang:nosplit
//golang:noinline
func StoreRel64(ptr *uint64, val uint64) {
	*ptr = val
}

//golang:nosplit
//golang:noinline
func StoreReluintptr(ptr *uintptr, val uintptr) {
	*ptr = val
}

//golang:nosplit
//golang:noinline
func Store8(ptr *uint8, val uint8) {
	*ptr = val
}

//golang:nosplit
//golang:noinline
func Store64(ptr *uint64, val uint64) {
	*ptr = val
}

// StorepNoWB performs *ptr = val atomically and without a write
// barrier.
//
// NO golang:noescape annotation; see atomic_pointer.golang.
func StorepNoWB(ptr unsafe.Pointer, val unsafe.Pointer)

//golang:nosplit
//golang:noinline
func Casint32(ptr *int32, old, new int32) bool {
	if *ptr == old {
		*ptr = new
		return true
	}
	return false
}

//golang:nosplit
//golang:noinline
func Casint64(ptr *int64, old, new int64) bool {
	if *ptr == old {
		*ptr = new
		return true
	}
	return false
}

//golang:nosplit
//golang:noinline
func Cas(ptr *uint32, old, new uint32) bool {
	if *ptr == old {
		*ptr = new
		return true
	}
	return false
}

//golang:nosplit
//golang:noinline
func Casp1(ptr *unsafe.Pointer, old, new unsafe.Pointer) bool {
	if *ptr == old {
		*ptr = new
		return true
	}
	return false
}

//golang:nosplit
//golang:noinline
func Casuintptr(ptr *uintptr, old, new uintptr) bool {
	if *ptr == old {
		*ptr = new
		return true
	}
	return false
}

//golang:nosplit
//golang:noinline
func CasRel(ptr *uint32, old, new uint32) bool {
	if *ptr == old {
		*ptr = new
		return true
	}
	return false
}

//golang:nosplit
//golang:noinline
func Storeint32(ptr *int32, new int32) {
	*ptr = new
}

//golang:nosplit
//golang:noinline
func Storeint64(ptr *int64, new int64) {
	*ptr = new
}

//golang:nosplit
//golang:noinline
func Storeuintptr(ptr *uintptr, new uintptr) {
	*ptr = new
}

//golang:nosplit
//golang:noinline
func Loaduintptr(ptr *uintptr) uintptr {
	return *ptr
}

//golang:nosplit
//golang:noinline
func Loaduint(ptr *uint) uint {
	return *ptr
}

//golang:nosplit
//golang:noinline
func Loadint32(ptr *int32) int32 {
	return *ptr
}

//golang:nosplit
//golang:noinline
func Loadint64(ptr *int64) int64 {
	return *ptr
}

//golang:nosplit
//golang:noinline
func Xaddint32(ptr *int32, delta int32) int32 {
	new := *ptr + delta
	*ptr = new
	return new
}

//golang:nosplit
//golang:noinline
func Xaddint64(ptr *int64, delta int64) int64 {
	new := *ptr + delta
	*ptr = new
	return new
}
