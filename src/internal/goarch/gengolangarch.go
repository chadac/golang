// Copyright 2014 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

//golang:build ignore

package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"strings"
)

var golangarches []string

func main() {
	data, err := os.ReadFile("../../internal/syslist/syslist.golang")
	if err != nil {
		log.Fatal(err)
	}
	const golangarchPrefix = `var KnownArch = map[string]bool{`
	inGOARCH := false
	for _, line := range strings.Split(string(data), "\n") {
		if strings.HasPrefix(line, golangarchPrefix) {
			inGOARCH = true
		} else if inGOARCH && strings.HasPrefix(line, "}") {
			break
		} else if inGOARCH {
			golangarch := strings.Fields(line)[0]
			golangarch = strings.TrimPrefix(golangarch, `"`)
			golangarch = strings.TrimSuffix(golangarch, `":`)
			golangarches = append(golangarches, golangarch)
		}
	}

	for _, target := range golangarches {
		if target == "amd64p32" {
			continue
		}
		var buf bytes.Buffer
		fmt.Fprintf(&buf, "// Code generated by gengolangarch.golang using 'golang generate'. DO NOT EDIT.\n\n")
		fmt.Fprintf(&buf, "//golang:build %s\n\n", target) // must explicitly include target for bootstrapping purposes
		fmt.Fprintf(&buf, "package golangarch\n\n")
		fmt.Fprintf(&buf, "const GOARCH = `%s`\n\n", target)
		for _, golangarch := range golangarches {
			value := 0
			if golangarch == target {
				value = 1
			}
			fmt.Fprintf(&buf, "const Is%s = %d\n", strings.Title(golangarch), value)
		}
		err := os.WriteFile("zgolangarch_"+target+".golang", buf.Bytes(), 0666)
		if err != nil {
			log.Fatal(err)
		}
	}
}
