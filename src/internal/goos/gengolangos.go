// Copyright 2014 The Golang Authors. All rights reserved.
// Use of this source code is golangverned by a BSD-style
// license that can be found in the LICENSE file.

//golang:build ignore

package main

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"strings"
)

var golangoses []string

func main() {
	data, err := os.ReadFile("../../internal/syslist/syslist.golang")
	if err != nil {
		log.Fatal(err)
	}
	const golangosPrefix = `var KnownOS = map[string]bool{`
	inGOOS := false
	for _, line := range strings.Split(string(data), "\n") {
		if strings.HasPrefix(line, golangosPrefix) {
			inGOOS = true
		} else if inGOOS && strings.HasPrefix(line, "}") {
			break
		} else if inGOOS {
			golangos := strings.Fields(line)[0]
			golangos = strings.TrimPrefix(golangos, `"`)
			golangos = strings.TrimSuffix(golangos, `":`)
			golangoses = append(golangoses, golangos)
		}
	}

	for _, target := range golangoses {
		if target == "nacl" {
			continue
		}
		var tags []string
		if target == "linux" {
			tags = append(tags, "!android") // must explicitly exclude android for linux
		}
		if target == "solaris" {
			tags = append(tags, "!illumos") // must explicitly exclude illumos for solaris
		}
		if target == "darwin" {
			tags = append(tags, "!ios") // must explicitly exclude ios for darwin
		}
		tags = append(tags, target) // must explicitly include target for bootstrapping purposes
		var buf bytes.Buffer
		fmt.Fprintf(&buf, "// Code generated by gengolangos.golang using 'golang generate'. DO NOT EDIT.\n\n")
		fmt.Fprintf(&buf, "//golang:build %s\n\n", strings.Join(tags, " && "))
		fmt.Fprintf(&buf, "package golangos\n\n")
		fmt.Fprintf(&buf, "const GOOS = `%s`\n\n", target)
		for _, golangos := range golangoses {
			value := 0
			if golangos == target {
				value = 1
			}
			fmt.Fprintf(&buf, "const Is%s = %d\n", strings.Title(golangos), value)
		}
		err := os.WriteFile("zgolangos_"+target+".golang", buf.Bytes(), 0666)
		if err != nil {
			log.Fatal(err)
		}
	}
}
